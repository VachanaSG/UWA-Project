
UWA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c67c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002490  0800c844  0800c844  0001c844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ecd4  0800ecd4  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ecd4  0800ecd4  0001ecd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ecdc  0800ecdc  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ecdc  0800ecdc  0001ecdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ece0  0800ece0  0001ece0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800ece4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014f1c  200002d4  0800efb8  000202d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200151f0  0800efb8  000251f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e188  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000408d  00000000  00000000  0003e48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001808  00000000  00000000  00042520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001630  00000000  00000000  00043d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032a0e  00000000  00000000  00045358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002473e  00000000  00000000  00077d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001300dc  00000000  00000000  0009c4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cc580  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061f8  00000000  00000000  001cc5d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200002d4 	.word	0x200002d4
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800c82c 	.word	0x0800c82c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200002d8 	.word	0x200002d8
 8000204:	0800c82c 	.word	0x0800c82c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <LCDInit>:
UART_HandleTypeDef UartHandle;
uint32_t UartReady = 0;
/* Private functions ---------------------------------------------------------*/

/* ------------------------------LCD Functions ------------------------------------------------*/
void LCDInit() {
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
	uint8_t  lcd_status = LCD_OK;
 8000512:	2300      	movs	r3, #0
 8000514:	71fb      	strb	r3, [r7, #7]
	// Initialize LCD display with dynamically allocated frame buffer
	lcd_status = BSP_LCD_Init();
 8000516:	f004 f81f 	bl	8004558 <BSP_LCD_Init>
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	if(lcd_status != LCD_OK){
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d000      	beq.n	8000526 <LCDInit+0x1a>
		while(1){
 8000524:	e7fe      	b.n	8000524 <LCDInit+0x18>
		}
	}
	BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FRAME_BUFFER);
 8000526:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800052a:	2001      	movs	r0, #1
 800052c:	f004 f8ac 	bl	8004688 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8000530:	f004 fd8c 	bl	800504c <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8000534:	2001      	movs	r0, #1
 8000536:	f004 f907 	bl	8004748 <BSP_LCD_SelectLayer>
	BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800053a:	480f      	ldr	r0, [pc, #60]	; (8000578 <LCDInit+0x6c>)
 800053c:	f004 f946 	bl	80047cc <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000540:	f04f 30ff 	mov.w	r0, #4294967295
 8000544:	f004 f928 	bl	8004798 <BSP_LCD_SetBackColor>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000548:	f04f 30ff 	mov.w	r0, #4294967295
 800054c:	f004 f96e 	bl	800482c <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8000550:	480a      	ldr	r0, [pc, #40]	; (800057c <LCDInit+0x70>)
 8000552:	f004 f909 	bl	8004768 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"Hello World", CENTER_MODE);
 8000556:	2301      	movs	r3, #1
 8000558:	4a09      	ldr	r2, [pc, #36]	; (8000580 <LCDInit+0x74>)
 800055a:	210a      	movs	r1, #10
 800055c:	2000      	movs	r0, #0
 800055e:	f004 f9d1 	bl	8004904 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Display initialized", CENTER_MODE);
 8000562:	2301      	movs	r3, #1
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <LCDInit+0x78>)
 8000566:	211e      	movs	r1, #30
 8000568:	2000      	movs	r0, #0
 800056a:	f004 f9cb 	bl	8004904 <BSP_LCD_DisplayStringAt>
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	200002c0 	.word	0x200002c0
 800057c:	ff000080 	.word	0xff000080
 8000580:	0800c844 	.word	0x0800c844
 8000584:	0800c850 	.word	0x0800c850

08000588 <TSInit>:

void TSInit() {
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
	uint8_t  status = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	71fb      	strb	r3, [r7, #7]
	status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000592:	f004 f851 	bl	8004638 <BSP_LCD_GetXSize>
 8000596:	4603      	mov	r3, r0
 8000598:	b29c      	uxth	r4, r3
 800059a:	f004 f861 	bl	8004660 <BSP_LCD_GetYSize>
 800059e:	4603      	mov	r3, r0
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	4619      	mov	r1, r3
 80005a4:	4620      	mov	r0, r4
 80005a6:	f005 f91f 	bl	80057e8 <BSP_TS_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    if (status != TS_OK){
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d01c      	beq.n	80005ee <TSInit+0x66>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80005b4:	f04f 30ff 	mov.w	r0, #4294967295
 80005b8:	f004 f8ee 	bl	8004798 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80005bc:	481d      	ldr	r0, [pc, #116]	; (8000634 <TSInit+0xac>)
 80005be:	f004 f8d3 	bl	8004768 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"ERROR", CENTER_MODE);
 80005c2:	f004 f84d 	bl	8004660 <BSP_LCD_GetYSize>
 80005c6:	4603      	mov	r3, r0
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	3b5f      	subs	r3, #95	; 0x5f
 80005cc:	b299      	uxth	r1, r3
 80005ce:	2301      	movs	r3, #1
 80005d0:	4a19      	ldr	r2, [pc, #100]	; (8000638 <TSInit+0xb0>)
 80005d2:	2000      	movs	r0, #0
 80005d4:	f004 f996 	bl	8004904 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"Touchscreen cannot be initialized", CENTER_MODE);
 80005d8:	f004 f842 	bl	8004660 <BSP_LCD_GetYSize>
 80005dc:	4603      	mov	r3, r0
 80005de:	b29b      	uxth	r3, r3
 80005e0:	3b50      	subs	r3, #80	; 0x50
 80005e2:	b299      	uxth	r1, r3
 80005e4:	2301      	movs	r3, #1
 80005e6:	4a15      	ldr	r2, [pc, #84]	; (800063c <TSInit+0xb4>)
 80005e8:	2000      	movs	r0, #0
 80005ea:	f004 f98b 	bl	8004904 <BSP_LCD_DisplayStringAt>
	}
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80005ee:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80005f2:	f004 f8b9 	bl	8004768 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, 50, (uint8_t *)"Touch Screen initialized", CENTER_MODE);
 80005f6:	2301      	movs	r3, #1
 80005f8:	4a11      	ldr	r2, [pc, #68]	; (8000640 <TSInit+0xb8>)
 80005fa:	2132      	movs	r1, #50	; 0x32
 80005fc:	2000      	movs	r0, #0
 80005fe:	f004 f981 	bl	8004904 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 70, (uint8_t *)"Touch OK to continue", CENTER_MODE);
 8000602:	2301      	movs	r3, #1
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <TSInit+0xbc>)
 8000606:	2146      	movs	r1, #70	; 0x46
 8000608:	2000      	movs	r0, #0
 800060a:	f004 f97b 	bl	8004904 <BSP_LCD_DisplayStringAt>
    drawOK();
 800060e:	f000 fe81 	bl	8001314 <drawOK>
    while(1){
    	if(isOKTouched()){
 8000612:	f000 fe9d 	bl	8001350 <isOKTouched>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d003      	beq.n	8000624 <TSInit+0x9c>
    		HAL_Delay(100);
 800061c:	2064      	movs	r0, #100	; 0x64
 800061e:	f006 fb1f 	bl	8006c60 <HAL_Delay>
    		return;
 8000622:	e003      	b.n	800062c <TSInit+0xa4>
    	}
    	HAL_Delay(100);
 8000624:	2064      	movs	r0, #100	; 0x64
 8000626:	f006 fb1b 	bl	8006c60 <HAL_Delay>
    	if(isOKTouched()){
 800062a:	e7f2      	b.n	8000612 <TSInit+0x8a>
    }
}
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bd90      	pop	{r4, r7, pc}
 8000632:	bf00      	nop
 8000634:	ffff0000 	.word	0xffff0000
 8000638:	0800c864 	.word	0x0800c864
 800063c:	0800c86c 	.word	0x0800c86c
 8000640:	0800c890 	.word	0x0800c890
 8000644:	0800c8ac 	.word	0x0800c8ac

08000648 <TheApp>:

/*--------------- The UWA App ------------------------*/
void TheApp(){
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
	uint16_t *record_buffer = AUDIO_REC_BUF;
 800064e:	4b48      	ldr	r3, [pc, #288]	; (8000770 <TheApp+0x128>)
 8000650:	60fb      	str	r3, [r7, #12]
	uint16_t *mod_buffer = MOD_OUT_BUF;
 8000652:	4b48      	ldr	r3, [pc, #288]	; (8000774 <TheApp+0x12c>)
 8000654:	60bb      	str	r3, [r7, #8]
	uint16_t *demod_buffer = DEMOD_OUT_BUF;
 8000656:	4b48      	ldr	r3, [pc, #288]	; (8000778 <TheApp+0x130>)
 8000658:	607b      	str	r3, [r7, #4]
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800065a:	f04f 30ff 	mov.w	r0, #4294967295
 800065e:	f004 f8e5 	bl	800482c <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000662:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000666:	f004 f87f 	bl	8004768 <BSP_LCD_SetTextColor>
	ModDemodInit();
 800066a:	f000 f997 	bl	800099c <ModDemodInit>
	BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Press OK to start the recording", CENTER_MODE);
 800066e:	2301      	movs	r3, #1
 8000670:	4a42      	ldr	r2, [pc, #264]	; (800077c <TheApp+0x134>)
 8000672:	2164      	movs	r1, #100	; 0x64
 8000674:	2000      	movs	r0, #0
 8000676:	f004 f945 	bl	8004904 <BSP_LCD_DisplayStringAt>
	drawOK();
 800067a:	f000 fe4b 	bl	8001314 <drawOK>
	while(!isOKTouched()){
 800067e:	e002      	b.n	8000686 <TheApp+0x3e>
		HAL_Delay(100);
 8000680:	2064      	movs	r0, #100	; 0x64
 8000682:	f006 faed 	bl	8006c60 <HAL_Delay>
	while(!isOKTouched()){
 8000686:	f000 fe63 	bl	8001350 <isOKTouched>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d0f7      	beq.n	8000680 <TheApp+0x38>
	}
	record(record_buffer, NUM_BLOCKS);
 8000690:	21c8      	movs	r1, #200	; 0xc8
 8000692:	68f8      	ldr	r0, [r7, #12]
 8000694:	f000 f884 	bl	80007a0 <record>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000698:	f04f 30ff 	mov.w	r0, #4294967295
 800069c:	f004 f8c6 	bl	800482c <BSP_LCD_Clear>
	BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Recording Complete", CENTER_MODE);
 80006a0:	2301      	movs	r3, #1
 80006a2:	4a37      	ldr	r2, [pc, #220]	; (8000780 <TheApp+0x138>)
 80006a4:	2164      	movs	r1, #100	; 0x64
 80006a6:	2000      	movs	r0, #0
 80006a8:	f004 f92c 	bl	8004904 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 140, (uint8_t *)"Press OK to play the recorded audio", CENTER_MODE);
 80006ac:	2301      	movs	r3, #1
 80006ae:	4a35      	ldr	r2, [pc, #212]	; (8000784 <TheApp+0x13c>)
 80006b0:	218c      	movs	r1, #140	; 0x8c
 80006b2:	2000      	movs	r0, #0
 80006b4:	f004 f926 	bl	8004904 <BSP_LCD_DisplayStringAt>
	drawOK();
 80006b8:	f000 fe2c 	bl	8001314 <drawOK>
	while(!isOKTouched()){
 80006bc:	e002      	b.n	80006c4 <TheApp+0x7c>
		HAL_Delay(100);
 80006be:	2064      	movs	r0, #100	; 0x64
 80006c0:	f006 face 	bl	8006c60 <HAL_Delay>
	while(!isOKTouched()){
 80006c4:	f000 fe44 	bl	8001350 <isOKTouched>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d0f7      	beq.n	80006be <TheApp+0x76>
	}
	playback(record_buffer, NUM_BLOCKS);
 80006ce:	21c8      	movs	r1, #200	; 0xc8
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f000 f8db 	bl	800088c <playback>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80006d6:	f04f 30ff 	mov.w	r0, #4294967295
 80006da:	f004 f8a7 	bl	800482c <BSP_LCD_Clear>
	BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Playback Complete", CENTER_MODE);
 80006de:	2301      	movs	r3, #1
 80006e0:	4a29      	ldr	r2, [pc, #164]	; (8000788 <TheApp+0x140>)
 80006e2:	2164      	movs	r1, #100	; 0x64
 80006e4:	2000      	movs	r0, #0
 80006e6:	f004 f90d 	bl	8004904 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 140, (uint8_t *)"Modulating the Audio................", CENTER_MODE);
 80006ea:	2301      	movs	r3, #1
 80006ec:	4a27      	ldr	r2, [pc, #156]	; (800078c <TheApp+0x144>)
 80006ee:	218c      	movs	r1, #140	; 0x8c
 80006f0:	2000      	movs	r0, #0
 80006f2:	f004 f907 	bl	8004904 <BSP_LCD_DisplayStringAt>
	modulate((int16_t*)record_buffer, (int16_t*)mod_buffer, NUM_BLOCKS);
 80006f6:	22c8      	movs	r2, #200	; 0xc8
 80006f8:	68b9      	ldr	r1, [r7, #8]
 80006fa:	68f8      	ldr	r0, [r7, #12]
 80006fc:	f000 fa48 	bl	8000b90 <modulate>
		HAL_UART_Receive_IT(&UartHandle, (uint8_t *)rxbuf, 5);
		while(UartReady!=1){
		}
	}
	*/
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000700:	f04f 30ff 	mov.w	r0, #4294967295
 8000704:	f004 f892 	bl	800482c <BSP_LCD_Clear>
	BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Modulation Complete", CENTER_MODE);
 8000708:	2301      	movs	r3, #1
 800070a:	4a21      	ldr	r2, [pc, #132]	; (8000790 <TheApp+0x148>)
 800070c:	2164      	movs	r1, #100	; 0x64
 800070e:	2000      	movs	r0, #0
 8000710:	f004 f8f8 	bl	8004904 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 140, (uint8_t *)"Demodulating the Audio................", CENTER_MODE);
 8000714:	2301      	movs	r3, #1
 8000716:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <TheApp+0x14c>)
 8000718:	218c      	movs	r1, #140	; 0x8c
 800071a:	2000      	movs	r0, #0
 800071c:	f004 f8f2 	bl	8004904 <BSP_LCD_DisplayStringAt>
	demodulate((int16_t*)mod_buffer, (int16_t*)demod_buffer, NUM_BLOCKS);
 8000720:	22c8      	movs	r2, #200	; 0xc8
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	68b8      	ldr	r0, [r7, #8]
 8000726:	f000 fc1b 	bl	8000f60 <demodulate>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800072a:	f04f 30ff 	mov.w	r0, #4294967295
 800072e:	f004 f87d 	bl	800482c <BSP_LCD_Clear>
	BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"DeModulation Complete", CENTER_MODE);
 8000732:	2301      	movs	r3, #1
 8000734:	4a18      	ldr	r2, [pc, #96]	; (8000798 <TheApp+0x150>)
 8000736:	2164      	movs	r1, #100	; 0x64
 8000738:	2000      	movs	r0, #0
 800073a:	f004 f8e3 	bl	8004904 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(0, 140, (uint8_t *)"Press OK to play the Demodulated Audio", CENTER_MODE);
 800073e:	2301      	movs	r3, #1
 8000740:	4a16      	ldr	r2, [pc, #88]	; (800079c <TheApp+0x154>)
 8000742:	218c      	movs	r1, #140	; 0x8c
 8000744:	2000      	movs	r0, #0
 8000746:	f004 f8dd 	bl	8004904 <BSP_LCD_DisplayStringAt>
	drawOK();
 800074a:	f000 fde3 	bl	8001314 <drawOK>
	while(!isOKTouched()){
 800074e:	e002      	b.n	8000756 <TheApp+0x10e>
		HAL_Delay(100);
 8000750:	2064      	movs	r0, #100	; 0x64
 8000752:	f006 fa85 	bl	8006c60 <HAL_Delay>
	while(!isOKTouched()){
 8000756:	f000 fdfb 	bl	8001350 <isOKTouched>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d0f7      	beq.n	8000750 <TheApp+0x108>
	}
	playback(demod_buffer, NUM_BLOCKS);
 8000760:	21c8      	movs	r1, #200	; 0xc8
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f000 f892 	bl	800088c <playback>
	return;
 8000768:	bf00      	nop
}
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	c007f800 	.word	0xc007f800
 8000774:	c00b1800 	.word	0xc00b1800
 8000778:	c0309800 	.word	0xc0309800
 800077c:	0800c8c4 	.word	0x0800c8c4
 8000780:	0800c8e4 	.word	0x0800c8e4
 8000784:	0800c8f8 	.word	0x0800c8f8
 8000788:	0800c91c 	.word	0x0800c91c
 800078c:	0800c930 	.word	0x0800c930
 8000790:	0800c958 	.word	0x0800c958
 8000794:	0800c96c 	.word	0x0800c96c
 8000798:	0800c994 	.word	0x0800c994
 800079c:	0800c9ac 	.word	0x0800c9ac

080007a0 <record>:
 * For audio playback using this data, make sure to make two copies
 * of the data in  the playback buffer with each sample duplicated
 * and stored together, as the playback function supports only stereo audio
 */
uint16_t internal_buffer[AUDIO_BLOCK_SIZE];
void record(uint16_t *rec_buff, int num_blocks){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
	//uint16_t *rec_buffer = AUDIO_REC_BUF;
	uint16_t *rec_buffer = rec_buff;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	617b      	str	r3, [r7, #20]
	BSP_AUDIO_IN_Init(8000, 16, 2);
 80007ae:	2202      	movs	r2, #2
 80007b0:	2110      	movs	r1, #16
 80007b2:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80007b6:	f003 fc85 	bl	80040c4 <BSP_AUDIO_IN_Init>
	//BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2, OUTPUT_DEVICE_HEADPHONE, 8000, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80007ba:	4b31      	ldr	r3, [pc, #196]	; (8000880 <record+0xe0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
	BSP_AUDIO_IN_Record((uint16_t*)internal_buffer, AUDIO_BLOCK_SIZE);
 80007c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c4:	482f      	ldr	r0, [pc, #188]	; (8000884 <record+0xe4>)
 80007c6:	f003 fcfb 	bl	80041c0 <BSP_AUDIO_IN_Record>
	int num = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
	while(1){
		BSP_LCD_SetTextColor(((num%2)?LCD_COLOR_WHITE:LCD_COLOR_RED));
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d002      	beq.n	80007de <record+0x3e>
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	e000      	b.n	80007e0 <record+0x40>
 80007de:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <record+0xe8>)
 80007e0:	4618      	mov	r0, r3
 80007e2:	f003 ffc1 	bl	8004768 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(200,200,10);
 80007e6:	220a      	movs	r2, #10
 80007e8:	21c8      	movs	r1, #200	; 0xc8
 80007ea:	20c8      	movs	r0, #200	; 0xc8
 80007ec:	f004 fb8e 	bl	8004f0c <BSP_LCD_FillCircle>
		while(audio_rec_buffer_state != BUFFER_OFFSET_HALF){
 80007f0:	bf00      	nop
 80007f2:	4b23      	ldr	r3, [pc, #140]	; (8000880 <record+0xe0>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d1fb      	bne.n	80007f2 <record+0x52>
		}
		audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <record+0xe0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
		for(int i=0;i<AUDIO_BLOCK_SIZE/2;i+=2){
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	e00b      	b.n	800081e <record+0x7e>
			*rec_buffer = internal_buffer[i];
 8000806:	4a1f      	ldr	r2, [pc, #124]	; (8000884 <record+0xe4>)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	801a      	strh	r2, [r3, #0]
			rec_buffer++;
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	3302      	adds	r3, #2
 8000816:	617b      	str	r3, [r7, #20]
		for(int i=0;i<AUDIO_BLOCK_SIZE/2;i+=2){
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	3302      	adds	r3, #2
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000824:	dbef      	blt.n	8000806 <record+0x66>
		}
		while(audio_rec_buffer_state != BUFFER_OFFSET_FULL){
 8000826:	bf00      	nop
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <record+0xe0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b02      	cmp	r3, #2
 800082e:	d1fb      	bne.n	8000828 <record+0x88>
		}
		audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <record+0xe0>)
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
		for(int i=AUDIO_BLOCK_SIZE/2;i<AUDIO_BLOCK_SIZE;i+=2){
 8000836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	e00b      	b.n	8000856 <record+0xb6>
			*rec_buffer = internal_buffer[i];
 800083e:	4a11      	ldr	r2, [pc, #68]	; (8000884 <record+0xe4>)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	801a      	strh	r2, [r3, #0]
			rec_buffer++;
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	3302      	adds	r3, #2
 800084e:	617b      	str	r3, [r7, #20]
		for(int i=AUDIO_BLOCK_SIZE/2;i<AUDIO_BLOCK_SIZE;i+=2){
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	3302      	adds	r3, #2
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800085c:	dbef      	blt.n	800083e <record+0x9e>
		}
		if(num == num_blocks)
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	429a      	cmp	r2, r3
 8000864:	d003      	beq.n	800086e <record+0xce>
			break;
		else
			num++;
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	3301      	adds	r3, #1
 800086a:	613b      	str	r3, [r7, #16]
		BSP_LCD_SetTextColor(((num%2)?LCD_COLOR_WHITE:LCD_COLOR_RED));
 800086c:	e7af      	b.n	80007ce <record+0x2e>
			break;
 800086e:	bf00      	nop
	}
	BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 8000870:	2002      	movs	r0, #2
 8000872:	f003 fcbd 	bl	80041f0 <BSP_AUDIO_IN_Stop>
}
 8000876:	bf00      	nop
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200002f0 	.word	0x200002f0
 8000884:	200003b0 	.word	0x200003b0
 8000888:	ffff0000 	.word	0xffff0000

0800088c <playback>:

void playback(uint16_t *play_buff, int num_blocks){
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
	//uint16_t *play_buffer = AUDIO_REC_BUF;
	uint16_t *play_buffer = play_buff;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	617b      	str	r3, [r7, #20]
	BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 100, 8000);
 800089a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800089e:	2164      	movs	r1, #100	; 0x64
 80008a0:	2002      	movs	r0, #2
 80008a2:	f003 f937 	bl	8003b14 <BSP_AUDIO_OUT_Init>
	//BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2, OUTPUT_DEVICE_HEADPHONE, 8000, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
	audio_play_buffer_state = BUFFER_OFFSET_NONE;
 80008a6:	4b3a      	ldr	r3, [pc, #232]	; (8000990 <playback+0x104>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
	BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 80008ac:	2005      	movs	r0, #5
 80008ae:	f003 f9cf 	bl	8003c50 <BSP_AUDIO_OUT_SetAudioFrameSlot>
	BSP_AUDIO_OUT_Play((uint16_t*)internal_buffer, AUDIO_BLOCK_SIZE*2);
 80008b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008b6:	4837      	ldr	r0, [pc, #220]	; (8000994 <playback+0x108>)
 80008b8:	f003 f97e 	bl	8003bb8 <BSP_AUDIO_OUT_Play>
	int num = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
	while(1){
		BSP_LCD_SetTextColor(((num%2)?LCD_COLOR_WHITE:LCD_COLOR_RED));
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d002      	beq.n	80008d0 <playback+0x44>
 80008ca:	f04f 33ff 	mov.w	r3, #4294967295
 80008ce:	e000      	b.n	80008d2 <playback+0x46>
 80008d0:	4b31      	ldr	r3, [pc, #196]	; (8000998 <playback+0x10c>)
 80008d2:	4618      	mov	r0, r3
 80008d4:	f003 ff48 	bl	8004768 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(200,200,10);
 80008d8:	220a      	movs	r2, #10
 80008da:	21c8      	movs	r1, #200	; 0xc8
 80008dc:	20c8      	movs	r0, #200	; 0xc8
 80008de:	f004 fb15 	bl	8004f0c <BSP_LCD_FillCircle>
		while(audio_play_buffer_state != BUFFER_OFFSET_HALF){
 80008e2:	bf00      	nop
 80008e4:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <playback+0x104>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d1fb      	bne.n	80008e4 <playback+0x58>
		}
		audio_play_buffer_state = BUFFER_OFFSET_NONE;
 80008ec:	4b28      	ldr	r3, [pc, #160]	; (8000990 <playback+0x104>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
		for(int i=0;i<AUDIO_BLOCK_SIZE/2;i+=2){
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	e012      	b.n	800091e <playback+0x92>
			internal_buffer[i] = (*play_buffer);
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	8819      	ldrh	r1, [r3, #0]
 80008fc:	4a25      	ldr	r2, [pc, #148]	; (8000994 <playback+0x108>)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			internal_buffer[i+1] = (*play_buffer);
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	3301      	adds	r3, #1
 8000908:	697a      	ldr	r2, [r7, #20]
 800090a:	8811      	ldrh	r1, [r2, #0]
 800090c:	4a21      	ldr	r2, [pc, #132]	; (8000994 <playback+0x108>)
 800090e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			play_buffer++;
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	3302      	adds	r3, #2
 8000916:	617b      	str	r3, [r7, #20]
		for(int i=0;i<AUDIO_BLOCK_SIZE/2;i+=2){
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	3302      	adds	r3, #2
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000924:	dbe8      	blt.n	80008f8 <playback+0x6c>
		}
		while(audio_play_buffer_state != BUFFER_OFFSET_FULL){
 8000926:	bf00      	nop
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <playback+0x104>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b02      	cmp	r3, #2
 800092e:	d1fb      	bne.n	8000928 <playback+0x9c>
		}
		audio_play_buffer_state = BUFFER_OFFSET_NONE;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <playback+0x104>)
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
		for(int i=AUDIO_BLOCK_SIZE/2;i<AUDIO_BLOCK_SIZE;i+=2){
 8000936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	e012      	b.n	8000964 <playback+0xd8>
			internal_buffer[i] = (*play_buffer);
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	8819      	ldrh	r1, [r3, #0]
 8000942:	4a14      	ldr	r2, [pc, #80]	; (8000994 <playback+0x108>)
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			internal_buffer[i+1] = (*play_buffer);
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	3301      	adds	r3, #1
 800094e:	697a      	ldr	r2, [r7, #20]
 8000950:	8811      	ldrh	r1, [r2, #0]
 8000952:	4a10      	ldr	r2, [pc, #64]	; (8000994 <playback+0x108>)
 8000954:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			play_buffer++;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	3302      	adds	r3, #2
 800095c:	617b      	str	r3, [r7, #20]
		for(int i=AUDIO_BLOCK_SIZE/2;i<AUDIO_BLOCK_SIZE;i+=2){
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	3302      	adds	r3, #2
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800096a:	dbe8      	blt.n	800093e <playback+0xb2>
		}
		if(num == num_blocks)
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d003      	beq.n	800097c <playback+0xf0>
			break;
		else
			num++;
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	3301      	adds	r3, #1
 8000978:	613b      	str	r3, [r7, #16]
		BSP_LCD_SetTextColor(((num%2)?LCD_COLOR_WHITE:LCD_COLOR_RED));
 800097a:	e7a1      	b.n	80008c0 <playback+0x34>
			break;
 800097c:	bf00      	nop
	}
	BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800097e:	2002      	movs	r0, #2
 8000980:	f003 f944 	bl	8003c0c <BSP_AUDIO_OUT_Stop>
	BSP_AUDIO_OUT_DeInit();
 8000984:	f003 f984 	bl	8003c90 <BSP_AUDIO_OUT_DeInit>
}
 8000988:	bf00      	nop
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	200002f4 	.word	0x200002f4
 8000994:	200003b0 	.word	0x200003b0
 8000998:	ffff0000 	.word	0xffff0000

0800099c <ModDemodInit>:
			demod_out[(j*block_size)+i] = (int16_t)demod_output[i];
		}
	}
}

void ModDemodInit(){
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af02      	add	r7, sp, #8
	/* -------------------------------*/
	/* ----- intialisations ---------*/
	/*-------------------------------*/
	/* -------- sine and cos wave ------------*/
	float32_t tm = (float32_t)1/(float32_t)fs_ms;
 80009a2:	4b61      	ldr	r3, [pc, #388]	; (8000b28 <ModDemodInit+0x18c>)
 80009a4:	607b      	str	r3, [r7, #4]
	for(int i=0;i<block_size;i++){
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	e034      	b.n	8000a16 <ModDemodInit+0x7a>
		sin_wo[i] = arm_sin_f32((float32_t)2 * (float32_t)3.14 * (float32_t)wo * (float32_t)(tm*(float32_t)i));
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	ee07 3a90 	vmov	s15, r3
 80009b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80009ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009be:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8000b2c <ModDemodInit+0x190>
 80009c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009c6:	eeb0 0a67 	vmov.f32	s0, s15
 80009ca:	f005 fb05 	bl	8005fd8 <arm_sin_f32>
 80009ce:	eef0 7a40 	vmov.f32	s15, s0
 80009d2:	4a57      	ldr	r2, [pc, #348]	; (8000b30 <ModDemodInit+0x194>)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4413      	add	r3, r2
 80009da:	edc3 7a00 	vstr	s15, [r3]
		cos_wo[i] = arm_cos_f32((float32_t)2 * (float32_t)3.14 * (float32_t)wo * (float32_t)(tm*(float32_t)i));
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	ee07 3a90 	vmov	s15, r3
 80009e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80009ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009f0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8000b2c <ModDemodInit+0x190>
 80009f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009f8:	eeb0 0a67 	vmov.f32	s0, s15
 80009fc:	f005 fa70 	bl	8005ee0 <arm_cos_f32>
 8000a00:	eef0 7a40 	vmov.f32	s15, s0
 8000a04:	4a4b      	ldr	r2, [pc, #300]	; (8000b34 <ModDemodInit+0x198>)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4413      	add	r3, r2
 8000a0c:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;i<block_size;i++){
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	3301      	adds	r3, #1
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2b7f      	cmp	r3, #127	; 0x7f
 8000a1a:	ddc7      	ble.n	80009ac <ModDemodInit+0x10>
	}
	/* -------------- Carrier wave ------- */
	tm = (float32_t)1/(float32_t)fs_mod;
 8000a1c:	4b46      	ldr	r3, [pc, #280]	; (8000b38 <ModDemodInit+0x19c>)
 8000a1e:	607b      	str	r3, [r7, #4]
	for(int i=0;i<upsmp_block_size;i++){
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	e034      	b.n	8000a90 <ModDemodInit+0xf4>
		sin_fc[i] = arm_sin_f32((float32_t)2 * (float32_t)3.14 * (float32_t)f1 * (float32_t)(tm*(float32_t)i));
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a30:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a38:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000b3c <ModDemodInit+0x1a0>
 8000a3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a40:	eeb0 0a67 	vmov.f32	s0, s15
 8000a44:	f005 fac8 	bl	8005fd8 <arm_sin_f32>
 8000a48:	eef0 7a40 	vmov.f32	s15, s0
 8000a4c:	4a3c      	ldr	r2, [pc, #240]	; (8000b40 <ModDemodInit+0x1a4>)
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4413      	add	r3, r2
 8000a54:	edc3 7a00 	vstr	s15, [r3]
		cos_fc[i] = arm_cos_f32((float32_t)2 * (float32_t)3.14 * (float32_t)f1 * (float32_t)(tm*(float32_t)i));
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	ee07 3a90 	vmov	s15, r3
 8000a5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a62:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a6a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8000b3c <ModDemodInit+0x1a0>
 8000a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	f005 fa33 	bl	8005ee0 <arm_cos_f32>
 8000a7a:	eef0 7a40 	vmov.f32	s15, s0
 8000a7e:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <ModDemodInit+0x1a8>)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;i<upsmp_block_size;i++){
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000a96:	dbc6      	blt.n	8000a26 <ModDemodInit+0x8a>
	}
	/* -------- low pass filter for mod ------------- */
	arm_fir_init_f32(&FIR_lp_mod_sin, numTapsLP, &FIRcoef_lp[0], &FIRState_lp_mod_sin[0], block_size);
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <ModDemodInit+0x1ac>)
 8000a9e:	4a2b      	ldr	r2, [pc, #172]	; (8000b4c <ModDemodInit+0x1b0>)
 8000aa0:	211d      	movs	r1, #29
 8000aa2:	482b      	ldr	r0, [pc, #172]	; (8000b50 <ModDemodInit+0x1b4>)
 8000aa4:	f006 f856 	bl	8006b54 <arm_fir_init_f32>
	arm_fir_init_f32(&FIR_lp_mod_cos, numTapsLP, &FIRcoef_lp[0], &FIRState_lp_mod_cos[0], block_size);
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <ModDemodInit+0x1b8>)
 8000aae:	4a27      	ldr	r2, [pc, #156]	; (8000b4c <ModDemodInit+0x1b0>)
 8000ab0:	211d      	movs	r1, #29
 8000ab2:	4829      	ldr	r0, [pc, #164]	; (8000b58 <ModDemodInit+0x1bc>)
 8000ab4:	f006 f84e 	bl	8006b54 <arm_fir_init_f32>
	/* -------- low pass filter for demod ------------- */
	arm_fir_init_f32(&FIR_lp_demod_sin, numTapsLP, &FIRcoef_lp[0], &FIRState_lp_demod_sin[0], block_size);
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <ModDemodInit+0x1c0>)
 8000abe:	4a23      	ldr	r2, [pc, #140]	; (8000b4c <ModDemodInit+0x1b0>)
 8000ac0:	211d      	movs	r1, #29
 8000ac2:	4827      	ldr	r0, [pc, #156]	; (8000b60 <ModDemodInit+0x1c4>)
 8000ac4:	f006 f846 	bl	8006b54 <arm_fir_init_f32>
	arm_fir_init_f32(&FIR_lp_demod_cos, numTapsLP, &FIRcoef_lp[0], &FIRState_lp_demod_cos[0], block_size);
 8000ac8:	2380      	movs	r3, #128	; 0x80
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <ModDemodInit+0x1c8>)
 8000ace:	4a1f      	ldr	r2, [pc, #124]	; (8000b4c <ModDemodInit+0x1b0>)
 8000ad0:	211d      	movs	r1, #29
 8000ad2:	4825      	ldr	r0, [pc, #148]	; (8000b68 <ModDemodInit+0x1cc>)
 8000ad4:	f006 f83e 	bl	8006b54 <arm_fir_init_f32>
	/* -------- low pass filter for upsampling ------------- */
	arm_fir_init_f32(&FIR_mod_upsmp_sin, numTaps_upsmp, &FIRcoef_lp_upsmp[0], &FIRState_mod_upsmp_sin[0], upsmp_block_size);
 8000ad8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <ModDemodInit+0x1d0>)
 8000ae0:	4a23      	ldr	r2, [pc, #140]	; (8000b70 <ModDemodInit+0x1d4>)
 8000ae2:	2178      	movs	r1, #120	; 0x78
 8000ae4:	4823      	ldr	r0, [pc, #140]	; (8000b74 <ModDemodInit+0x1d8>)
 8000ae6:	f006 f835 	bl	8006b54 <arm_fir_init_f32>
	arm_fir_init_f32(&FIR_mod_upsmp_cos, numTaps_upsmp, &FIRcoef_lp_upsmp[0], &FIRState_mod_upsmp_cos[0], upsmp_block_size);
 8000aea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <ModDemodInit+0x1dc>)
 8000af2:	4a1f      	ldr	r2, [pc, #124]	; (8000b70 <ModDemodInit+0x1d4>)
 8000af4:	2178      	movs	r1, #120	; 0x78
 8000af6:	4821      	ldr	r0, [pc, #132]	; (8000b7c <ModDemodInit+0x1e0>)
 8000af8:	f006 f82c 	bl	8006b54 <arm_fir_init_f32>
	/* -------- low pass filter for downsampling ------------- */
	arm_fir_init_f32(&FIR_demod_upsmp_sin, numTaps_upsmp, &FIRcoef_lp_upsmp[0], &FIRState_demod_upsmp_sin[0], upsmp_block_size);
 8000afc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <ModDemodInit+0x1e4>)
 8000b04:	4a1a      	ldr	r2, [pc, #104]	; (8000b70 <ModDemodInit+0x1d4>)
 8000b06:	2178      	movs	r1, #120	; 0x78
 8000b08:	481e      	ldr	r0, [pc, #120]	; (8000b84 <ModDemodInit+0x1e8>)
 8000b0a:	f006 f823 	bl	8006b54 <arm_fir_init_f32>
	arm_fir_init_f32(&FIR_demod_upsmp_cos, numTaps_upsmp, &FIRcoef_lp_upsmp[0], &FIRState_demod_upsmp_cos[0], upsmp_block_size);
 8000b0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <ModDemodInit+0x1ec>)
 8000b16:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <ModDemodInit+0x1d4>)
 8000b18:	2178      	movs	r1, #120	; 0x78
 8000b1a:	481c      	ldr	r0, [pc, #112]	; (8000b8c <ModDemodInit+0x1f0>)
 8000b1c:	f006 f81a 	bl	8006b54 <arm_fir_init_f32>
	//arm_fir_interpolate_init_f32(&FIR_mod_upsmp_sin, upsmp_factor, numTaps_upsmp, &FIRcoef_lp_upsmp[0], &FIRState_mod_upsmp_sin[0], block_size);
	//arm_fir_interpolate_init_f32(&FIR_mod_upsmp_cos, upsmp_factor, numTaps_upsmp, &FIRcoef_lp_upsmp[0], &FIRState_mod_upsmp_cos[0], block_size);
	/* -------- downsampling using decimator ------------- */
	//arm_fir_decimate_init_f32(&FIR_demod_upsmp_sin, numTaps_upsmp, upsmp_factor, &FIRcoef_lp_upsmp[0], &FIRState_demod_upsmp_sin[0], upsmp_block_size);
	//arm_fir_decimate_init_f32(&FIR_demod_upsmp_cos, numTaps_upsmp, upsmp_factor, &FIRcoef_lp_upsmp[0], &FIRState_demod_upsmp_cos[0], upsmp_block_size);
	return;
 8000b20:	bf00      	nop
}
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	3903126f 	.word	0x3903126f
 8000b2c:	4621e800 	.word	0x4621e800
 8000b30:	20007d40 	.word	0x20007d40
 8000b34:	20008540 	.word	0x20008540
 8000b38:	372ec33e 	.word	0x372ec33e
 8000b3c:	483a2180 	.word	0x483a2180
 8000b40:	20008d40 	.word	0x20008d40
 8000b44:	2000ed40 	.word	0x2000ed40
 8000b48:	20000be0 	.word	0x20000be0
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000bb0 	.word	0x20000bb0
 8000b54:	20000e50 	.word	0x20000e50
 8000b58:	20000bbc 	.word	0x20000bbc
 8000b5c:	200010c0 	.word	0x200010c0
 8000b60:	20000bc8 	.word	0x20000bc8
 8000b64:	20001330 	.word	0x20001330
 8000b68:	20000bd4 	.word	0x20000bd4
 8000b6c:	200015d0 	.word	0x200015d0
 8000b70:	20000074 	.word	0x20000074
 8000b74:	200015a0 	.word	0x200015a0
 8000b78:	20002fac 	.word	0x20002fac
 8000b7c:	200015ac 	.word	0x200015ac
 8000b80:	20004988 	.word	0x20004988
 8000b84:	200015b8 	.word	0x200015b8
 8000b88:	20006364 	.word	0x20006364
 8000b8c:	200015c4 	.word	0x200015c4

08000b90 <modulate>:
 * input_buuf = pointer to the input buffer
 * output_buf = pointer to the output buffer
 * input_buf_size = size of the input buffer (should be multiple of the block_size)
 * output_buf should be 12 times larger than input_buf
 */
void modulate(int16_t *input_buf, int16_t *output_buf, uint32_t num_buf){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	f5ad 4d02 	sub.w	sp, sp, #33280	; 0x8200
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000b9e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000ba2:	6018      	str	r0, [r3, #0]
 8000ba4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000ba8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8000bac:	6019      	str	r1, [r3, #0]
 8000bae:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000bb2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000bb6:	601a      	str	r2, [r3, #0]
	float32_t mod_input[block_size] , mod_output[upsmp_block_size];
	//for(int k = 0;k<num_buf;k++){
		for(int j=0;j<((buf_size*num_buf)/block_size);j++){
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f248 2224 	movw	r2, #33316	; 0x8224
 8000bbe:	443a      	add	r2, r7
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	e196      	b.n	8000ef2 <modulate+0x362>
			int offset = (j*block_size);
 8000bc4:	f248 2324 	movw	r3, #33316	; 0x8224
 8000bc8:	443b      	add	r3, r7
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	01db      	lsls	r3, r3, #7
 8000bce:	f248 2214 	movw	r2, #33300	; 0x8214
 8000bd2:	443a      	add	r2, r7
 8000bd4:	6013      	str	r3, [r2, #0]
			for(int i=0;i<block_size;i++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f248 2220 	movw	r2, #33312	; 0x8220
 8000bdc:	443a      	add	r2, r7
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	e02b      	b.n	8000c3a <modulate+0xaa>
				mod_input[i] = input_buf[offset + i];
 8000be2:	f248 2314 	movw	r3, #33300	; 0x8214
 8000be6:	443b      	add	r3, r7
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	f248 2320 	movw	r3, #33312	; 0x8220
 8000bee:	443b      	add	r3, r7
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000bfa:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 8000bfe:	6812      	ldr	r2, [r2, #0]
 8000c00:	4413      	add	r3, r2
 8000c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c06:	ee07 3a90 	vmov	s15, r3
 8000c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c0e:	f248 2328 	movw	r3, #33320	; 0x8228
 8000c12:	443b      	add	r3, r7
 8000c14:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8000c18:	f248 2320 	movw	r3, #33312	; 0x8220
 8000c1c:	443b      	add	r3, r7
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0;i<block_size;i++)
 8000c28:	f248 2320 	movw	r3, #33312	; 0x8220
 8000c2c:	443b      	add	r3, r7
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	f248 2220 	movw	r2, #33312	; 0x8220
 8000c36:	443a      	add	r2, r7
 8000c38:	6013      	str	r3, [r2, #0]
 8000c3a:	f248 2320 	movw	r3, #33312	; 0x8220
 8000c3e:	443b      	add	r3, r7
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b7f      	cmp	r3, #127	; 0x7f
 8000c44:	ddcd      	ble.n	8000be2 <modulate+0x52>
			float32_t sin_buf1[block_size], cos_buf1[block_size];
			float32_t sin_buf2[block_size], cos_buf2[block_size];
			float32_t sin_buf3[upsmp_block_size]={0}, cos_buf3[upsmp_block_size]={0};
 8000c46:	f241 2328 	movw	r3, #4648	; 0x1228
 8000c4a:	443b      	add	r3, r7
 8000c4c:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8000c50:	4618      	mov	r0, r3
 8000c52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c56:	461a      	mov	r2, r3
 8000c58:	2100      	movs	r1, #0
 8000c5a:	f00b fddf 	bl	800c81c <memset>
 8000c5e:	f242 2328 	movw	r3, #8744	; 0x2228
 8000c62:	443b      	add	r3, r7
 8000c64:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c6e:	461a      	mov	r2, r3
 8000c70:	2100      	movs	r1, #0
 8000c72:	f00b fdd3 	bl	800c81c <memset>
			float32_t sin_buf4[upsmp_block_size], cos_buf4[upsmp_block_size];
			arm_mult_f32(&mod_input[0], &sin_wo[0], &sin_buf1[0], block_size);
 8000c76:	4aa9      	ldr	r2, [pc, #676]	; (8000f1c <modulate+0x38c>)
 8000c78:	f248 2328 	movw	r3, #33320	; 0x8228
 8000c7c:	4413      	add	r3, r2
 8000c7e:	19da      	adds	r2, r3, r7
 8000c80:	f248 0014 	movw	r0, #32788	; 0x8014
 8000c84:	4438      	add	r0, r7
 8000c86:	2380      	movs	r3, #128	; 0x80
 8000c88:	49a5      	ldr	r1, [pc, #660]	; (8000f20 <modulate+0x390>)
 8000c8a:	f005 f8a5 	bl	8005dd8 <arm_mult_f32>
			arm_mult_f32(&mod_input[0], &cos_wo[0], &cos_buf1[0], block_size);
 8000c8e:	4aa5      	ldr	r2, [pc, #660]	; (8000f24 <modulate+0x394>)
 8000c90:	f248 2328 	movw	r3, #33320	; 0x8228
 8000c94:	4413      	add	r3, r2
 8000c96:	19da      	adds	r2, r3, r7
 8000c98:	f248 0014 	movw	r0, #32788	; 0x8014
 8000c9c:	4438      	add	r0, r7
 8000c9e:	2380      	movs	r3, #128	; 0x80
 8000ca0:	49a1      	ldr	r1, [pc, #644]	; (8000f28 <modulate+0x398>)
 8000ca2:	f005 f899 	bl	8005dd8 <arm_mult_f32>
			arm_fir_f32(&FIR_lp_mod_sin, &sin_buf1[0], &sin_buf2[0], block_size);
 8000ca6:	4aa1      	ldr	r2, [pc, #644]	; (8000f2c <modulate+0x39c>)
 8000ca8:	f248 2328 	movw	r3, #33320	; 0x8228
 8000cac:	4413      	add	r3, r2
 8000cae:	19da      	adds	r2, r3, r7
 8000cb0:	499a      	ldr	r1, [pc, #616]	; (8000f1c <modulate+0x38c>)
 8000cb2:	f248 2328 	movw	r3, #33320	; 0x8228
 8000cb6:	440b      	add	r3, r1
 8000cb8:	19d9      	adds	r1, r3, r7
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	489c      	ldr	r0, [pc, #624]	; (8000f30 <modulate+0x3a0>)
 8000cbe:	f005 fa17 	bl	80060f0 <arm_fir_f32>
			arm_fir_f32(&FIR_lp_mod_cos, &cos_buf1[0], &cos_buf2[0], block_size);
 8000cc2:	4a9c      	ldr	r2, [pc, #624]	; (8000f34 <modulate+0x3a4>)
 8000cc4:	f248 2328 	movw	r3, #33320	; 0x8228
 8000cc8:	4413      	add	r3, r2
 8000cca:	19da      	adds	r2, r3, r7
 8000ccc:	4995      	ldr	r1, [pc, #596]	; (8000f24 <modulate+0x394>)
 8000cce:	f248 2328 	movw	r3, #33320	; 0x8228
 8000cd2:	440b      	add	r3, r1
 8000cd4:	19d9      	adds	r1, r3, r7
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	4897      	ldr	r0, [pc, #604]	; (8000f38 <modulate+0x3a8>)
 8000cda:	f005 fa09 	bl	80060f0 <arm_fir_f32>
			for(int k=0;k<block_size;k++){
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f248 221c 	movw	r2, #33308	; 0x821c
 8000ce4:	443a      	add	r2, r7
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	e042      	b.n	8000d70 <modulate+0x1e0>
				sin_buf3[k*upsmp_factor] = sin_buf2[k];
 8000cea:	f248 231c 	movw	r3, #33308	; 0x821c
 8000cee:	443b      	add	r3, r7
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f241 2328 	movw	r3, #4648	; 0x1228
 8000d00:	443b      	add	r3, r7
 8000d02:	f6a3 6214 	subw	r2, r3, #3604	; 0xe14
 8000d06:	f248 231c 	movw	r3, #33308	; 0x821c
 8000d0a:	443b      	add	r3, r7
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	f241 2328 	movw	r3, #4648	; 0x1228
 8000d18:	443b      	add	r3, r7
 8000d1a:	f6a3 2114 	subw	r1, r3, #2580	; 0xa14
 8000d1e:	0083      	lsls	r3, r0, #2
 8000d20:	440b      	add	r3, r1
 8000d22:	601a      	str	r2, [r3, #0]
				cos_buf3[k*upsmp_factor] = cos_buf2[k];
 8000d24:	f248 231c 	movw	r3, #33308	; 0x821c
 8000d28:	443b      	add	r3, r7
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	4413      	add	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f241 2328 	movw	r3, #4648	; 0x1228
 8000d3a:	443b      	add	r3, r7
 8000d3c:	f6a3 4214 	subw	r2, r3, #3092	; 0xc14
 8000d40:	f248 231c 	movw	r3, #33308	; 0x821c
 8000d44:	443b      	add	r3, r7
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	f242 2328 	movw	r3, #8744	; 0x2228
 8000d52:	443b      	add	r3, r7
 8000d54:	f5a3 7105 	sub.w	r1, r3, #532	; 0x214
 8000d58:	0083      	lsls	r3, r0, #2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	601a      	str	r2, [r3, #0]
			for(int k=0;k<block_size;k++){
 8000d5e:	f248 231c 	movw	r3, #33308	; 0x821c
 8000d62:	443b      	add	r3, r7
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	f248 221c 	movw	r2, #33308	; 0x821c
 8000d6c:	443a      	add	r2, r7
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	f248 231c 	movw	r3, #33308	; 0x821c
 8000d74:	443b      	add	r3, r7
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b7f      	cmp	r3, #127	; 0x7f
 8000d7a:	ddb6      	ble.n	8000cea <modulate+0x15a>
			}
			arm_fir_f32(&FIR_mod_upsmp_sin, &sin_buf3[0], &sin_buf4[0], upsmp_block_size);
 8000d7c:	4a6f      	ldr	r2, [pc, #444]	; (8000f3c <modulate+0x3ac>)
 8000d7e:	f248 2328 	movw	r3, #33320	; 0x8228
 8000d82:	4413      	add	r3, r2
 8000d84:	19da      	adds	r2, r3, r7
 8000d86:	496e      	ldr	r1, [pc, #440]	; (8000f40 <modulate+0x3b0>)
 8000d88:	f248 2328 	movw	r3, #33320	; 0x8228
 8000d8c:	440b      	add	r3, r1
 8000d8e:	19d9      	adds	r1, r3, r7
 8000d90:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d94:	486b      	ldr	r0, [pc, #428]	; (8000f44 <modulate+0x3b4>)
 8000d96:	f005 f9ab 	bl	80060f0 <arm_fir_f32>
			arm_fir_f32(&FIR_mod_upsmp_cos, &cos_buf3[0], &cos_buf4[0], upsmp_block_size);
 8000d9a:	4a6b      	ldr	r2, [pc, #428]	; (8000f48 <modulate+0x3b8>)
 8000d9c:	f248 2328 	movw	r3, #33320	; 0x8228
 8000da0:	4413      	add	r3, r2
 8000da2:	19da      	adds	r2, r3, r7
 8000da4:	4969      	ldr	r1, [pc, #420]	; (8000f4c <modulate+0x3bc>)
 8000da6:	f248 2328 	movw	r3, #33320	; 0x8228
 8000daa:	440b      	add	r3, r1
 8000dac:	19d9      	adds	r1, r3, r7
 8000dae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000db2:	4867      	ldr	r0, [pc, #412]	; (8000f50 <modulate+0x3c0>)
 8000db4:	f005 f99c 	bl	80060f0 <arm_fir_f32>
			//arm_fir_interpolate_f32(&FIR_mod_upsmp_sin, &sin_buf2[0], &sin_buf4[0], block_size);
			//arm_fir_interpolate_f32(&FIR_mod_upsmp_cos, &cos_buf2[0], &cos_buf4[0], block_size);
			offset = (j*upsmp_block_size);
 8000db8:	f248 2324 	movw	r3, #33316	; 0x8224
 8000dbc:	443b      	add	r3, r7
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	025b      	lsls	r3, r3, #9
 8000dc8:	f248 2214 	movw	r2, #33300	; 0x8214
 8000dcc:	443a      	add	r2, r7
 8000dce:	6013      	str	r3, [r2, #0]
			arm_mult_f32(&sin_buf4[0], &sin_fc[0], &sin_buf4[0], upsmp_block_size);
 8000dd0:	4a5a      	ldr	r2, [pc, #360]	; (8000f3c <modulate+0x3ac>)
 8000dd2:	f248 2328 	movw	r3, #33320	; 0x8228
 8000dd6:	4413      	add	r3, r2
 8000dd8:	19da      	adds	r2, r3, r7
 8000dda:	4858      	ldr	r0, [pc, #352]	; (8000f3c <modulate+0x3ac>)
 8000ddc:	f248 2328 	movw	r3, #33320	; 0x8228
 8000de0:	4403      	add	r3, r0
 8000de2:	19d8      	adds	r0, r3, r7
 8000de4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000de8:	495a      	ldr	r1, [pc, #360]	; (8000f54 <modulate+0x3c4>)
 8000dea:	f004 fff5 	bl	8005dd8 <arm_mult_f32>
			arm_mult_f32(&cos_buf4[0], &cos_fc[0], &cos_buf4[0], upsmp_block_size);
 8000dee:	4a56      	ldr	r2, [pc, #344]	; (8000f48 <modulate+0x3b8>)
 8000df0:	f248 2328 	movw	r3, #33320	; 0x8228
 8000df4:	4413      	add	r3, r2
 8000df6:	19da      	adds	r2, r3, r7
 8000df8:	4853      	ldr	r0, [pc, #332]	; (8000f48 <modulate+0x3b8>)
 8000dfa:	f248 2328 	movw	r3, #33320	; 0x8228
 8000dfe:	4403      	add	r3, r0
 8000e00:	19d8      	adds	r0, r3, r7
 8000e02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e06:	4954      	ldr	r1, [pc, #336]	; (8000f58 <modulate+0x3c8>)
 8000e08:	f004 ffe6 	bl	8005dd8 <arm_mult_f32>
			arm_add_f32(&sin_buf4[0], &cos_buf4[0], &mod_output[0], upsmp_block_size);
 8000e0c:	4a53      	ldr	r2, [pc, #332]	; (8000f5c <modulate+0x3cc>)
 8000e0e:	f248 2328 	movw	r3, #33320	; 0x8228
 8000e12:	4413      	add	r3, r2
 8000e14:	19da      	adds	r2, r3, r7
 8000e16:	494c      	ldr	r1, [pc, #304]	; (8000f48 <modulate+0x3b8>)
 8000e18:	f248 2328 	movw	r3, #33320	; 0x8228
 8000e1c:	440b      	add	r3, r1
 8000e1e:	19d9      	adds	r1, r3, r7
 8000e20:	4846      	ldr	r0, [pc, #280]	; (8000f3c <modulate+0x3ac>)
 8000e22:	f248 2328 	movw	r3, #33320	; 0x8228
 8000e26:	4403      	add	r3, r0
 8000e28:	19d8      	adds	r0, r3, r7
 8000e2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e2e:	f004 ff57 	bl	8005ce0 <arm_add_f32>
			for(int i=0;i<upsmp_block_size;i++){
 8000e32:	2300      	movs	r3, #0
 8000e34:	f248 2218 	movw	r2, #33304	; 0x8218
 8000e38:	443a      	add	r2, r7
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	e049      	b.n	8000ed2 <modulate+0x342>
				mod_output[i]*=5;
 8000e3e:	f247 2328 	movw	r3, #29224	; 0x7228
 8000e42:	443b      	add	r3, r7
 8000e44:	f6a3 2214 	subw	r2, r3, #2580	; 0xa14
 8000e48:	f248 2318 	movw	r3, #33304	; 0x8218
 8000e4c:	443b      	add	r3, r7
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	edd3 7a00 	vldr	s15, [r3]
 8000e58:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000e5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e60:	f247 2328 	movw	r3, #29224	; 0x7228
 8000e64:	443b      	add	r3, r7
 8000e66:	f6a3 2214 	subw	r2, r3, #2580	; 0xa14
 8000e6a:	f248 2318 	movw	r3, #33304	; 0x8218
 8000e6e:	443b      	add	r3, r7
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	edc3 7a00 	vstr	s15, [r3]
				output_buf[offset+i] = (int16_t)mod_output[i];
 8000e7a:	f247 2328 	movw	r3, #29224	; 0x7228
 8000e7e:	443b      	add	r3, r7
 8000e80:	f6a3 2214 	subw	r2, r3, #2580	; 0xa14
 8000e84:	f248 2318 	movw	r3, #33304	; 0x8218
 8000e88:	443b      	add	r3, r7
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	edd3 7a00 	vldr	s15, [r3]
 8000e94:	f248 2314 	movw	r3, #33300	; 0x8214
 8000e98:	443b      	add	r3, r7
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	f248 2318 	movw	r3, #33304	; 0x8218
 8000ea0:	443b      	add	r3, r7
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000eac:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 8000eb0:	6812      	ldr	r2, [r2, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eb8:	ee17 2a90 	vmov	r2, s15
 8000ebc:	b212      	sxth	r2, r2
 8000ebe:	801a      	strh	r2, [r3, #0]
			for(int i=0;i<upsmp_block_size;i++){
 8000ec0:	f248 2318 	movw	r3, #33304	; 0x8218
 8000ec4:	443b      	add	r3, r7
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	f248 2218 	movw	r2, #33304	; 0x8218
 8000ece:	443a      	add	r2, r7
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	f248 2318 	movw	r3, #33304	; 0x8218
 8000ed6:	443b      	add	r3, r7
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000ede:	dbae      	blt.n	8000e3e <modulate+0x2ae>
		for(int j=0;j<((buf_size*num_buf)/block_size);j++){
 8000ee0:	f248 2324 	movw	r3, #33316	; 0x8224
 8000ee4:	443b      	add	r3, r7
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	f248 2224 	movw	r2, #33316	; 0x8224
 8000eee:	443a      	add	r2, r7
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000ef6:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	025b      	lsls	r3, r3, #9
 8000efe:	09da      	lsrs	r2, r3, #7
 8000f00:	f248 2324 	movw	r3, #33316	; 0x8224
 8000f04:	443b      	add	r3, r7
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f63f ae5b 	bhi.w	8000bc4 <modulate+0x34>
			}
		}
	//}
	return;
 8000f0e:	bf00      	nop
}
 8000f10:	f507 4702 	add.w	r7, r7, #33280	; 0x8200
 8000f14:	3728      	adds	r7, #40	; 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	ffff7dec 	.word	0xffff7dec
 8000f20:	20007d40 	.word	0x20007d40
 8000f24:	ffff7fec 	.word	0xffff7fec
 8000f28:	20008540 	.word	0x20008540
 8000f2c:	ffff81ec 	.word	0xffff81ec
 8000f30:	20000bb0 	.word	0x20000bb0
 8000f34:	ffff83ec 	.word	0xffff83ec
 8000f38:	20000bbc 	.word	0x20000bbc
 8000f3c:	ffffb5ec 	.word	0xffffb5ec
 8000f40:	ffff85ec 	.word	0xffff85ec
 8000f44:	200015a0 	.word	0x200015a0
 8000f48:	ffffcdec 	.word	0xffffcdec
 8000f4c:	ffff9dec 	.word	0xffff9dec
 8000f50:	200015ac 	.word	0x200015ac
 8000f54:	20008d40 	.word	0x20008d40
 8000f58:	2000ed40 	.word	0x2000ed40
 8000f5c:	ffffe5ec 	.word	0xffffe5ec

08000f60 <demodulate>:
 * input_buuf = pointer to the input buffer
 * output_buf = pointer to the output buffer
 * input_buf_size = size of the input buffer (should be multiple of the upsmp_block_size)
 * output_buf should be 12 times smaller than input_buf
 */
void demodulate(int16_t *input_buf, int16_t *output_buf, uint32_t num_buf){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	f5ad 4d02 	sub.w	sp, sp, #33280	; 0x8200
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f6e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000f72:	6018      	str	r0, [r3, #0]
 8000f74:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f78:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8000f7c:	6019      	str	r1, [r3, #0]
 8000f7e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000f82:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8000f86:	601a      	str	r2, [r3, #0]
	float32_t demod_input[upsmp_block_size] , demod_output[block_size];
	//for(int k=0;k<num_buf;k++){
		for(int j=0;j<((upsmp_buf_size*num_buf)/upsmp_block_size);j++){
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f248 2224 	movw	r2, #33316	; 0x8224
 8000f8e:	443a      	add	r2, r7
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e17d      	b.n	8001290 <demodulate+0x330>
			int offset = (j*upsmp_block_size);
 8000f94:	f248 2324 	movw	r3, #33316	; 0x8224
 8000f98:	443b      	add	r3, r7
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	025b      	lsls	r3, r3, #9
 8000fa4:	f248 2214 	movw	r2, #33300	; 0x8214
 8000fa8:	443a      	add	r2, r7
 8000faa:	6013      	str	r3, [r2, #0]
			for(int i=0;i<upsmp_block_size;i++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	f248 2220 	movw	r2, #33312	; 0x8220
 8000fb2:	443a      	add	r2, r7
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e02b      	b.n	8001010 <demodulate+0xb0>
				demod_input[i] = ((float32_t)input_buf[offset + i]);
 8000fb8:	f248 2314 	movw	r3, #33300	; 0x8214
 8000fbc:	443b      	add	r3, r7
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	f248 2320 	movw	r3, #33312	; 0x8220
 8000fc4:	443b      	add	r3, r7
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8000fd0:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 8000fd4:	6812      	ldr	r2, [r2, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fdc:	ee07 3a90 	vmov	s15, r3
 8000fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe4:	f247 2328 	movw	r3, #29224	; 0x7228
 8000fe8:	443b      	add	r3, r7
 8000fea:	f6a3 0214 	subw	r2, r3, #2068	; 0x814
 8000fee:	f248 2320 	movw	r3, #33312	; 0x8220
 8000ff2:	443b      	add	r3, r7
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	edc3 7a00 	vstr	s15, [r3]
			for(int i=0;i<upsmp_block_size;i++)
 8000ffe:	f248 2320 	movw	r3, #33312	; 0x8220
 8001002:	443b      	add	r3, r7
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	f248 2220 	movw	r2, #33312	; 0x8220
 800100c:	443a      	add	r2, r7
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	f248 2320 	movw	r3, #33312	; 0x8220
 8001014:	443b      	add	r3, r7
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800101c:	dbcc      	blt.n	8000fb8 <demodulate+0x58>
			float32_t sin_buf1[upsmp_block_size], cos_buf1[upsmp_block_size];
			float32_t sin_buf2[upsmp_block_size], cos_buf2[upsmp_block_size];
			float32_t sin_buf3[block_size], cos_buf3[block_size];
			float32_t sin_buf4[block_size], cos_buf4[block_size];
			arm_mult_f32(&demod_input[0], &sin_fc[0], &sin_buf1[0], upsmp_block_size);
 800101e:	4aaa      	ldr	r2, [pc, #680]	; (80012c8 <demodulate+0x368>)
 8001020:	f248 2328 	movw	r3, #33320	; 0x8228
 8001024:	4413      	add	r3, r2
 8001026:	19da      	adds	r2, r3, r7
 8001028:	48a8      	ldr	r0, [pc, #672]	; (80012cc <demodulate+0x36c>)
 800102a:	f248 2328 	movw	r3, #33320	; 0x8228
 800102e:	4403      	add	r3, r0
 8001030:	19d8      	adds	r0, r3, r7
 8001032:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001036:	49a6      	ldr	r1, [pc, #664]	; (80012d0 <demodulate+0x370>)
 8001038:	f004 fece 	bl	8005dd8 <arm_mult_f32>
			arm_mult_f32(&demod_input[0], &cos_fc[0], &cos_buf1[0], upsmp_block_size);
 800103c:	4aa5      	ldr	r2, [pc, #660]	; (80012d4 <demodulate+0x374>)
 800103e:	f248 2328 	movw	r3, #33320	; 0x8228
 8001042:	4413      	add	r3, r2
 8001044:	19da      	adds	r2, r3, r7
 8001046:	48a1      	ldr	r0, [pc, #644]	; (80012cc <demodulate+0x36c>)
 8001048:	f248 2328 	movw	r3, #33320	; 0x8228
 800104c:	4403      	add	r3, r0
 800104e:	19d8      	adds	r0, r3, r7
 8001050:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001054:	49a0      	ldr	r1, [pc, #640]	; (80012d8 <demodulate+0x378>)
 8001056:	f004 febf 	bl	8005dd8 <arm_mult_f32>
			arm_fir_f32(&FIR_demod_upsmp_sin, &sin_buf1[0], &sin_buf2[0], upsmp_block_size);
 800105a:	4aa0      	ldr	r2, [pc, #640]	; (80012dc <demodulate+0x37c>)
 800105c:	f248 2328 	movw	r3, #33320	; 0x8228
 8001060:	4413      	add	r3, r2
 8001062:	19da      	adds	r2, r3, r7
 8001064:	4998      	ldr	r1, [pc, #608]	; (80012c8 <demodulate+0x368>)
 8001066:	f248 2328 	movw	r3, #33320	; 0x8228
 800106a:	440b      	add	r3, r1
 800106c:	19d9      	adds	r1, r3, r7
 800106e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001072:	489b      	ldr	r0, [pc, #620]	; (80012e0 <demodulate+0x380>)
 8001074:	f005 f83c 	bl	80060f0 <arm_fir_f32>
			arm_fir_f32(&FIR_demod_upsmp_cos, &cos_buf1[0], &cos_buf2[0], upsmp_block_size);
 8001078:	4a9a      	ldr	r2, [pc, #616]	; (80012e4 <demodulate+0x384>)
 800107a:	f248 2328 	movw	r3, #33320	; 0x8228
 800107e:	4413      	add	r3, r2
 8001080:	19da      	adds	r2, r3, r7
 8001082:	4994      	ldr	r1, [pc, #592]	; (80012d4 <demodulate+0x374>)
 8001084:	f248 2328 	movw	r3, #33320	; 0x8228
 8001088:	440b      	add	r3, r1
 800108a:	19d9      	adds	r1, r3, r7
 800108c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001090:	4895      	ldr	r0, [pc, #596]	; (80012e8 <demodulate+0x388>)
 8001092:	f005 f82d 	bl	80060f0 <arm_fir_f32>
			for(int k=0;k<block_size;k++){
 8001096:	2300      	movs	r3, #0
 8001098:	f248 221c 	movw	r2, #33308	; 0x821c
 800109c:	443a      	add	r2, r7
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e03e      	b.n	8001120 <demodulate+0x1c0>
				sin_buf3[k] = sin_buf2[k*12];
 80010a2:	f248 231c 	movw	r3, #33308	; 0x821c
 80010a6:	443b      	add	r3, r7
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4613      	mov	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	f244 2228 	movw	r2, #16936	; 0x4228
 80010b6:	443a      	add	r2, r7
 80010b8:	f6a2 2214 	subw	r2, r2, #2580	; 0xa14
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80010c6:	f5a3 7105 	sub.w	r1, r3, #532	; 0x214
 80010ca:	f248 231c 	movw	r3, #33308	; 0x821c
 80010ce:	443b      	add	r3, r7
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	601a      	str	r2, [r3, #0]
				cos_buf3[k] = cos_buf2[k*12];
 80010d8:	f248 231c 	movw	r3, #33308	; 0x821c
 80010dc:	443b      	add	r3, r7
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	f245 2228 	movw	r2, #21032	; 0x5228
 80010ec:	443a      	add	r2, r7
 80010ee:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80010fc:	4619      	mov	r1, r3
 80010fe:	f248 231c 	movw	r3, #33308	; 0x821c
 8001102:	443b      	add	r3, r7
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	3b14      	subs	r3, #20
 800110c:	601a      	str	r2, [r3, #0]
			for(int k=0;k<block_size;k++){
 800110e:	f248 231c 	movw	r3, #33308	; 0x821c
 8001112:	443b      	add	r3, r7
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	f248 221c 	movw	r2, #33308	; 0x821c
 800111c:	443a      	add	r2, r7
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	f248 231c 	movw	r3, #33308	; 0x821c
 8001124:	443b      	add	r3, r7
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b7f      	cmp	r3, #127	; 0x7f
 800112a:	ddba      	ble.n	80010a2 <demodulate+0x142>
			}
			//arm_fir_decimate_f32(&FIR_demod_upsmp_sin, &sin_buf1[0], &sin_buf3[0], upsmp_block_size);
			//arm_fir_decimate_f32(&FIR_demod_upsmp_cos, &cos_buf1[0], &cos_buf3[0], upsmp_block_size);
			arm_fir_f32(&FIR_lp_demod_sin, &sin_buf3[0], &sin_buf4[0], block_size);
 800112c:	4a6f      	ldr	r2, [pc, #444]	; (80012ec <demodulate+0x38c>)
 800112e:	f248 2328 	movw	r3, #33320	; 0x8228
 8001132:	4413      	add	r3, r2
 8001134:	19da      	adds	r2, r3, r7
 8001136:	496e      	ldr	r1, [pc, #440]	; (80012f0 <demodulate+0x390>)
 8001138:	f248 2328 	movw	r3, #33320	; 0x8228
 800113c:	440b      	add	r3, r1
 800113e:	19d9      	adds	r1, r3, r7
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	486c      	ldr	r0, [pc, #432]	; (80012f4 <demodulate+0x394>)
 8001144:	f004 ffd4 	bl	80060f0 <arm_fir_f32>
			arm_fir_f32(&FIR_lp_demod_cos, &cos_buf3[0], &cos_buf4[0], block_size);
 8001148:	4a6b      	ldr	r2, [pc, #428]	; (80012f8 <demodulate+0x398>)
 800114a:	f248 2328 	movw	r3, #33320	; 0x8228
 800114e:	4413      	add	r3, r2
 8001150:	19da      	adds	r2, r3, r7
 8001152:	496a      	ldr	r1, [pc, #424]	; (80012fc <demodulate+0x39c>)
 8001154:	f248 2328 	movw	r3, #33320	; 0x8228
 8001158:	440b      	add	r3, r1
 800115a:	19d9      	adds	r1, r3, r7
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	4868      	ldr	r0, [pc, #416]	; (8001300 <demodulate+0x3a0>)
 8001160:	f004 ffc6 	bl	80060f0 <arm_fir_f32>
			offset = (j*block_size);
 8001164:	f248 2324 	movw	r3, #33316	; 0x8224
 8001168:	443b      	add	r3, r7
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	01db      	lsls	r3, r3, #7
 800116e:	f248 2214 	movw	r2, #33300	; 0x8214
 8001172:	443a      	add	r2, r7
 8001174:	6013      	str	r3, [r2, #0]
			arm_mult_f32(&sin_buf4[0], &sin_wo[0], &sin_buf4[0], block_size);
 8001176:	4a5d      	ldr	r2, [pc, #372]	; (80012ec <demodulate+0x38c>)
 8001178:	f248 2328 	movw	r3, #33320	; 0x8228
 800117c:	4413      	add	r3, r2
 800117e:	19da      	adds	r2, r3, r7
 8001180:	485a      	ldr	r0, [pc, #360]	; (80012ec <demodulate+0x38c>)
 8001182:	f248 2328 	movw	r3, #33320	; 0x8228
 8001186:	4403      	add	r3, r0
 8001188:	19d8      	adds	r0, r3, r7
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	495d      	ldr	r1, [pc, #372]	; (8001304 <demodulate+0x3a4>)
 800118e:	f004 fe23 	bl	8005dd8 <arm_mult_f32>
			arm_mult_f32(&cos_buf4[0], &cos_wo[0], &cos_buf4[0], block_size);
 8001192:	4a59      	ldr	r2, [pc, #356]	; (80012f8 <demodulate+0x398>)
 8001194:	f248 2328 	movw	r3, #33320	; 0x8228
 8001198:	4413      	add	r3, r2
 800119a:	19da      	adds	r2, r3, r7
 800119c:	4856      	ldr	r0, [pc, #344]	; (80012f8 <demodulate+0x398>)
 800119e:	f248 2328 	movw	r3, #33320	; 0x8228
 80011a2:	4403      	add	r3, r0
 80011a4:	19d8      	adds	r0, r3, r7
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	4957      	ldr	r1, [pc, #348]	; (8001308 <demodulate+0x3a8>)
 80011aa:	f004 fe15 	bl	8005dd8 <arm_mult_f32>
			arm_add_f32(&sin_buf4[0], &cos_buf4[0], &demod_output[0], block_size);
 80011ae:	4a57      	ldr	r2, [pc, #348]	; (800130c <demodulate+0x3ac>)
 80011b0:	f248 2328 	movw	r3, #33320	; 0x8228
 80011b4:	4413      	add	r3, r2
 80011b6:	19da      	adds	r2, r3, r7
 80011b8:	494f      	ldr	r1, [pc, #316]	; (80012f8 <demodulate+0x398>)
 80011ba:	f248 2328 	movw	r3, #33320	; 0x8228
 80011be:	440b      	add	r3, r1
 80011c0:	19d9      	adds	r1, r3, r7
 80011c2:	484a      	ldr	r0, [pc, #296]	; (80012ec <demodulate+0x38c>)
 80011c4:	f248 2328 	movw	r3, #33320	; 0x8228
 80011c8:	4403      	add	r3, r0
 80011ca:	19d8      	adds	r0, r3, r7
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	f004 fd87 	bl	8005ce0 <arm_add_f32>
			for(int i=0;i<block_size;i++){
 80011d2:	2300      	movs	r3, #0
 80011d4:	f248 2218 	movw	r2, #33304	; 0x8218
 80011d8:	443a      	add	r2, r7
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	e049      	b.n	8001272 <demodulate+0x312>
				demod_output[i]*=5;
 80011de:	f247 2328 	movw	r3, #29224	; 0x7228
 80011e2:	443b      	add	r3, r7
 80011e4:	f6a3 2214 	subw	r2, r3, #2580	; 0xa14
 80011e8:	f248 2318 	movw	r3, #33304	; 0x8218
 80011ec:	443b      	add	r3, r7
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80011fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001200:	f247 2328 	movw	r3, #29224	; 0x7228
 8001204:	443b      	add	r3, r7
 8001206:	f6a3 2214 	subw	r2, r3, #2580	; 0xa14
 800120a:	f248 2318 	movw	r3, #33304	; 0x8218
 800120e:	443b      	add	r3, r7
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	edc3 7a00 	vstr	s15, [r3]
				output_buf[offset+i] = (int16_t)demod_output[i];
 800121a:	f247 2328 	movw	r3, #29224	; 0x7228
 800121e:	443b      	add	r3, r7
 8001220:	f6a3 2214 	subw	r2, r3, #2580	; 0xa14
 8001224:	f248 2318 	movw	r3, #33304	; 0x8218
 8001228:	443b      	add	r3, r7
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	edd3 7a00 	vldr	s15, [r3]
 8001234:	f248 2314 	movw	r3, #33300	; 0x8214
 8001238:	443b      	add	r3, r7
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	f248 2318 	movw	r3, #33304	; 0x8218
 8001240:	443b      	add	r3, r7
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4413      	add	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800124c:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
 8001250:	6812      	ldr	r2, [r2, #0]
 8001252:	4413      	add	r3, r2
 8001254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001258:	ee17 2a90 	vmov	r2, s15
 800125c:	b212      	sxth	r2, r2
 800125e:	801a      	strh	r2, [r3, #0]
			for(int i=0;i<block_size;i++){
 8001260:	f248 2318 	movw	r3, #33304	; 0x8218
 8001264:	443b      	add	r3, r7
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	f248 2218 	movw	r2, #33304	; 0x8218
 800126e:	443a      	add	r2, r7
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	f248 2318 	movw	r3, #33304	; 0x8218
 8001276:	443b      	add	r3, r7
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b7f      	cmp	r3, #127	; 0x7f
 800127c:	ddaf      	ble.n	80011de <demodulate+0x27e>
		for(int j=0;j<((upsmp_buf_size*num_buf)/upsmp_block_size);j++){
 800127e:	f248 2324 	movw	r3, #33316	; 0x8224
 8001282:	443b      	add	r3, r7
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	3301      	adds	r3, #1
 8001288:	f248 2224 	movw	r2, #33316	; 0x8224
 800128c:	443a      	add	r2, r7
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001294:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	02db      	lsls	r3, r3, #11
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <demodulate+0x3b0>)
 80012a6:	fba3 2302 	umull	r2, r3, r3, r2
 80012aa:	0a9a      	lsrs	r2, r3, #10
 80012ac:	f248 2324 	movw	r3, #33316	; 0x8224
 80012b0:	443b      	add	r3, r7
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f63f ae6d 	bhi.w	8000f94 <demodulate+0x34>
			}
		}
	//}
	return;
 80012ba:	bf00      	nop
}
 80012bc:	f507 4702 	add.w	r7, r7, #33280	; 0x8200
 80012c0:	3728      	adds	r7, #40	; 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	ffff85ec 	.word	0xffff85ec
 80012cc:	ffffe7ec 	.word	0xffffe7ec
 80012d0:	20008d40 	.word	0x20008d40
 80012d4:	ffff9dec 	.word	0xffff9dec
 80012d8:	2000ed40 	.word	0x2000ed40
 80012dc:	ffffb5ec 	.word	0xffffb5ec
 80012e0:	200015b8 	.word	0x200015b8
 80012e4:	ffffcdec 	.word	0xffffcdec
 80012e8:	200015c4 	.word	0x200015c4
 80012ec:	ffff81ec 	.word	0xffff81ec
 80012f0:	ffff7dec 	.word	0xffff7dec
 80012f4:	20000bc8 	.word	0x20000bc8
 80012f8:	ffff83ec 	.word	0xffff83ec
 80012fc:	ffff7fec 	.word	0xffff7fec
 8001300:	20000bd4 	.word	0x20000bd4
 8001304:	20007d40 	.word	0x20007d40
 8001308:	20008540 	.word	0x20008540
 800130c:	ffffe5ec 	.word	0xffffe5ec
 8001310:	aaaaaaab 	.word	0xaaaaaaab

08001314 <drawOK>:
	}
	else
		return 0;
}

void drawOK(){
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001318:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800131c:	f003 fa24 	bl	8004768 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(400,200,60,30);
 8001320:	231e      	movs	r3, #30
 8001322:	223c      	movs	r2, #60	; 0x3c
 8001324:	21c8      	movs	r1, #200	; 0xc8
 8001326:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800132a:	f003 fc8b 	bl	8004c44 <BSP_LCD_DrawRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800132e:	4806      	ldr	r0, [pc, #24]	; (8001348 <drawOK+0x34>)
 8001330:	f003 fa1a 	bl	8004768 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(410,205, (uint8_t *)"OK", LEFT_MODE);
 8001334:	2303      	movs	r3, #3
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <drawOK+0x38>)
 8001338:	21cd      	movs	r1, #205	; 0xcd
 800133a:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800133e:	f003 fae1 	bl	8004904 <BSP_LCD_DisplayStringAt>
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	ff0000ff 	.word	0xff0000ff
 800134c:	0800c9d4 	.word	0x0800c9d4

08001350 <isOKTouched>:

uint8_t isOKTouched(){
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	//drawOK();
	BSP_TS_GetState(&TS_State);
 8001354:	4813      	ldr	r0, [pc, #76]	; (80013a4 <isOKTouched+0x54>)
 8001356:	f004 fa87 	bl	8005868 <BSP_TS_GetState>
	if(TS_State.touchDetected && TS_State.touchX[0] > 400 && TS_State.touchX[0] < 460 && TS_State.touchY[0] > 200 && TS_State.touchY[0] < 230)
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <isOKTouched+0x54>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d01d      	beq.n	800139e <isOKTouched+0x4e>
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <isOKTouched+0x54>)
 8001364:	885b      	ldrh	r3, [r3, #2]
 8001366:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800136a:	d918      	bls.n	800139e <isOKTouched+0x4e>
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <isOKTouched+0x54>)
 800136e:	885b      	ldrh	r3, [r3, #2]
 8001370:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8001374:	d213      	bcs.n	800139e <isOKTouched+0x4e>
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <isOKTouched+0x54>)
 8001378:	899b      	ldrh	r3, [r3, #12]
 800137a:	2bc8      	cmp	r3, #200	; 0xc8
 800137c:	d90f      	bls.n	800139e <isOKTouched+0x4e>
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <isOKTouched+0x54>)
 8001380:	899b      	ldrh	r3, [r3, #12]
 8001382:	2be5      	cmp	r3, #229	; 0xe5
 8001384:	d80b      	bhi.n	800139e <isOKTouched+0x4e>
	{
		do{
			HAL_Delay(10);
 8001386:	200a      	movs	r0, #10
 8001388:	f005 fc6a 	bl	8006c60 <HAL_Delay>
			BSP_TS_GetState(&TS_State);
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <isOKTouched+0x54>)
 800138e:	f004 fa6b 	bl	8005868 <BSP_TS_GetState>
		}while(TS_State.touchDetected);
 8001392:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <isOKTouched+0x54>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f5      	bne.n	8001386 <isOKTouched+0x36>
		return 1;
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <isOKTouched+0x50>
	}
	else
		return 0;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200002f8 	.word	0x200002f8

080013a8 <UART1_Init>:

/*-------------- UART ------------------- */
// Use uart1 for transmission using usb cable
// use uart6 for transmission using digital pins CN4.D0(Rx) and CN4.D1(Tx)
void UART1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	// Configure UART
	UartHandle.Instance = USART1;
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <UART1_Init+0x54>)
 80013ae:	4a14      	ldr	r2, [pc, #80]	; (8001400 <UART1_Init+0x58>)
 80013b0:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate = 115200;
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <UART1_Init+0x54>)
 80013b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b8:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <UART1_Init+0x54>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <UART1_Init+0x54>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <UART1_Init+0x54>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
	UartHandle.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <UART1_Init+0x54>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
	UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <UART1_Init+0x54>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <UART1_Init+0x54>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
	UartHandle.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <UART1_Init+0x54>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
	UartHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <UART1_Init+0x54>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80013ea:	4804      	ldr	r0, [pc, #16]	; (80013fc <UART1_Init+0x54>)
 80013ec:	f00a f912 	bl	800b614 <HAL_UART_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d000      	beq.n	80013f8 <UART1_Init+0x50>
	{
		while(1){
 80013f6:	e7fe      	b.n	80013f6 <UART1_Init+0x4e>

		// Delay before sending the next message
		HAL_Delay(1000);
	}
	*/
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000324 	.word	0x20000324
 8001400:	40011000 	.word	0x40011000

08001404 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/* Callback implementations (use as required) */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 800140a:	2202      	movs	r2, #2
 800140c:	601a      	str	r2, [r3, #0]
  return;
 800140e:	bf00      	nop
}
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	200002f0 	.word	0x200002f0

0800141c <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]
  return;
 8001426:	bf00      	nop
}
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	200002f0 	.word	0x200002f0

08001434 <BSP_AUDIO_IN_Error_CallBack>:
void BSP_AUDIO_IN_Error_CallBack(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 8001438:	4809      	ldr	r0, [pc, #36]	; (8001460 <BSP_AUDIO_IN_Error_CallBack+0x2c>)
 800143a:	f003 f9ad 	bl	8004798 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"       DMA  ERROR     ", CENTER_MODE);
 800143e:	f003 f9df 	bl	8004800 <BSP_LCD_GetFont>
 8001442:	4603      	mov	r3, r0
 8001444:	88db      	ldrh	r3, [r3, #6]
 8001446:	461a      	mov	r2, r3
 8001448:	00d2      	lsls	r2, r2, #3
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	b299      	uxth	r1, r3
 8001450:	2301      	movs	r3, #1
 8001452:	4a04      	ldr	r2, [pc, #16]	; (8001464 <BSP_AUDIO_IN_Error_CallBack+0x30>)
 8001454:	2000      	movs	r0, #0
 8001456:	f003 fa55 	bl	8004904 <BSP_LCD_DisplayStringAt>
  return;
 800145a:	bf00      	nop
}
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	ffff0000 	.word	0xffff0000
 8001464:	0800c9d8 	.word	0x0800c9d8

08001468 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  //if(audio_state == AUDIO_STATE_PLAYING)
  {
	  audio_play_buffer_state = BUFFER_OFFSET_FULL;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
 800146e:	2202      	movs	r2, #2
 8001470:	601a      	str	r2, [r3, #0]
  }
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	200002f4 	.word	0x200002f4

08001480 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  //if(audio_state == AUDIO_STATE_PLAYING)
  {
	  audio_play_buffer_state = BUFFER_OFFSET_HALF;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>)
 8001486:	2201      	movs	r2, #1
 8001488:	601a      	str	r2, [r3, #0]
  }
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	200002f4 	.word	0x200002f4

08001498 <BSP_AUDIO_OUT_Error_CallBack>:
void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800149c:	4807      	ldr	r0, [pc, #28]	; (80014bc <BSP_AUDIO_OUT_Error_CallBack+0x24>)
 800149e:	f003 f97b 	bl	8004798 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"       DMA  ERROR     ");
 80014a2:	4907      	ldr	r1, [pc, #28]	; (80014c0 <BSP_AUDIO_OUT_Error_CallBack+0x28>)
 80014a4:	200e      	movs	r0, #14
 80014a6:	f003 faf5 	bl	8004a94 <BSP_LCD_DisplayStringAtLine>
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 80014aa:	bf00      	nop
 80014ac:	2002      	movs	r0, #2
 80014ae:	f002 f8ff 	bl	80036b0 <BSP_PB_GetState>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
  {
    return;
 80014b6:	bf00      	nop
  }
}
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	ffff0000 	.word	0xffff0000
 80014c0:	0800c9d8 	.word	0x0800c9d8

080014c4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Set transmission flag: transfer complete */
  UartReady = 1;
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <HAL_UART_TxCpltCallback+0x1c>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	200003ac 	.word	0x200003ac

080014e4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014e8:	f3bf 8f4f 	dsb	sy
}
 80014ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014ee:	f3bf 8f6f 	isb	sy
}
 80014f2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80014f4:	4b0d      	ldr	r3, [pc, #52]	; (800152c <SCB_EnableICache+0x48>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014fc:	f3bf 8f4f 	dsb	sy
}
 8001500:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001502:	f3bf 8f6f 	isb	sy
}
 8001506:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <SCB_EnableICache+0x48>)
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	4a07      	ldr	r2, [pc, #28]	; (800152c <SCB_EnableICache+0x48>)
 800150e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001512:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001514:	f3bf 8f4f 	dsb	sy
}
 8001518:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800151a:	f3bf 8f6f 	isb	sy
}
 800151e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <SCB_EnableDCache+0x84>)
 8001538:	2200      	movs	r2, #0
 800153a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800153e:	f3bf 8f4f 	dsb	sy
}
 8001542:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <SCB_EnableDCache+0x84>)
 8001546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800154a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	0b5b      	lsrs	r3, r3, #13
 8001550:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001554:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	08db      	lsrs	r3, r3, #3
 800155a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800155e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	015a      	lsls	r2, r3, #5
 8001564:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001568:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800156e:	4911      	ldr	r1, [pc, #68]	; (80015b4 <SCB_EnableDCache+0x84>)
 8001570:	4313      	orrs	r3, r2
 8001572:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1e5a      	subs	r2, r3, #1
 800157a:	60ba      	str	r2, [r7, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1ef      	bne.n	8001560 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	1e5a      	subs	r2, r3, #1
 8001584:	60fa      	str	r2, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1e5      	bne.n	8001556 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800158a:	f3bf 8f4f 	dsb	sy
}
 800158e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <SCB_EnableDCache+0x84>)
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <SCB_EnableDCache+0x84>)
 8001596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800159c:	f3bf 8f4f 	dsb	sy
}
 80015a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015a2:	f3bf 8f6f 	isb	sy
}
 80015a6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <main>:
  * @retval None
  */


int main(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes */
  MPU_Config();
 80015bc:	f000 f860 	bl	8001680 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 80015c0:	f000 f856 	bl	8001670 <CPU_CACHE_Enable>
       - Configure the Flash ART accelerator on ITCM interface
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 80015c4:	f005 fae6 	bl	8006b94 <HAL_Init>
  /* Configure the System clock to have a frequency of 200 MHz */
  SystemClock_Config();
 80015c8:	f000 f80f 	bl	80015ea <SystemClock_Config>

  /* Add your application code here
     */
  BSP_LED_Init(LED1);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f002 f80d 	bl	80035ec <BSP_LED_Init>
  BSP_LED_On(LED1);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f002 f83e 	bl	8003654 <BSP_LED_On>
  LCDInit();
 80015d8:	f7fe ff98 	bl	800050c <LCDInit>
  TSInit();
 80015dc:	f7fe ffd4 	bl	8000588 <TSInit>
  UART1_Init();
 80015e0:	f7ff fee2 	bl	80013a8 <UART1_Init>
  while(1){
	  TheApp();
 80015e4:	f7ff f830 	bl	8000648 <TheApp>
 80015e8:	e7fc      	b.n	80015e4 <main+0x2c>

080015ea <SystemClock_Config>:
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b092      	sub	sp, #72	; 0x48
 80015ee:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f0:	2301      	movs	r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015f8:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015fe:	2302      	movs	r3, #2
 8001600:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001608:	2319      	movs	r3, #25
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 400;
 800160c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001612:	2302      	movs	r3, #2
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001616:	2309      	movs	r3, #9
 8001618:	633b      	str	r3, [r7, #48]	; 0x30
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	4618      	mov	r0, r3
 800161e:	f007 fff1 	bl	8009604 <HAL_RCC_OscConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0x42>
  {
    Error_Handler();
 8001628:	f000 f8a1 	bl	800176e <Error_Handler>
  }
  /* activate the OverDrive to reach the 200 Mhz Frequency */
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 800162c:	f007 ff9a 	bl	8009564 <HAL_PWREx_EnableOverDrive>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001636:	f000 f89a 	bl	800176e <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800163a:	230f      	movs	r3, #15
 800163c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163e:	2302      	movs	r3, #2
 8001640:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8001646:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800164a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 800164c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001650:	647b      	str	r3, [r7, #68]	; 0x44
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001652:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001656:	2105      	movs	r1, #5
 8001658:	4618      	mov	r0, r3
 800165a:	f008 fa77 	bl	8009b4c <HAL_RCC_ClockConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001664:	f000 f883 	bl	800176e <Error_Handler>
  }
}
 8001668:	bf00      	nop
 800166a:	3748      	adds	r7, #72	; 0x48
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* Enable I-Cache */
  SCB_EnableICache();
 8001674:	f7ff ff36 	bl	80014e4 <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 8001678:	f7ff ff5a 	bl	8001530 <SCB_EnableDCache>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
	  MPU_Region_InitTypeDef MPU_InitStruct;

	  /* Disable the MPU */
	  HAL_MPU_Disable();
 8001686:	f005 fc53 	bl	8006f30 <HAL_MPU_Disable>

	  /* Configure the MPU as Strongly ordered for not defined regions */
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800168a:	2301      	movs	r3, #1
 800168c:	703b      	strb	r3, [r7, #0]
	  MPU_InitStruct.BaseAddress = 0x00;
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001692:	231f      	movs	r3, #31
 8001694:	723b      	strb	r3, [r7, #8]
	  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001696:	2300      	movs	r3, #0
 8001698:	72fb      	strb	r3, [r7, #11]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	73fb      	strb	r3, [r7, #15]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016a2:	2301      	movs	r3, #1
 80016a4:	737b      	strb	r3, [r7, #13]
	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	707b      	strb	r3, [r7, #1]
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.SubRegionDisable = 0x87;
 80016ae:	2387      	movs	r3, #135	; 0x87
 80016b0:	727b      	strb	r3, [r7, #9]
	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80016b2:	2301      	movs	r3, #1
 80016b4:	733b      	strb	r3, [r7, #12]

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016b6:	463b      	mov	r3, r7
 80016b8:	4618      	mov	r0, r3
 80016ba:	f005 fc71 	bl	8006fa0 <HAL_MPU_ConfigRegion>

	  /* Configure the MPU attributes as WT for SDRAM */
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80016be:	2301      	movs	r3, #1
 80016c0:	703b      	strb	r3, [r7, #0]
	  MPU_InitStruct.BaseAddress = 0xC0000000;
 80016c2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80016c6:	607b      	str	r3, [r7, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80016c8:	2318      	movs	r3, #24
 80016ca:	723b      	strb	r3, [r7, #8]
	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80016cc:	2303      	movs	r3, #3
 80016ce:	72fb      	strb	r3, [r7, #11]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	73fb      	strb	r3, [r7, #15]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	737b      	strb	r3, [r7, #13]
	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80016dc:	2301      	movs	r3, #1
 80016de:	707b      	strb	r3, [r7, #1]
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.SubRegionDisable = 0x00;
 80016e4:	2300      	movs	r3, #0
 80016e6:	727b      	strb	r3, [r7, #9]
	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	733b      	strb	r3, [r7, #12]

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016ec:	463b      	mov	r3, r7
 80016ee:	4618      	mov	r0, r3
 80016f0:	f005 fc56 	bl	8006fa0 <HAL_MPU_ConfigRegion>

	  /* Configure the MPU QSPI flash */
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80016f4:	2301      	movs	r3, #1
 80016f6:	703b      	strb	r3, [r7, #0]
	  MPU_InitStruct.BaseAddress = 0x90000000;
 80016f8:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 80016fc:	607b      	str	r3, [r7, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80016fe:	2319      	movs	r3, #25
 8001700:	723b      	strb	r3, [r7, #8]
	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001702:	2303      	movs	r3, #3
 8001704:	72fb      	strb	r3, [r7, #11]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800170a:	2301      	movs	r3, #1
 800170c:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	737b      	strb	r3, [r7, #13]
	  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001712:	2302      	movs	r3, #2
 8001714:	707b      	strb	r3, [r7, #1]
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001716:	2300      	movs	r3, #0
 8001718:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.SubRegionDisable = 0x0;
 800171a:	2300      	movs	r3, #0
 800171c:	727b      	strb	r3, [r7, #9]
	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	733b      	strb	r3, [r7, #12]

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001722:	463b      	mov	r3, r7
 8001724:	4618      	mov	r0, r3
 8001726:	f005 fc3b 	bl	8006fa0 <HAL_MPU_ConfigRegion>

	  /* Configure the MPU attributes FMC control registers */
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800172a:	2301      	movs	r3, #1
 800172c:	703b      	strb	r3, [r7, #0]
	  MPU_InitStruct.BaseAddress = 0xA0000000;
 800172e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001732:	607b      	str	r3, [r7, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8001734:	230c      	movs	r3, #12
 8001736:	723b      	strb	r3, [r7, #8]
	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001738:	2303      	movs	r3, #3
 800173a:	72fb      	strb	r3, [r7, #11]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800173c:	2301      	movs	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001744:	2301      	movs	r3, #1
 8001746:	737b      	strb	r3, [r7, #13]
	  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8001748:	2303      	movs	r3, #3
 800174a:	707b      	strb	r3, [r7, #1]
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800174c:	2300      	movs	r3, #0
 800174e:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.SubRegionDisable = 0x0;
 8001750:	2300      	movs	r3, #0
 8001752:	727b      	strb	r3, [r7, #9]
	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001754:	2301      	movs	r3, #1
 8001756:	733b      	strb	r3, [r7, #12]

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001758:	463b      	mov	r3, r7
 800175a:	4618      	mov	r0, r3
 800175c:	f005 fc20 	bl	8006fa0 <HAL_MPU_ConfigRegion>

	  /* Enable the MPU */
	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001760:	2004      	movs	r0, #4
 8001762:	f005 fbfd 	bl	8006f60 <HAL_MPU_Enable>
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	af00      	add	r7, sp, #0
	/* Turn LED1 on */
	BSP_LED_On(LED1);
 8001772:	2000      	movs	r0, #0
 8001774:	f001 ff6e 	bl	8003654 <BSP_LED_On>
	while(1)
	{
	/* Error if LED1 is slowly blinking (1 sec. period) */
	BSP_LED_Toggle(LED1);
 8001778:	2000      	movs	r0, #0
 800177a:	f001 ff83 	bl	8003684 <BSP_LED_Toggle>
	HAL_Delay(1000);
 800177e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001782:	f005 fa6d 	bl	8006c60 <HAL_Delay>
	BSP_LED_Toggle(LED1);
 8001786:	e7f7      	b.n	8001778 <Error_Handler+0xa>

08001788 <HAL_MspInit>:
  * @brief  Initializes the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b0aa      	sub	sp, #168	; 0xa8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	2284      	movs	r2, #132	; 0x84
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f00b f82f 	bl	800c81c <memset>
  if(huart->Instance==USART1)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a25      	ldr	r2, [pc, #148]	; (8001858 <HAL_UART_MspInit+0xc0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d142      	bne.n	800184e <HAL_UART_MspInit+0xb6>
  {
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017c8:	2340      	movs	r3, #64	; 0x40
 80017ca:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017cc:	2300      	movs	r3, #0
 80017ce:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	4618      	mov	r0, r3
 80017d6:	f008 fb9f 	bl	8009f18 <HAL_RCCEx_PeriphCLKConfig>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d000      	beq.n	80017e2 <HAL_UART_MspInit+0x4a>
    {
      while(1){
 80017e0:	e7fe      	b.n	80017e0 <HAL_UART_MspInit+0x48>
      }
    }
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e2:	4b1e      	ldr	r3, [pc, #120]	; (800185c <HAL_UART_MspInit+0xc4>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	4a1d      	ldr	r2, [pc, #116]	; (800185c <HAL_UART_MspInit+0xc4>)
 80017e8:	f043 0310 	orr.w	r3, r3, #16
 80017ec:	6453      	str	r3, [r2, #68]	; 0x44
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_UART_MspInit+0xc4>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_UART_MspInit+0xc4>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_UART_MspInit+0xc4>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_UART_MspInit+0xc4>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_7;
 8001812:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001816:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001820:	2301      	movs	r3, #1
 8001822:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800182c:	2307      	movs	r3, #7
 800182e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001836:	4619      	mov	r1, r3
 8001838:	4809      	ldr	r0, [pc, #36]	; (8001860 <HAL_UART_MspInit+0xc8>)
 800183a:	f006 fb01 	bl	8007e40 <HAL_GPIO_Init>
    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 1);
 800183e:	2201      	movs	r2, #1
 8001840:	2100      	movs	r1, #0
 8001842:	2025      	movs	r0, #37	; 0x25
 8001844:	f005 fb2f 	bl	8006ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001848:	2025      	movs	r0, #37	; 0x25
 800184a:	f005 fb48 	bl	8006ede <HAL_NVIC_EnableIRQ>
  }
}
 800184e:	bf00      	nop
 8001850:	37a8      	adds	r7, #168	; 0xa8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40011000 	.word	0x40011000
 800185c:	40023800 	.word	0x40023800
 8001860:	40020000 	.word	0x40020000

08001864 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	  HAL_IncTick();
 80018b8:	f005 f9b2 	bl	8006c20 <HAL_IncTick>
	  HAL_SYSTICK_IRQHandler();
 80018bc:	f005 fbb4 	bl	8007028 <HAL_SYSTICK_IRQHandler>
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <USART1_IRQHandler>:
* @retval None
* @Note   This function is redefined in "main.h" and related to DMA
*         used for USART data transmission
*/
void USART1_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&UartHandle);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <USART1_IRQHandler+0x10>)
 80018ca:	f009 fef1 	bl	800b6b0 <HAL_UART_IRQHandler>
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000324 	.word	0x20000324

080018d8 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 1 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(WAKEUP_BUTTON_PIN);
 80018dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80018e0:	f006 fdb2 	bl	8008448 <HAL_GPIO_EXTI_IRQHandler>
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <EXTI2_IRQHandler>:
  * @brief  This function handles External line 2 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80018ec:	2004      	movs	r0, #4
 80018ee:	f006 fdab 	bl	8008448 <HAL_GPIO_EXTI_IRQHandler>
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <EXTI15_10_IRQHandler>:
  * @brief  This function handles External line 15_10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Interrupt handler shared between SD_DETECT pin, USER_KEY button and touch screen interrupt */
  if (__HAL_GPIO_EXTI_GET_IT(SD_DETECT_PIN) != RESET)
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <EXTI15_10_IRQHandler+0x28>)
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d004      	beq.n	8001912 <EXTI15_10_IRQHandler+0x1a>
  {
    HAL_GPIO_EXTI_IRQHandler(SD_DETECT_PIN | TS_INT_PIN | AUDIO_IN_INT_GPIO_PIN);   /* SD detect event or touch screen interrupt */
 8001908:	f44f 4020 	mov.w	r0, #40960	; 0xa000
 800190c:	f006 fd9c 	bl	8008448 <HAL_GPIO_EXTI_IRQHandler>
  }
  else
  {     /* User button event or Touch screen interrupt */
    HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
  }
}
 8001910:	e003      	b.n	800191a <EXTI15_10_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8001912:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001916:	f006 fd97 	bl	8008448 <HAL_GPIO_EXTI_IRQHandler>
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40013c00 	.word	0x40013c00

08001924 <DMA2_Stream7_IRQHandler>:
  * @brief This function handles DMA2 Stream 7 interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <DMA2_Stream7_IRQHandler+0x14>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192c:	4618      	mov	r0, r3
 800192e:	f005 fd87 	bl	8007440 <HAL_DMA_IRQHandler>
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20014e2c 	.word	0x20014e2c

0800193c <DMA2_Stream0_IRQHandler>:
/**
  * @brief  Handles SDRAM DMA transfer interrupt request.
  * @retval None
  */
void BSP_SDRAM_DMA_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(sdramHandle.hdma); 
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <DMA2_Stream0_IRQHandler+0x14>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	4618      	mov	r0, r3
 8001946:	f005 fd7b 	bl	8007440 <HAL_DMA_IRQHandler>
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200150f8 	.word	0x200150f8

08001954 <DMA2_Stream1_IRQHandler>:
  * @brief  DMA interrupt handler.
  * @param  None
  * @retval None
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  BSP_CAMERA_DMA_IRQHandler();
 8001958:	f7ff fffc 	bl	8001954 <DMA2_Stream1_IRQHandler>
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}

08001960 <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles DMA2 Stream 6 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <DMA2_Stream4_IRQHandler+0x14>)
 8001966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001968:	4618      	mov	r0, r3
 800196a:	f005 fd69 	bl	8007440 <HAL_DMA_IRQHandler>
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20014da8 	.word	0x20014da8

08001978 <DCMI_IRQHandler>:
  * @brief  DCMI interrupt handler.
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  BSP_CAMERA_IRQHandler();
 800197c:	f7ff fffc 	bl	8001978 <DCMI_IRQHandler>
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001988:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <SystemInit+0x5c>)
 800198a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198e:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <SystemInit+0x5c>)
 8001990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <SystemInit+0x60>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a11      	ldr	r2, [pc, #68]	; (80019e4 <SystemInit+0x60>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <SystemInit+0x60>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <SystemInit+0x60>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	490d      	ldr	r1, [pc, #52]	; (80019e4 <SystemInit+0x60>)
 80019b0:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <SystemInit+0x64>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <SystemInit+0x60>)
 80019b8:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <SystemInit+0x68>)
 80019ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <SystemInit+0x60>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <SystemInit+0x60>)
 80019c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <SystemInit+0x60>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <SystemInit+0x5c>)
 80019d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019d4:	609a      	str	r2, [r3, #8]
#endif
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00
 80019e4:	40023800 	.word	0x40023800
 80019e8:	fef6ffff 	.word	0xfef6ffff
 80019ec:	24003010 	.word	0x24003010

080019f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019f4:	480d      	ldr	r0, [pc, #52]	; (8001a2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019f6:	490e      	ldr	r1, [pc, #56]	; (8001a30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019f8:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019fc:	e002      	b.n	8001a04 <LoopCopyDataInit>

080019fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a02:	3304      	adds	r3, #4

08001a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a08:	d3f9      	bcc.n	80019fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0a:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a0c:	4c0b      	ldr	r4, [pc, #44]	; (8001a3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a10:	e001      	b.n	8001a16 <LoopFillZerobss>

08001a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a14:	3204      	adds	r2, #4

08001a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a18:	d3fb      	bcc.n	8001a12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a1a:	f7ff ffb3 	bl	8001984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a1e:	f00a fed9 	bl	800c7d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a22:	f7ff fdc9 	bl	80015b8 <main>
  bx  lr    
 8001a26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a28:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a30:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8001a34:	0800ece4 	.word	0x0800ece4
  ldr r2, =_sbss
 8001a38:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8001a3c:	200151f0 	.word	0x200151f0

08001a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a40:	e7fe      	b.n	8001a40 <ADC_IRQHandler>

08001a42 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8001a4c:	20c8      	movs	r0, #200	; 0xc8
 8001a4e:	f002 f855 	bl	8003afc <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001a52:	f000 fa7b 	bl	8001f4c <ft5336_I2C_InitializeIfRequired>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8001a86:	2300      	movs	r3, #0
 8001a88:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001a8a:	f000 fa5f 	bl	8001f4c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	73fb      	strb	r3, [r7, #15]
 8001a92:	e010      	b.n	8001ab6 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	21a8      	movs	r1, #168	; 0xa8
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 f810 	bl	8003ac0 <TS_IO_Read>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8001aa4:	7b7b      	ldrb	r3, [r7, #13]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b51      	cmp	r3, #81	; 0x51
 8001aaa:	d101      	bne.n	8001ab0 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	73fb      	strb	r3, [r7, #15]
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d802      	bhi.n	8001ac2 <ft5336_ReadID+0x4e>
 8001abc:	7bbb      	ldrb	r3, [r7, #14]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0e8      	beq.n	8001a94 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8001ac2:	7b7b      	ldrb	r3, [r7, #13]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	b29b      	uxth	r3, r3
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 fa45 	bl	8001f6c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 f933 	bl	8001d50 <ft5336_TS_DisableIT>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2102      	movs	r1, #2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f001 ffd9 	bl	8003ac0 <TS_IO_Read>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b05      	cmp	r3, #5
 8001b24:	d901      	bls.n	8001b2a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <ft5336_TS_DetectTouch+0x50>)
 8001b30:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8001b32:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <ft5336_TS_DetectTouch+0x50>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	b2db      	uxtb	r3, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20014d40 	.word	0x20014d40

08001b48 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8001b6a:	4b6d      	ldr	r3, [pc, #436]	; (8001d20 <ft5336_TS_GetXY+0x1d8>)
 8001b6c:	789a      	ldrb	r2, [r3, #2]
 8001b6e:	4b6c      	ldr	r3, [pc, #432]	; (8001d20 <ft5336_TS_GetXY+0x1d8>)
 8001b70:	785b      	ldrb	r3, [r3, #1]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	f080 80cf 	bcs.w	8001d16 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8001b78:	4b69      	ldr	r3, [pc, #420]	; (8001d20 <ft5336_TS_GetXY+0x1d8>)
 8001b7a:	789b      	ldrb	r3, [r3, #2]
 8001b7c:	2b09      	cmp	r3, #9
 8001b7e:	d871      	bhi.n	8001c64 <ft5336_TS_GetXY+0x11c>
 8001b80:	a201      	add	r2, pc, #4	; (adr r2, 8001b88 <ft5336_TS_GetXY+0x40>)
 8001b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b86:	bf00      	nop
 8001b88:	08001bb1 	.word	0x08001bb1
 8001b8c:	08001bc3 	.word	0x08001bc3
 8001b90:	08001bd5 	.word	0x08001bd5
 8001b94:	08001be7 	.word	0x08001be7
 8001b98:	08001bf9 	.word	0x08001bf9
 8001b9c:	08001c0b 	.word	0x08001c0b
 8001ba0:	08001c1d 	.word	0x08001c1d
 8001ba4:	08001c2f 	.word	0x08001c2f
 8001ba8:	08001c41 	.word	0x08001c41
 8001bac:	08001c53 	.word	0x08001c53
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8001bb8:	2306      	movs	r3, #6
 8001bba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8001bbc:	2305      	movs	r3, #5
 8001bbe:	753b      	strb	r3, [r7, #20]
      break;
 8001bc0:	e051      	b.n	8001c66 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8001bc2:	230a      	movs	r3, #10
 8001bc4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8001bc6:	2309      	movs	r3, #9
 8001bc8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8001bca:	230c      	movs	r3, #12
 8001bcc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8001bce:	230b      	movs	r3, #11
 8001bd0:	753b      	strb	r3, [r7, #20]
      break;
 8001bd2:	e048      	b.n	8001c66 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8001bd4:	2310      	movs	r3, #16
 8001bd6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001bd8:	230f      	movs	r3, #15
 8001bda:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8001bdc:	2312      	movs	r3, #18
 8001bde:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8001be0:	2311      	movs	r3, #17
 8001be2:	753b      	strb	r3, [r7, #20]
      break;
 8001be4:	e03f      	b.n	8001c66 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8001be6:	2316      	movs	r3, #22
 8001be8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8001bea:	2315      	movs	r3, #21
 8001bec:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8001bee:	2318      	movs	r3, #24
 8001bf0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8001bf2:	2317      	movs	r3, #23
 8001bf4:	753b      	strb	r3, [r7, #20]
      break;
 8001bf6:	e036      	b.n	8001c66 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8001bf8:	231c      	movs	r3, #28
 8001bfa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8001bfc:	231b      	movs	r3, #27
 8001bfe:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8001c00:	231e      	movs	r3, #30
 8001c02:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8001c04:	231d      	movs	r3, #29
 8001c06:	753b      	strb	r3, [r7, #20]
      break;
 8001c08:	e02d      	b.n	8001c66 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8001c0a:	2322      	movs	r3, #34	; 0x22
 8001c0c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8001c0e:	2321      	movs	r3, #33	; 0x21
 8001c10:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8001c12:	2324      	movs	r3, #36	; 0x24
 8001c14:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8001c16:	2323      	movs	r3, #35	; 0x23
 8001c18:	753b      	strb	r3, [r7, #20]
      break;
 8001c1a:	e024      	b.n	8001c66 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8001c1c:	2328      	movs	r3, #40	; 0x28
 8001c1e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8001c20:	2327      	movs	r3, #39	; 0x27
 8001c22:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8001c24:	232a      	movs	r3, #42	; 0x2a
 8001c26:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8001c28:	2329      	movs	r3, #41	; 0x29
 8001c2a:	753b      	strb	r3, [r7, #20]
      break;
 8001c2c:	e01b      	b.n	8001c66 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8001c2e:	232e      	movs	r3, #46	; 0x2e
 8001c30:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8001c32:	232d      	movs	r3, #45	; 0x2d
 8001c34:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8001c36:	2330      	movs	r3, #48	; 0x30
 8001c38:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8001c3a:	232f      	movs	r3, #47	; 0x2f
 8001c3c:	753b      	strb	r3, [r7, #20]
      break;
 8001c3e:	e012      	b.n	8001c66 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8001c40:	2334      	movs	r3, #52	; 0x34
 8001c42:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8001c44:	2333      	movs	r3, #51	; 0x33
 8001c46:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8001c48:	2336      	movs	r3, #54	; 0x36
 8001c4a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8001c4c:	2335      	movs	r3, #53	; 0x35
 8001c4e:	753b      	strb	r3, [r7, #20]
      break;
 8001c50:	e009      	b.n	8001c66 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8001c52:	233a      	movs	r3, #58	; 0x3a
 8001c54:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8001c56:	2339      	movs	r3, #57	; 0x39
 8001c58:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8001c5a:	233c      	movs	r3, #60	; 0x3c
 8001c5c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8001c5e:	233b      	movs	r3, #59	; 0x3b
 8001c60:	753b      	strb	r3, [r7, #20]
      break;
 8001c62:	e000      	b.n	8001c66 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8001c64:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8001c66:	89fb      	ldrh	r3, [r7, #14]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	7dfa      	ldrb	r2, [r7, #23]
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f001 ff26 	bl	8003ac0 <TS_IO_Read>
 8001c74:	4603      	mov	r3, r0
 8001c76:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001c78:	7cfb      	ldrb	r3, [r7, #19]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <ft5336_TS_GetXY+0x1dc>)
 8001c80:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001c82:	89fb      	ldrh	r3, [r7, #14]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	7dba      	ldrb	r2, [r7, #22]
 8001c88:	4611      	mov	r1, r2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f001 ff18 	bl	8003ac0 <TS_IO_Read>
 8001c90:	4603      	mov	r3, r0
 8001c92:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001c94:	7cfb      	ldrb	r3, [r7, #19]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	021b      	lsls	r3, r3, #8
 8001c9a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001c9e:	b21a      	sxth	r2, r3
 8001ca0:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <ft5336_TS_GetXY+0x1dc>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	b21b      	sxth	r3, r3
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <ft5336_TS_GetXY+0x1dc>)
 8001cae:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8001cb0:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <ft5336_TS_GetXY+0x1dc>)
 8001cb2:	881a      	ldrh	r2, [r3, #0]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001cb8:	89fb      	ldrh	r3, [r7, #14]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	7d7a      	ldrb	r2, [r7, #21]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f001 fefd 	bl	8003ac0 <TS_IO_Read>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001cca:	7cfb      	ldrb	r3, [r7, #19]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <ft5336_TS_GetXY+0x1dc>)
 8001cd2:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001cd4:	89fb      	ldrh	r3, [r7, #14]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	7d3a      	ldrb	r2, [r7, #20]
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f001 feef 	bl	8003ac0 <TS_IO_Read>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001ce6:	7cfb      	ldrb	r3, [r7, #19]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001cf0:	b21a      	sxth	r2, r3
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <ft5336_TS_GetXY+0x1dc>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <ft5336_TS_GetXY+0x1dc>)
 8001d00:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <ft5336_TS_GetXY+0x1dc>)
 8001d04:	881a      	ldrh	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <ft5336_TS_GetXY+0x1d8>)
 8001d0c:	789b      	ldrb	r3, [r3, #2]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <ft5336_TS_GetXY+0x1d8>)
 8001d14:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20014d40 	.word	0x20014d40
 8001d24:	20014d44 	.word	0x20014d44

08001d28 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001d36:	2301      	movs	r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	21a4      	movs	r1, #164	; 0xa4
 8001d42:	4618      	mov	r0, r3
 8001d44:	f001 fea2 	bl	8003a8c <TS_IO_Write>
}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	21a4      	movs	r1, #164	; 0xa4
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f001 fe8e 	bl	8003a8c <TS_IO_Write>
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	6039      	str	r1, [r7, #0]
 8001db0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2101      	movs	r1, #1
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f001 fe7f 	bl	8003ac0 <TS_IO_Read>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	601a      	str	r2, [r3, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	4603      	mov	r3, r0
 8001de6:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001df8:	4b4d      	ldr	r3, [pc, #308]	; (8001f30 <ft5336_TS_GetTouchInfo+0x158>)
 8001dfa:	785b      	ldrb	r3, [r3, #1]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	4293      	cmp	r3, r2
 8001e02:	f080 8090 	bcs.w	8001f26 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b09      	cmp	r3, #9
 8001e0a:	d85d      	bhi.n	8001ec8 <ft5336_TS_GetTouchInfo+0xf0>
 8001e0c:	a201      	add	r2, pc, #4	; (adr r2, 8001e14 <ft5336_TS_GetTouchInfo+0x3c>)
 8001e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e12:	bf00      	nop
 8001e14:	08001e3d 	.word	0x08001e3d
 8001e18:	08001e4b 	.word	0x08001e4b
 8001e1c:	08001e59 	.word	0x08001e59
 8001e20:	08001e67 	.word	0x08001e67
 8001e24:	08001e75 	.word	0x08001e75
 8001e28:	08001e83 	.word	0x08001e83
 8001e2c:	08001e91 	.word	0x08001e91
 8001e30:	08001e9f 	.word	0x08001e9f
 8001e34:	08001ead 	.word	0x08001ead
 8001e38:	08001ebb 	.word	0x08001ebb
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8001e40:	2307      	movs	r3, #7
 8001e42:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8001e44:	2308      	movs	r3, #8
 8001e46:	757b      	strb	r3, [r7, #21]
      break;
 8001e48:	e03f      	b.n	8001eca <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8001e4a:	2309      	movs	r3, #9
 8001e4c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8001e4e:	230d      	movs	r3, #13
 8001e50:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8001e52:	230e      	movs	r3, #14
 8001e54:	757b      	strb	r3, [r7, #21]
      break;
 8001e56:	e038      	b.n	8001eca <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8001e58:	230f      	movs	r3, #15
 8001e5a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8001e5c:	2313      	movs	r3, #19
 8001e5e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8001e60:	2314      	movs	r3, #20
 8001e62:	757b      	strb	r3, [r7, #21]
      break;
 8001e64:	e031      	b.n	8001eca <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8001e66:	2315      	movs	r3, #21
 8001e68:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8001e6a:	2319      	movs	r3, #25
 8001e6c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8001e6e:	231a      	movs	r3, #26
 8001e70:	757b      	strb	r3, [r7, #21]
      break;
 8001e72:	e02a      	b.n	8001eca <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8001e74:	231b      	movs	r3, #27
 8001e76:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8001e78:	231f      	movs	r3, #31
 8001e7a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8001e7c:	2320      	movs	r3, #32
 8001e7e:	757b      	strb	r3, [r7, #21]
      break;
 8001e80:	e023      	b.n	8001eca <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8001e82:	2321      	movs	r3, #33	; 0x21
 8001e84:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8001e86:	2325      	movs	r3, #37	; 0x25
 8001e88:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8001e8a:	2326      	movs	r3, #38	; 0x26
 8001e8c:	757b      	strb	r3, [r7, #21]
      break;
 8001e8e:	e01c      	b.n	8001eca <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8001e90:	2327      	movs	r3, #39	; 0x27
 8001e92:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8001e94:	232b      	movs	r3, #43	; 0x2b
 8001e96:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8001e98:	232c      	movs	r3, #44	; 0x2c
 8001e9a:	757b      	strb	r3, [r7, #21]
      break;
 8001e9c:	e015      	b.n	8001eca <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8001e9e:	232d      	movs	r3, #45	; 0x2d
 8001ea0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8001ea2:	2331      	movs	r3, #49	; 0x31
 8001ea4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8001ea6:	2332      	movs	r3, #50	; 0x32
 8001ea8:	757b      	strb	r3, [r7, #21]
      break;
 8001eaa:	e00e      	b.n	8001eca <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8001eac:	2333      	movs	r3, #51	; 0x33
 8001eae:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8001eb0:	2337      	movs	r3, #55	; 0x37
 8001eb2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8001eb4:	2338      	movs	r3, #56	; 0x38
 8001eb6:	757b      	strb	r3, [r7, #21]
      break;
 8001eb8:	e007      	b.n	8001eca <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8001eba:	2339      	movs	r3, #57	; 0x39
 8001ebc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8001ebe:	233d      	movs	r3, #61	; 0x3d
 8001ec0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8001ec2:	233e      	movs	r3, #62	; 0x3e
 8001ec4:	757b      	strb	r3, [r7, #21]
      break;
 8001ec6:	e000      	b.n	8001eca <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8001ec8:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001eca:	89fb      	ldrh	r3, [r7, #14]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	7dfa      	ldrb	r2, [r7, #23]
 8001ed0:	4611      	mov	r1, r2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f001 fdf4 	bl	8003ac0 <TS_IO_Read>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001edc:	7d3b      	ldrb	r3, [r7, #20]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	119b      	asrs	r3, r3, #6
 8001ee2:	f003 0203 	and.w	r2, r3, #3
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8001eea:	89fb      	ldrh	r3, [r7, #14]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	7dba      	ldrb	r2, [r7, #22]
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f001 fde4 	bl	8003ac0 <TS_IO_Read>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001efc:	7d3b      	ldrb	r3, [r7, #20]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8001f06:	89fb      	ldrh	r3, [r7, #14]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	7d7a      	ldrb	r2, [r7, #21]
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f001 fdd6 	bl	8003ac0 <TS_IO_Read>
 8001f14:	4603      	mov	r3, r0
 8001f16:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8001f18:	7d3b      	ldrb	r3, [r7, #20]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	111b      	asrs	r3, r3, #4
 8001f1e:	f003 0204 	and.w	r2, r3, #4
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20014d40 	.word	0x20014d40

08001f34 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20014d40 	.word	0x20014d40

08001f4c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8001f50:	f7ff fff0 	bl	8001f34 <ft5336_Get_I2C_InitializedStatus>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d104      	bne.n	8001f64 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8001f5a:	f001 fd8d 	bl	8003a78 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001f5e:	4b02      	ldr	r3, [pc, #8]	; (8001f68 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
  }
}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20014d40 	.word	0x20014d40

08001f6c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	4603      	mov	r3, r0
 8001f92:	81fb      	strh	r3, [r7, #14]
 8001f94:	460b      	mov	r3, r1
 8001f96:	81bb      	strh	r3, [r7, #12]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8001fa0:	89bb      	ldrh	r3, [r7, #12]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8001fa6:	89bb      	ldrh	r3, [r7, #12]
 8001fa8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fac:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8001fb2:	f001 fced 	bl	8003990 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8001fb6:	89fb      	ldrh	r3, [r7, #14]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2203      	movs	r2, #3
 8001fbc:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f001 fafb 	bl	80035bc <CODEC_IO_Write>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	461a      	mov	r2, r3
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	4413      	add	r3, r2
 8001fce:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8001fd0:	89fb      	ldrh	r3, [r7, #14]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f640 0117 	movw	r1, #2071	; 0x817
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f001 faee 	bl	80035bc <CODEC_IO_Write>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8001fea:	89fb      	ldrh	r3, [r7, #14]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f001 fae1 	bl	80035bc <CODEC_IO_Write>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	4413      	add	r3, r2
 8002002:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8002004:	89fb      	ldrh	r3, [r7, #14]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	226c      	movs	r2, #108	; 0x6c
 800200a:	2139      	movs	r1, #57	; 0x39
 800200c:	4618      	mov	r0, r3
 800200e:	f001 fad5 	bl	80035bc <CODEC_IO_Write>
 8002012:	4603      	mov	r3, r0
 8002014:	461a      	mov	r2, r3
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	4413      	add	r3, r2
 800201a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 800201c:	8afb      	ldrh	r3, [r7, #22]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00c      	beq.n	800203c <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8002022:	89fb      	ldrh	r3, [r7, #14]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2213      	movs	r2, #19
 8002028:	2101      	movs	r1, #1
 800202a:	4618      	mov	r0, r3
 800202c:	f001 fac6 	bl	80035bc <CODEC_IO_Write>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	4413      	add	r3, r2
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	e00b      	b.n	8002054 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 800203c:	89fb      	ldrh	r3, [r7, #14]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2203      	movs	r2, #3
 8002042:	2101      	movs	r1, #1
 8002044:	4618      	mov	r0, r3
 8002046:	f001 fab9 	bl	80035bc <CODEC_IO_Write>
 800204a:	4603      	mov	r3, r0
 800204c:	461a      	mov	r2, r3
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	4413      	add	r3, r2
 8002052:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8002054:	2032      	movs	r0, #50	; 0x32
 8002056:	f001 fd03 	bl	8003a60 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 800205a:	8b3b      	ldrh	r3, [r7, #24]
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 815f 	beq.w	8002320 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8002062:	4bae      	ldr	r3, [pc, #696]	; (800231c <wm8994_Init+0x394>)
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8002068:	8b3b      	ldrh	r3, [r7, #24]
 800206a:	2b03      	cmp	r3, #3
 800206c:	f000 808c 	beq.w	8002188 <wm8994_Init+0x200>
 8002070:	2b03      	cmp	r3, #3
 8002072:	f300 8111 	bgt.w	8002298 <wm8994_Init+0x310>
 8002076:	2b01      	cmp	r3, #1
 8002078:	d002      	beq.n	8002080 <wm8994_Init+0xf8>
 800207a:	2b02      	cmp	r3, #2
 800207c:	d042      	beq.n	8002104 <wm8994_Init+0x17c>
 800207e:	e10b      	b.n	8002298 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002080:	89fb      	ldrh	r3, [r7, #14]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f640 420c 	movw	r2, #3084	; 0xc0c
 8002088:	2105      	movs	r1, #5
 800208a:	4618      	mov	r0, r3
 800208c:	f001 fa96 	bl	80035bc <CODEC_IO_Write>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	4413      	add	r3, r2
 8002098:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800209a:	89fb      	ldrh	r3, [r7, #14]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2200      	movs	r2, #0
 80020a0:	f240 6101 	movw	r1, #1537	; 0x601
 80020a4:	4618      	mov	r0, r3
 80020a6:	f001 fa89 	bl	80035bc <CODEC_IO_Write>
 80020aa:	4603      	mov	r3, r0
 80020ac:	461a      	mov	r2, r3
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	4413      	add	r3, r2
 80020b2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80020b4:	89fb      	ldrh	r3, [r7, #14]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2200      	movs	r2, #0
 80020ba:	f240 6102 	movw	r1, #1538	; 0x602
 80020be:	4618      	mov	r0, r3
 80020c0:	f001 fa7c 	bl	80035bc <CODEC_IO_Write>
 80020c4:	4603      	mov	r3, r0
 80020c6:	461a      	mov	r2, r3
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	4413      	add	r3, r2
 80020cc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80020ce:	89fb      	ldrh	r3, [r7, #14]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2202      	movs	r2, #2
 80020d4:	f240 6104 	movw	r1, #1540	; 0x604
 80020d8:	4618      	mov	r0, r3
 80020da:	f001 fa6f 	bl	80035bc <CODEC_IO_Write>
 80020de:	4603      	mov	r3, r0
 80020e0:	461a      	mov	r2, r3
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	4413      	add	r3, r2
 80020e6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80020e8:	89fb      	ldrh	r3, [r7, #14]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2202      	movs	r2, #2
 80020ee:	f240 6105 	movw	r1, #1541	; 0x605
 80020f2:	4618      	mov	r0, r3
 80020f4:	f001 fa62 	bl	80035bc <CODEC_IO_Write>
 80020f8:	4603      	mov	r3, r0
 80020fa:	461a      	mov	r2, r3
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	4413      	add	r3, r2
 8002100:	61fb      	str	r3, [r7, #28]
      break;
 8002102:	e110      	b.n	8002326 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002104:	89fb      	ldrh	r3, [r7, #14]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	f240 3203 	movw	r2, #771	; 0x303
 800210c:	2105      	movs	r1, #5
 800210e:	4618      	mov	r0, r3
 8002110:	f001 fa54 	bl	80035bc <CODEC_IO_Write>
 8002114:	4603      	mov	r3, r0
 8002116:	461a      	mov	r2, r3
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	4413      	add	r3, r2
 800211c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800211e:	89fb      	ldrh	r3, [r7, #14]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2201      	movs	r2, #1
 8002124:	f240 6101 	movw	r1, #1537	; 0x601
 8002128:	4618      	mov	r0, r3
 800212a:	f001 fa47 	bl	80035bc <CODEC_IO_Write>
 800212e:	4603      	mov	r3, r0
 8002130:	461a      	mov	r2, r3
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	4413      	add	r3, r2
 8002136:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002138:	89fb      	ldrh	r3, [r7, #14]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2201      	movs	r2, #1
 800213e:	f240 6102 	movw	r1, #1538	; 0x602
 8002142:	4618      	mov	r0, r3
 8002144:	f001 fa3a 	bl	80035bc <CODEC_IO_Write>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	4413      	add	r3, r2
 8002150:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002152:	89fb      	ldrh	r3, [r7, #14]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2200      	movs	r2, #0
 8002158:	f240 6104 	movw	r1, #1540	; 0x604
 800215c:	4618      	mov	r0, r3
 800215e:	f001 fa2d 	bl	80035bc <CODEC_IO_Write>
 8002162:	4603      	mov	r3, r0
 8002164:	461a      	mov	r2, r3
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	4413      	add	r3, r2
 800216a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800216c:	89fb      	ldrh	r3, [r7, #14]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2200      	movs	r2, #0
 8002172:	f240 6105 	movw	r1, #1541	; 0x605
 8002176:	4618      	mov	r0, r3
 8002178:	f001 fa20 	bl	80035bc <CODEC_IO_Write>
 800217c:	4603      	mov	r3, r0
 800217e:	461a      	mov	r2, r3
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	4413      	add	r3, r2
 8002184:	61fb      	str	r3, [r7, #28]
      break;
 8002186:	e0ce      	b.n	8002326 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002188:	8afb      	ldrh	r3, [r7, #22]
 800218a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800218e:	d141      	bne.n	8002214 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002190:	89fb      	ldrh	r3, [r7, #14]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f640 720f 	movw	r2, #3855	; 0xf0f
 8002198:	2105      	movs	r1, #5
 800219a:	4618      	mov	r0, r3
 800219c:	f001 fa0e 	bl	80035bc <CODEC_IO_Write>
 80021a0:	4603      	mov	r3, r0
 80021a2:	461a      	mov	r2, r3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	4413      	add	r3, r2
 80021a8:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80021aa:	89fb      	ldrh	r3, [r7, #14]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2203      	movs	r2, #3
 80021b0:	f240 6101 	movw	r1, #1537	; 0x601
 80021b4:	4618      	mov	r0, r3
 80021b6:	f001 fa01 	bl	80035bc <CODEC_IO_Write>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	4413      	add	r3, r2
 80021c2:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80021c4:	89fb      	ldrh	r3, [r7, #14]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2203      	movs	r2, #3
 80021ca:	f240 6102 	movw	r1, #1538	; 0x602
 80021ce:	4618      	mov	r0, r3
 80021d0:	f001 f9f4 	bl	80035bc <CODEC_IO_Write>
 80021d4:	4603      	mov	r3, r0
 80021d6:	461a      	mov	r2, r3
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	4413      	add	r3, r2
 80021dc:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80021de:	89fb      	ldrh	r3, [r7, #14]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2203      	movs	r2, #3
 80021e4:	f240 6104 	movw	r1, #1540	; 0x604
 80021e8:	4618      	mov	r0, r3
 80021ea:	f001 f9e7 	bl	80035bc <CODEC_IO_Write>
 80021ee:	4603      	mov	r3, r0
 80021f0:	461a      	mov	r2, r3
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	4413      	add	r3, r2
 80021f6:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80021f8:	89fb      	ldrh	r3, [r7, #14]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2203      	movs	r2, #3
 80021fe:	f240 6105 	movw	r1, #1541	; 0x605
 8002202:	4618      	mov	r0, r3
 8002204:	f001 f9da 	bl	80035bc <CODEC_IO_Write>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	4413      	add	r3, r2
 8002210:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8002212:	e088      	b.n	8002326 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002214:	89fb      	ldrh	r3, [r7, #14]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	f640 720f 	movw	r2, #3855	; 0xf0f
 800221c:	2105      	movs	r1, #5
 800221e:	4618      	mov	r0, r3
 8002220:	f001 f9cc 	bl	80035bc <CODEC_IO_Write>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	4413      	add	r3, r2
 800222c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800222e:	89fb      	ldrh	r3, [r7, #14]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2201      	movs	r2, #1
 8002234:	f240 6101 	movw	r1, #1537	; 0x601
 8002238:	4618      	mov	r0, r3
 800223a:	f001 f9bf 	bl	80035bc <CODEC_IO_Write>
 800223e:	4603      	mov	r3, r0
 8002240:	461a      	mov	r2, r3
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	4413      	add	r3, r2
 8002246:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002248:	89fb      	ldrh	r3, [r7, #14]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2201      	movs	r2, #1
 800224e:	f240 6102 	movw	r1, #1538	; 0x602
 8002252:	4618      	mov	r0, r3
 8002254:	f001 f9b2 	bl	80035bc <CODEC_IO_Write>
 8002258:	4603      	mov	r3, r0
 800225a:	461a      	mov	r2, r3
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	4413      	add	r3, r2
 8002260:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002262:	89fb      	ldrh	r3, [r7, #14]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2202      	movs	r2, #2
 8002268:	f240 6104 	movw	r1, #1540	; 0x604
 800226c:	4618      	mov	r0, r3
 800226e:	f001 f9a5 	bl	80035bc <CODEC_IO_Write>
 8002272:	4603      	mov	r3, r0
 8002274:	461a      	mov	r2, r3
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	4413      	add	r3, r2
 800227a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 800227c:	89fb      	ldrh	r3, [r7, #14]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2202      	movs	r2, #2
 8002282:	f240 6105 	movw	r1, #1541	; 0x605
 8002286:	4618      	mov	r0, r3
 8002288:	f001 f998 	bl	80035bc <CODEC_IO_Write>
 800228c:	4603      	mov	r3, r0
 800228e:	461a      	mov	r2, r3
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	4413      	add	r3, r2
 8002294:	61fb      	str	r3, [r7, #28]
      break;
 8002296:	e046      	b.n	8002326 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002298:	89fb      	ldrh	r3, [r7, #14]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f240 3203 	movw	r2, #771	; 0x303
 80022a0:	2105      	movs	r1, #5
 80022a2:	4618      	mov	r0, r3
 80022a4:	f001 f98a 	bl	80035bc <CODEC_IO_Write>
 80022a8:	4603      	mov	r3, r0
 80022aa:	461a      	mov	r2, r3
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	4413      	add	r3, r2
 80022b0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80022b2:	89fb      	ldrh	r3, [r7, #14]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2201      	movs	r2, #1
 80022b8:	f240 6101 	movw	r1, #1537	; 0x601
 80022bc:	4618      	mov	r0, r3
 80022be:	f001 f97d 	bl	80035bc <CODEC_IO_Write>
 80022c2:	4603      	mov	r3, r0
 80022c4:	461a      	mov	r2, r3
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	4413      	add	r3, r2
 80022ca:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80022cc:	89fb      	ldrh	r3, [r7, #14]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2201      	movs	r2, #1
 80022d2:	f240 6102 	movw	r1, #1538	; 0x602
 80022d6:	4618      	mov	r0, r3
 80022d8:	f001 f970 	bl	80035bc <CODEC_IO_Write>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	4413      	add	r3, r2
 80022e4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80022e6:	89fb      	ldrh	r3, [r7, #14]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2200      	movs	r2, #0
 80022ec:	f240 6104 	movw	r1, #1540	; 0x604
 80022f0:	4618      	mov	r0, r3
 80022f2:	f001 f963 	bl	80035bc <CODEC_IO_Write>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	4413      	add	r3, r2
 80022fe:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002300:	89fb      	ldrh	r3, [r7, #14]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2200      	movs	r2, #0
 8002306:	f240 6105 	movw	r1, #1541	; 0x605
 800230a:	4618      	mov	r0, r3
 800230c:	f001 f956 	bl	80035bc <CODEC_IO_Write>
 8002310:	4603      	mov	r3, r0
 8002312:	461a      	mov	r2, r3
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	4413      	add	r3, r2
 8002318:	61fb      	str	r3, [r7, #28]
      break;
 800231a:	e004      	b.n	8002326 <wm8994_Init+0x39e>
 800231c:	20014d48 	.word	0x20014d48
    }
  }
  else
  {
    outputEnabled = 0;
 8002320:	4b99      	ldr	r3, [pc, #612]	; (8002588 <wm8994_Init+0x600>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8002326:	8afb      	ldrh	r3, [r7, #22]
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 81ab 	beq.w	8002684 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 800232e:	4b97      	ldr	r3, [pc, #604]	; (800258c <wm8994_Init+0x604>)
 8002330:	2201      	movs	r2, #1
 8002332:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8002334:	8afb      	ldrh	r3, [r7, #22]
 8002336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800233a:	f000 8129 	beq.w	8002590 <wm8994_Init+0x608>
 800233e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002342:	f300 819b 	bgt.w	800267c <wm8994_Init+0x6f4>
 8002346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800234a:	d05a      	beq.n	8002402 <wm8994_Init+0x47a>
 800234c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002350:	f300 8194 	bgt.w	800267c <wm8994_Init+0x6f4>
 8002354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002358:	f000 80c6 	beq.w	80024e8 <wm8994_Init+0x560>
 800235c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002360:	f040 818c 	bne.w	800267c <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8002364:	89fb      	ldrh	r3, [r7, #14]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 800236c:	2104      	movs	r1, #4
 800236e:	4618      	mov	r0, r3
 8002370:	f001 f924 	bl	80035bc <CODEC_IO_Write>
 8002374:	4603      	mov	r3, r0
 8002376:	461a      	mov	r2, r3
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	4413      	add	r3, r2
 800237c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800237e:	89fb      	ldrh	r3, [r7, #14]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	22db      	movs	r2, #219	; 0xdb
 8002384:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8002388:	4618      	mov	r0, r3
 800238a:	f001 f917 	bl	80035bc <CODEC_IO_Write>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	4413      	add	r3, r2
 8002396:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8002398:	89fb      	ldrh	r3, [r7, #14]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80023a0:	2102      	movs	r1, #2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f001 f90a 	bl	80035bc <CODEC_IO_Write>
 80023a8:	4603      	mov	r3, r0
 80023aa:	461a      	mov	r2, r3
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	4413      	add	r3, r2
 80023b0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80023b2:	89fb      	ldrh	r3, [r7, #14]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2202      	movs	r2, #2
 80023b8:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80023bc:	4618      	mov	r0, r3
 80023be:	f001 f8fd 	bl	80035bc <CODEC_IO_Write>
 80023c2:	4603      	mov	r3, r0
 80023c4:	461a      	mov	r2, r3
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	4413      	add	r3, r2
 80023ca:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80023cc:	89fb      	ldrh	r3, [r7, #14]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2202      	movs	r2, #2
 80023d2:	f240 6109 	movw	r1, #1545	; 0x609
 80023d6:	4618      	mov	r0, r3
 80023d8:	f001 f8f0 	bl	80035bc <CODEC_IO_Write>
 80023dc:	4603      	mov	r3, r0
 80023de:	461a      	mov	r2, r3
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	4413      	add	r3, r2
 80023e4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80023e6:	89fb      	ldrh	r3, [r7, #14]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	220e      	movs	r2, #14
 80023ec:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80023f0:	4618      	mov	r0, r3
 80023f2:	f001 f8e3 	bl	80035bc <CODEC_IO_Write>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461a      	mov	r2, r3
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	4413      	add	r3, r2
 80023fe:	61fb      	str	r3, [r7, #28]
      break;
 8002400:	e143      	b.n	800268a <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8002402:	89fb      	ldrh	r3, [r7, #14]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2211      	movs	r2, #17
 8002408:	2128      	movs	r1, #40	; 0x28
 800240a:	4618      	mov	r0, r3
 800240c:	f001 f8d6 	bl	80035bc <CODEC_IO_Write>
 8002410:	4603      	mov	r3, r0
 8002412:	461a      	mov	r2, r3
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	4413      	add	r3, r2
 8002418:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 800241a:	89fb      	ldrh	r3, [r7, #14]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2235      	movs	r2, #53	; 0x35
 8002420:	2129      	movs	r1, #41	; 0x29
 8002422:	4618      	mov	r0, r3
 8002424:	f001 f8ca 	bl	80035bc <CODEC_IO_Write>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	4413      	add	r3, r2
 8002430:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8002432:	89fb      	ldrh	r3, [r7, #14]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2235      	movs	r2, #53	; 0x35
 8002438:	212a      	movs	r1, #42	; 0x2a
 800243a:	4618      	mov	r0, r3
 800243c:	f001 f8be 	bl	80035bc <CODEC_IO_Write>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	4413      	add	r3, r2
 8002448:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800244a:	89fb      	ldrh	r3, [r7, #14]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f240 3203 	movw	r2, #771	; 0x303
 8002452:	2104      	movs	r1, #4
 8002454:	4618      	mov	r0, r3
 8002456:	f001 f8b1 	bl	80035bc <CODEC_IO_Write>
 800245a:	4603      	mov	r3, r0
 800245c:	461a      	mov	r2, r3
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	4413      	add	r3, r2
 8002462:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002464:	89fb      	ldrh	r3, [r7, #14]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	22db      	movs	r2, #219	; 0xdb
 800246a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800246e:	4618      	mov	r0, r3
 8002470:	f001 f8a4 	bl	80035bc <CODEC_IO_Write>
 8002474:	4603      	mov	r3, r0
 8002476:	461a      	mov	r2, r3
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	4413      	add	r3, r2
 800247c:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800247e:	89fb      	ldrh	r3, [r7, #14]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f246 3250 	movw	r2, #25424	; 0x6350
 8002486:	2102      	movs	r1, #2
 8002488:	4618      	mov	r0, r3
 800248a:	f001 f897 	bl	80035bc <CODEC_IO_Write>
 800248e:	4603      	mov	r3, r0
 8002490:	461a      	mov	r2, r3
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	4413      	add	r3, r2
 8002496:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002498:	89fb      	ldrh	r3, [r7, #14]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2202      	movs	r2, #2
 800249e:	f240 6106 	movw	r1, #1542	; 0x606
 80024a2:	4618      	mov	r0, r3
 80024a4:	f001 f88a 	bl	80035bc <CODEC_IO_Write>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4413      	add	r3, r2
 80024b0:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80024b2:	89fb      	ldrh	r3, [r7, #14]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2202      	movs	r2, #2
 80024b8:	f240 6107 	movw	r1, #1543	; 0x607
 80024bc:	4618      	mov	r0, r3
 80024be:	f001 f87d 	bl	80035bc <CODEC_IO_Write>
 80024c2:	4603      	mov	r3, r0
 80024c4:	461a      	mov	r2, r3
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	4413      	add	r3, r2
 80024ca:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80024cc:	89fb      	ldrh	r3, [r7, #14]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	220d      	movs	r2, #13
 80024d2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80024d6:	4618      	mov	r0, r3
 80024d8:	f001 f870 	bl	80035bc <CODEC_IO_Write>
 80024dc:	4603      	mov	r3, r0
 80024de:	461a      	mov	r2, r3
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	4413      	add	r3, r2
 80024e4:	61fb      	str	r3, [r7, #28]
      break;
 80024e6:	e0d0      	b.n	800268a <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80024e8:	89fb      	ldrh	r3, [r7, #14]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80024f0:	2104      	movs	r1, #4
 80024f2:	4618      	mov	r0, r3
 80024f4:	f001 f862 	bl	80035bc <CODEC_IO_Write>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	4413      	add	r3, r2
 8002500:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002502:	89fb      	ldrh	r3, [r7, #14]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	22db      	movs	r2, #219	; 0xdb
 8002508:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800250c:	4618      	mov	r0, r3
 800250e:	f001 f855 	bl	80035bc <CODEC_IO_Write>
 8002512:	4603      	mov	r3, r0
 8002514:	461a      	mov	r2, r3
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	4413      	add	r3, r2
 800251a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800251c:	89fb      	ldrh	r3, [r7, #14]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f246 3250 	movw	r2, #25424	; 0x6350
 8002524:	2102      	movs	r1, #2
 8002526:	4618      	mov	r0, r3
 8002528:	f001 f848 	bl	80035bc <CODEC_IO_Write>
 800252c:	4603      	mov	r3, r0
 800252e:	461a      	mov	r2, r3
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002536:	89fb      	ldrh	r3, [r7, #14]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2202      	movs	r2, #2
 800253c:	f240 6106 	movw	r1, #1542	; 0x606
 8002540:	4618      	mov	r0, r3
 8002542:	f001 f83b 	bl	80035bc <CODEC_IO_Write>
 8002546:	4603      	mov	r3, r0
 8002548:	461a      	mov	r2, r3
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	4413      	add	r3, r2
 800254e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002550:	89fb      	ldrh	r3, [r7, #14]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2202      	movs	r2, #2
 8002556:	f240 6107 	movw	r1, #1543	; 0x607
 800255a:	4618      	mov	r0, r3
 800255c:	f001 f82e 	bl	80035bc <CODEC_IO_Write>
 8002560:	4603      	mov	r3, r0
 8002562:	461a      	mov	r2, r3
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	4413      	add	r3, r2
 8002568:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800256a:	89fb      	ldrh	r3, [r7, #14]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	220d      	movs	r2, #13
 8002570:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002574:	4618      	mov	r0, r3
 8002576:	f001 f821 	bl	80035bc <CODEC_IO_Write>
 800257a:	4603      	mov	r3, r0
 800257c:	461a      	mov	r2, r3
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	4413      	add	r3, r2
 8002582:	61fb      	str	r3, [r7, #28]
      break; 
 8002584:	e081      	b.n	800268a <wm8994_Init+0x702>
 8002586:	bf00      	nop
 8002588:	20014d48 	.word	0x20014d48
 800258c:	20014d4c 	.word	0x20014d4c
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8002590:	89fb      	ldrh	r3, [r7, #14]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f640 723c 	movw	r2, #3900	; 0xf3c
 8002598:	2104      	movs	r1, #4
 800259a:	4618      	mov	r0, r3
 800259c:	f001 f80e 	bl	80035bc <CODEC_IO_Write>
 80025a0:	4603      	mov	r3, r0
 80025a2:	461a      	mov	r2, r3
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	4413      	add	r3, r2
 80025a8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80025aa:	89fb      	ldrh	r3, [r7, #14]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	22db      	movs	r2, #219	; 0xdb
 80025b0:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 f801 	bl	80035bc <CODEC_IO_Write>
 80025ba:	4603      	mov	r3, r0
 80025bc:	461a      	mov	r2, r3
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	4413      	add	r3, r2
 80025c2:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80025c4:	89fb      	ldrh	r3, [r7, #14]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	22db      	movs	r2, #219	; 0xdb
 80025ca:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fff4 	bl	80035bc <CODEC_IO_Write>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461a      	mov	r2, r3
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	4413      	add	r3, r2
 80025dc:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80025de:	89fb      	ldrh	r3, [r7, #14]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80025e6:	2102      	movs	r1, #2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 ffe7 	bl	80035bc <CODEC_IO_Write>
 80025ee:	4603      	mov	r3, r0
 80025f0:	461a      	mov	r2, r3
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	4413      	add	r3, r2
 80025f6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80025f8:	89fb      	ldrh	r3, [r7, #14]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2202      	movs	r2, #2
 80025fe:	f240 6106 	movw	r1, #1542	; 0x606
 8002602:	4618      	mov	r0, r3
 8002604:	f000 ffda 	bl	80035bc <CODEC_IO_Write>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	4413      	add	r3, r2
 8002610:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002612:	89fb      	ldrh	r3, [r7, #14]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2202      	movs	r2, #2
 8002618:	f240 6107 	movw	r1, #1543	; 0x607
 800261c:	4618      	mov	r0, r3
 800261e:	f000 ffcd 	bl	80035bc <CODEC_IO_Write>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	4413      	add	r3, r2
 800262a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800262c:	89fb      	ldrh	r3, [r7, #14]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2202      	movs	r2, #2
 8002632:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8002636:	4618      	mov	r0, r3
 8002638:	f000 ffc0 	bl	80035bc <CODEC_IO_Write>
 800263c:	4603      	mov	r3, r0
 800263e:	461a      	mov	r2, r3
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	4413      	add	r3, r2
 8002644:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002646:	89fb      	ldrh	r3, [r7, #14]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2202      	movs	r2, #2
 800264c:	f240 6109 	movw	r1, #1545	; 0x609
 8002650:	4618      	mov	r0, r3
 8002652:	f000 ffb3 	bl	80035bc <CODEC_IO_Write>
 8002656:	4603      	mov	r3, r0
 8002658:	461a      	mov	r2, r3
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	4413      	add	r3, r2
 800265e:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002660:	89fb      	ldrh	r3, [r7, #14]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	220d      	movs	r2, #13
 8002666:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800266a:	4618      	mov	r0, r3
 800266c:	f000 ffa6 	bl	80035bc <CODEC_IO_Write>
 8002670:	4603      	mov	r3, r0
 8002672:	461a      	mov	r2, r3
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	4413      	add	r3, r2
 8002678:	61fb      	str	r3, [r7, #28]
      break;    
 800267a:	e006      	b.n	800268a <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	3301      	adds	r3, #1
 8002680:	61fb      	str	r3, [r7, #28]
      break;
 8002682:	e002      	b.n	800268a <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8002684:	4ba4      	ldr	r3, [pc, #656]	; (8002918 <wm8994_Init+0x990>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4aa3      	ldr	r2, [pc, #652]	; (800291c <wm8994_Init+0x994>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d079      	beq.n	8002786 <wm8994_Init+0x7fe>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4aa1      	ldr	r2, [pc, #644]	; (800291c <wm8994_Init+0x994>)
 8002696:	4293      	cmp	r3, r2
 8002698:	f200 80ad 	bhi.w	80027f6 <wm8994_Init+0x86e>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d061      	beq.n	800276a <wm8994_Init+0x7e2>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80026ac:	4293      	cmp	r3, r2
 80026ae:	f200 80a2 	bhi.w	80027f6 <wm8994_Init+0x86e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80026b8:	4293      	cmp	r3, r2
 80026ba:	f000 808e 	beq.w	80027da <wm8994_Init+0x852>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f64a 4244 	movw	r2, #44100	; 0xac44
 80026c4:	4293      	cmp	r3, r2
 80026c6:	f200 8096 	bhi.w	80027f6 <wm8994_Init+0x86e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80026d0:	d03d      	beq.n	800274e <wm8994_Init+0x7c6>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80026d8:	f200 808d 	bhi.w	80027f6 <wm8994_Init+0x86e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f245 6222 	movw	r2, #22050	; 0x5622
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d06b      	beq.n	80027be <wm8994_Init+0x836>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f245 6222 	movw	r2, #22050	; 0x5622
 80026ec:	4293      	cmp	r3, r2
 80026ee:	f200 8082 	bhi.w	80027f6 <wm8994_Init+0x86e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80026f8:	d01b      	beq.n	8002732 <wm8994_Init+0x7aa>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002700:	d879      	bhi.n	80027f6 <wm8994_Init+0x86e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002708:	d005      	beq.n	8002716 <wm8994_Init+0x78e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8002710:	4293      	cmp	r3, r2
 8002712:	d046      	beq.n	80027a2 <wm8994_Init+0x81a>
 8002714:	e06f      	b.n	80027f6 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002716:	89fb      	ldrh	r3, [r7, #14]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2203      	movs	r2, #3
 800271c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002720:	4618      	mov	r0, r3
 8002722:	f000 ff4b 	bl	80035bc <CODEC_IO_Write>
 8002726:	4603      	mov	r3, r0
 8002728:	461a      	mov	r2, r3
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	4413      	add	r3, r2
 800272e:	61fb      	str	r3, [r7, #28]
    break;
 8002730:	e06f      	b.n	8002812 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8002732:	89fb      	ldrh	r3, [r7, #14]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2233      	movs	r2, #51	; 0x33
 8002738:	f44f 7104 	mov.w	r1, #528	; 0x210
 800273c:	4618      	mov	r0, r3
 800273e:	f000 ff3d 	bl	80035bc <CODEC_IO_Write>
 8002742:	4603      	mov	r3, r0
 8002744:	461a      	mov	r2, r3
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	4413      	add	r3, r2
 800274a:	61fb      	str	r3, [r7, #28]
    break;
 800274c:	e061      	b.n	8002812 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800274e:	89fb      	ldrh	r3, [r7, #14]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2263      	movs	r2, #99	; 0x63
 8002754:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002758:	4618      	mov	r0, r3
 800275a:	f000 ff2f 	bl	80035bc <CODEC_IO_Write>
 800275e:	4603      	mov	r3, r0
 8002760:	461a      	mov	r2, r3
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	4413      	add	r3, r2
 8002766:	61fb      	str	r3, [r7, #28]
    break;
 8002768:	e053      	b.n	8002812 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800276a:	89fb      	ldrh	r3, [r7, #14]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2283      	movs	r2, #131	; 0x83
 8002770:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002774:	4618      	mov	r0, r3
 8002776:	f000 ff21 	bl	80035bc <CODEC_IO_Write>
 800277a:	4603      	mov	r3, r0
 800277c:	461a      	mov	r2, r3
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	4413      	add	r3, r2
 8002782:	61fb      	str	r3, [r7, #28]
    break;
 8002784:	e045      	b.n	8002812 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8002786:	89fb      	ldrh	r3, [r7, #14]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	22a3      	movs	r2, #163	; 0xa3
 800278c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002790:	4618      	mov	r0, r3
 8002792:	f000 ff13 	bl	80035bc <CODEC_IO_Write>
 8002796:	4603      	mov	r3, r0
 8002798:	461a      	mov	r2, r3
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	4413      	add	r3, r2
 800279e:	61fb      	str	r3, [r7, #28]
    break;
 80027a0:	e037      	b.n	8002812 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80027a2:	89fb      	ldrh	r3, [r7, #14]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2213      	movs	r2, #19
 80027a8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 ff05 	bl	80035bc <CODEC_IO_Write>
 80027b2:	4603      	mov	r3, r0
 80027b4:	461a      	mov	r2, r3
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	4413      	add	r3, r2
 80027ba:	61fb      	str	r3, [r7, #28]
    break;
 80027bc:	e029      	b.n	8002812 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80027be:	89fb      	ldrh	r3, [r7, #14]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2243      	movs	r2, #67	; 0x43
 80027c4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 fef7 	bl	80035bc <CODEC_IO_Write>
 80027ce:	4603      	mov	r3, r0
 80027d0:	461a      	mov	r2, r3
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	4413      	add	r3, r2
 80027d6:	61fb      	str	r3, [r7, #28]
    break;
 80027d8:	e01b      	b.n	8002812 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80027da:	89fb      	ldrh	r3, [r7, #14]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2273      	movs	r2, #115	; 0x73
 80027e0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fee9 	bl	80035bc <CODEC_IO_Write>
 80027ea:	4603      	mov	r3, r0
 80027ec:	461a      	mov	r2, r3
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	4413      	add	r3, r2
 80027f2:	61fb      	str	r3, [r7, #28]
    break; 
 80027f4:	e00d      	b.n	8002812 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80027f6:	89fb      	ldrh	r3, [r7, #14]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2283      	movs	r2, #131	; 0x83
 80027fc:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fedb 	bl	80035bc <CODEC_IO_Write>
 8002806:	4603      	mov	r3, r0
 8002808:	461a      	mov	r2, r3
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	4413      	add	r3, r2
 800280e:	61fb      	str	r3, [r7, #28]
    break; 
 8002810:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002812:	8afb      	ldrh	r3, [r7, #22]
 8002814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002818:	d10e      	bne.n	8002838 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 800281a:	89fb      	ldrh	r3, [r7, #14]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f244 0218 	movw	r2, #16408	; 0x4018
 8002822:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002826:	4618      	mov	r0, r3
 8002828:	f000 fec8 	bl	80035bc <CODEC_IO_Write>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	4413      	add	r3, r2
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	e00d      	b.n	8002854 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8002838:	89fb      	ldrh	r3, [r7, #14]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	f244 0210 	movw	r2, #16400	; 0x4010
 8002840:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002844:	4618      	mov	r0, r3
 8002846:	f000 feb9 	bl	80035bc <CODEC_IO_Write>
 800284a:	4603      	mov	r3, r0
 800284c:	461a      	mov	r2, r3
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	4413      	add	r3, r2
 8002852:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8002854:	89fb      	ldrh	r3, [r7, #14]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2200      	movs	r2, #0
 800285a:	f240 3102 	movw	r1, #770	; 0x302
 800285e:	4618      	mov	r0, r3
 8002860:	f000 feac 	bl	80035bc <CODEC_IO_Write>
 8002864:	4603      	mov	r3, r0
 8002866:	461a      	mov	r2, r3
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	4413      	add	r3, r2
 800286c:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800286e:	89fb      	ldrh	r3, [r7, #14]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	220a      	movs	r2, #10
 8002874:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fe9f 	bl	80035bc <CODEC_IO_Write>
 800287e:	4603      	mov	r3, r0
 8002880:	461a      	mov	r2, r3
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	4413      	add	r3, r2
 8002886:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8002888:	89fb      	ldrh	r3, [r7, #14]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2201      	movs	r2, #1
 800288e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fe92 	bl	80035bc <CODEC_IO_Write>
 8002898:	4603      	mov	r3, r0
 800289a:	461a      	mov	r2, r3
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	4413      	add	r3, r2
 80028a0:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80028a2:	8b3b      	ldrh	r3, [r7, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 817b 	beq.w	8002ba0 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 80028aa:	8b3b      	ldrh	r3, [r7, #24]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d157      	bne.n	8002960 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 80028b0:	89fb      	ldrh	r3, [r7, #14]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028b8:	212d      	movs	r1, #45	; 0x2d
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 fe7e 	bl	80035bc <CODEC_IO_Write>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
 80028c8:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 80028ca:	89fb      	ldrh	r3, [r7, #14]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028d2:	212e      	movs	r1, #46	; 0x2e
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 fe71 	bl	80035bc <CODEC_IO_Write>
 80028da:	4603      	mov	r3, r0
 80028dc:	461a      	mov	r2, r3
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	4413      	add	r3, r2
 80028e2:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 80028e4:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <wm8994_Init+0x998>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d01b      	beq.n	8002924 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 80028ec:	89fb      	ldrh	r3, [r7, #14]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 80028f4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 fe5f 	bl	80035bc <CODEC_IO_Write>
 80028fe:	4603      	mov	r3, r0
 8002900:	461a      	mov	r2, r3
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	4413      	add	r3, r2
 8002906:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <wm8994_Init+0x998>)
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 800290e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002912:	f001 f8a5 	bl	8003a60 <AUDIO_IO_Delay>
 8002916:	e016      	b.n	8002946 <wm8994_Init+0x9be>
 8002918:	20014d4c 	.word	0x20014d4c
 800291c:	00017700 	.word	0x00017700
 8002920:	200002b0 	.word	0x200002b0
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8002924:	89fb      	ldrh	r3, [r7, #14]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f248 1208 	movw	r2, #33032	; 0x8108
 800292c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002930:	4618      	mov	r0, r3
 8002932:	f000 fe43 	bl	80035bc <CODEC_IO_Write>
 8002936:	4603      	mov	r3, r0
 8002938:	461a      	mov	r2, r3
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	4413      	add	r3, r2
 800293e:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8002940:	2032      	movs	r0, #50	; 0x32
 8002942:	f001 f88d 	bl	8003a60 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8002946:	89fb      	ldrh	r3, [r7, #14]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2200      	movs	r2, #0
 800294c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fe33 	bl	80035bc <CODEC_IO_Write>
 8002956:	4603      	mov	r3, r0
 8002958:	461a      	mov	r2, r3
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	4413      	add	r3, r2
 800295e:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8002960:	89fb      	ldrh	r3, [r7, #14]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002968:	2103      	movs	r1, #3
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fe26 	bl	80035bc <CODEC_IO_Write>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	4413      	add	r3, r2
 8002978:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 800297a:	89fb      	ldrh	r3, [r7, #14]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2200      	movs	r2, #0
 8002980:	2122      	movs	r1, #34	; 0x22
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fe1a 	bl	80035bc <CODEC_IO_Write>
 8002988:	4603      	mov	r3, r0
 800298a:	461a      	mov	r2, r3
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	4413      	add	r3, r2
 8002990:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8002992:	89fb      	ldrh	r3, [r7, #14]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2200      	movs	r2, #0
 8002998:	2123      	movs	r1, #35	; 0x23
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fe0e 	bl	80035bc <CODEC_IO_Write>
 80029a0:	4603      	mov	r3, r0
 80029a2:	461a      	mov	r2, r3
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	4413      	add	r3, r2
 80029a8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80029aa:	89fb      	ldrh	r3, [r7, #14]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f44f 7240 	mov.w	r2, #768	; 0x300
 80029b2:	2136      	movs	r1, #54	; 0x36
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fe01 	bl	80035bc <CODEC_IO_Write>
 80029ba:	4603      	mov	r3, r0
 80029bc:	461a      	mov	r2, r3
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	4413      	add	r3, r2
 80029c2:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80029c4:	89fb      	ldrh	r3, [r7, #14]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f243 0203 	movw	r2, #12291	; 0x3003
 80029cc:	2101      	movs	r1, #1
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fdf4 	bl	80035bc <CODEC_IO_Write>
 80029d4:	4603      	mov	r3, r0
 80029d6:	461a      	mov	r2, r3
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	4413      	add	r3, r2
 80029dc:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80029de:	8afb      	ldrh	r3, [r7, #22]
 80029e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029e4:	d10d      	bne.n	8002a02 <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80029e6:	89fb      	ldrh	r3, [r7, #14]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	f240 2205 	movw	r2, #517	; 0x205
 80029ee:	2151      	movs	r1, #81	; 0x51
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fde3 	bl	80035bc <CODEC_IO_Write>
 80029f6:	4603      	mov	r3, r0
 80029f8:	461a      	mov	r2, r3
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	4413      	add	r3, r2
 80029fe:	61fb      	str	r3, [r7, #28]
 8002a00:	e00b      	b.n	8002a1a <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8002a02:	89fb      	ldrh	r3, [r7, #14]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2205      	movs	r2, #5
 8002a08:	2151      	movs	r1, #81	; 0x51
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 fdd6 	bl	80035bc <CODEC_IO_Write>
 8002a10:	4603      	mov	r3, r0
 8002a12:	461a      	mov	r2, r3
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	4413      	add	r3, r2
 8002a18:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8002a1a:	8b7b      	ldrh	r3, [r7, #26]
 8002a1c:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8002a20:	f043 0303 	orr.w	r3, r3, #3
 8002a24:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002a26:	89fb      	ldrh	r3, [r7, #14]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	8b7a      	ldrh	r2, [r7, #26]
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fdc4 	bl	80035bc <CODEC_IO_Write>
 8002a34:	4603      	mov	r3, r0
 8002a36:	461a      	mov	r2, r3
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2222      	movs	r2, #34	; 0x22
 8002a44:	2160      	movs	r1, #96	; 0x60
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fdb8 	bl	80035bc <CODEC_IO_Write>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	461a      	mov	r2, r3
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	4413      	add	r3, r2
 8002a54:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8002a56:	89fb      	ldrh	r3, [r7, #14]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f649 7225 	movw	r2, #40741	; 0x9f25
 8002a5e:	214c      	movs	r1, #76	; 0x4c
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fdab 	bl	80035bc <CODEC_IO_Write>
 8002a66:	4603      	mov	r3, r0
 8002a68:	461a      	mov	r2, r3
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8002a70:	200f      	movs	r0, #15
 8002a72:	f000 fff5 	bl	8003a60 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8002a76:	89fb      	ldrh	r3, [r7, #14]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	212d      	movs	r1, #45	; 0x2d
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fd9c 	bl	80035bc <CODEC_IO_Write>
 8002a84:	4603      	mov	r3, r0
 8002a86:	461a      	mov	r2, r3
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8002a8e:	89fb      	ldrh	r3, [r7, #14]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2201      	movs	r2, #1
 8002a94:	212e      	movs	r1, #46	; 0x2e
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fd90 	bl	80035bc <CODEC_IO_Write>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8002aa6:	89fb      	ldrh	r3, [r7, #14]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f44f 724c 	mov.w	r2, #816	; 0x330
 8002aae:	2103      	movs	r1, #3
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fd83 	bl	80035bc <CODEC_IO_Write>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	461a      	mov	r2, r3
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	4413      	add	r3, r2
 8002abe:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8002ac0:	89fb      	ldrh	r3, [r7, #14]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2233      	movs	r2, #51	; 0x33
 8002ac6:	2154      	movs	r1, #84	; 0x54
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 fd77 	bl	80035bc <CODEC_IO_Write>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8002ad8:	f240 1001 	movw	r0, #257	; 0x101
 8002adc:	f000 ffc0 	bl	8003a60 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8002ae0:	89fb      	ldrh	r3, [r7, #14]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	22ee      	movs	r2, #238	; 0xee
 8002ae6:	2160      	movs	r1, #96	; 0x60
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fd67 	bl	80035bc <CODEC_IO_Write>
 8002aee:	4603      	mov	r3, r0
 8002af0:	461a      	mov	r2, r3
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	4413      	add	r3, r2
 8002af6:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8002af8:	89fb      	ldrh	r3, [r7, #14]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	22c0      	movs	r2, #192	; 0xc0
 8002afe:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fd5a 	bl	80035bc <CODEC_IO_Write>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	4413      	add	r3, r2
 8002b10:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8002b12:	89fb      	ldrh	r3, [r7, #14]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	22c0      	movs	r2, #192	; 0xc0
 8002b18:	f240 6111 	movw	r1, #1553	; 0x611
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fd4d 	bl	80035bc <CODEC_IO_Write>
 8002b22:	4603      	mov	r3, r0
 8002b24:	461a      	mov	r2, r3
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	4413      	add	r3, r2
 8002b2a:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8002b2c:	89fb      	ldrh	r3, [r7, #14]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2210      	movs	r2, #16
 8002b32:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fd40 	bl	80035bc <CODEC_IO_Write>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461a      	mov	r2, r3
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	4413      	add	r3, r2
 8002b44:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8002b46:	89fb      	ldrh	r3, [r7, #14]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	22c0      	movs	r2, #192	; 0xc0
 8002b4c:	f240 6112 	movw	r1, #1554	; 0x612
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fd33 	bl	80035bc <CODEC_IO_Write>
 8002b56:	4603      	mov	r3, r0
 8002b58:	461a      	mov	r2, r3
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8002b60:	89fb      	ldrh	r3, [r7, #14]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	22c0      	movs	r2, #192	; 0xc0
 8002b66:	f240 6113 	movw	r1, #1555	; 0x613
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fd26 	bl	80035bc <CODEC_IO_Write>
 8002b70:	4603      	mov	r3, r0
 8002b72:	461a      	mov	r2, r3
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	4413      	add	r3, r2
 8002b78:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8002b7a:	89fb      	ldrh	r3, [r7, #14]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2210      	movs	r2, #16
 8002b80:	f240 4122 	movw	r1, #1058	; 0x422
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 fd19 	bl	80035bc <CODEC_IO_Write>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	4413      	add	r3, r2
 8002b92:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002b94:	7afa      	ldrb	r2, [r7, #11]
 8002b96:	89fb      	ldrh	r3, [r7, #14]
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 f984 	bl	8002ea8 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8002ba0:	8afb      	ldrh	r3, [r7, #22]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80a6 	beq.w	8002cf4 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8002ba8:	8afb      	ldrh	r3, [r7, #22]
 8002baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bae:	d003      	beq.n	8002bb8 <wm8994_Init+0xc30>
 8002bb0:	8afb      	ldrh	r3, [r7, #22]
 8002bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb6:	d12b      	bne.n	8002c10 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002bb8:	8b7b      	ldrh	r3, [r7, #26]
 8002bba:	f043 0313 	orr.w	r3, r3, #19
 8002bbe:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002bc0:	89fb      	ldrh	r3, [r7, #14]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	8b7a      	ldrh	r2, [r7, #26]
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 fcf7 	bl	80035bc <CODEC_IO_Write>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002bd8:	89fb      	ldrh	r3, [r7, #14]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2202      	movs	r2, #2
 8002bde:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 fcea 	bl	80035bc <CODEC_IO_Write>
 8002be8:	4603      	mov	r3, r0
 8002bea:	461a      	mov	r2, r3
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	4413      	add	r3, r2
 8002bf0:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8002bf2:	89fb      	ldrh	r3, [r7, #14]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002bfa:	f240 4111 	movw	r1, #1041	; 0x411
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fcdc 	bl	80035bc <CODEC_IO_Write>
 8002c04:	4603      	mov	r3, r0
 8002c06:	461a      	mov	r2, r3
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	61fb      	str	r3, [r7, #28]
 8002c0e:	e06b      	b.n	8002ce8 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002c10:	8afb      	ldrh	r3, [r7, #22]
 8002c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c16:	d139      	bne.n	8002c8c <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002c18:	8b7b      	ldrh	r3, [r7, #26]
 8002c1a:	f043 0313 	orr.w	r3, r3, #19
 8002c1e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002c20:	89fb      	ldrh	r3, [r7, #14]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	8b7a      	ldrh	r2, [r7, #26]
 8002c26:	2101      	movs	r1, #1
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fcc7 	bl	80035bc <CODEC_IO_Write>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	461a      	mov	r2, r3
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	4413      	add	r3, r2
 8002c36:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002c38:	89fb      	ldrh	r3, [r7, #14]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 fcba 	bl	80035bc <CODEC_IO_Write>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	4413      	add	r3, r2
 8002c50:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002c52:	89fb      	ldrh	r3, [r7, #14]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8002c5a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fcac 	bl	80035bc <CODEC_IO_Write>
 8002c64:	4603      	mov	r3, r0
 8002c66:	461a      	mov	r2, r3
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8002c6e:	89fb      	ldrh	r3, [r7, #14]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8002c76:	f240 4111 	movw	r1, #1041	; 0x411
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fc9e 	bl	80035bc <CODEC_IO_Write>
 8002c80:	4603      	mov	r3, r0
 8002c82:	461a      	mov	r2, r3
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	4413      	add	r3, r2
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	e02d      	b.n	8002ce8 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8002c8c:	8afb      	ldrh	r3, [r7, #22]
 8002c8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c92:	d003      	beq.n	8002c9c <wm8994_Init+0xd14>
 8002c94:	8afb      	ldrh	r3, [r7, #22]
 8002c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c9a:	d125      	bne.n	8002ce8 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8002c9c:	89fb      	ldrh	r3, [r7, #14]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	220b      	movs	r2, #11
 8002ca2:	2118      	movs	r1, #24
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fc89 	bl	80035bc <CODEC_IO_Write>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461a      	mov	r2, r3
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8002cb4:	89fb      	ldrh	r3, [r7, #14]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	220b      	movs	r2, #11
 8002cba:	211a      	movs	r1, #26
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fc7d 	bl	80035bc <CODEC_IO_Write>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	4413      	add	r3, r2
 8002cca:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002ccc:	89fb      	ldrh	r3, [r7, #14]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8002cd4:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fc6f 	bl	80035bc <CODEC_IO_Write>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002ce8:	7afa      	ldrb	r2, [r7, #11]
 8002cea:	89fb      	ldrh	r3, [r7, #14]
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f8da 	bl	8002ea8 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8002cf4:	69fb      	ldr	r3, [r7, #28]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop

08002d00 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8002d04:	f000 fe4e 	bl	80039a4 <AUDIO_IO_DeInit>
}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002d16:	f000 fe3b 	bl	8003990 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fe71 	bl	8003a08 <AUDIO_IO_Read>
 8002d26:	4603      	mov	r3, r0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	6039      	str	r1, [r7, #0]
 8002d3a:	80fb      	strh	r3, [r7, #6]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 f9d1 	bl	80030f0 <wm8994_SetMute>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4413      	add	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002d56:	68fb      	ldr	r3, [r7, #12]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	2101      	movs	r1, #1
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 f9bc 	bl	80030f0 <wm8994_SetMute>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8002d80:	88fb      	ldrh	r3, [r7, #6]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2201      	movs	r2, #1
 8002d86:	2102      	movs	r1, #2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fc17 	bl	80035bc <CODEC_IO_Write>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461a      	mov	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4413      	add	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8002d98:	68fb      	ldr	r3, [r7, #12]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	4603      	mov	r3, r0
 8002daa:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 f99b 	bl	80030f0 <wm8994_SetMute>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	6039      	str	r1, [r7, #0]
 8002dd6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8002ddc:	4b31      	ldr	r3, [pc, #196]	; (8002ea4 <wm8994_Stop+0xd8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d05a      	beq.n	8002e9a <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	2101      	movs	r1, #1
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 f981 	bl	80030f0 <wm8994_SetMute>
 8002dee:	4602      	mov	r2, r0
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d04e      	beq.n	8002e9a <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e04:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fbd7 	bl	80035bc <CODEC_IO_Write>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461a      	mov	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4413      	add	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e20:	f240 4122 	movw	r1, #1058	; 0x422
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fbc9 	bl	80035bc <CODEC_IO_Write>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4413      	add	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2200      	movs	r2, #0
 8002e3a:	212d      	movs	r1, #45	; 0x2d
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fbbd 	bl	80035bc <CODEC_IO_Write>
 8002e42:	4603      	mov	r3, r0
 8002e44:	461a      	mov	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2200      	movs	r2, #0
 8002e52:	212e      	movs	r1, #46	; 0x2e
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fbb1 	bl	80035bc <CODEC_IO_Write>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4413      	add	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2105      	movs	r1, #5
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fba5 	bl	80035bc <CODEC_IO_Write>
 8002e72:	4603      	mov	r3, r0
 8002e74:	461a      	mov	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4413      	add	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8002e7c:	88fb      	ldrh	r3, [r7, #6]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2200      	movs	r2, #0
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fb99 	bl	80035bc <CODEC_IO_Write>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4413      	add	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8002e94:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <wm8994_Stop+0xd8>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20014d48 	.word	0x20014d48

08002ea8 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	460a      	mov	r2, r1
 8002eb2:	80fb      	strh	r3, [r7, #6]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8002ebc:	797b      	ldrb	r3, [r7, #5]
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d80b      	bhi.n	8002eda <wm8994_SetVolume+0x32>
 8002ec2:	797a      	ldrb	r2, [r7, #5]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	019b      	lsls	r3, r3, #6
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	4a86      	ldr	r2, [pc, #536]	; (80030e4 <wm8994_SetVolume+0x23c>)
 8002ecc:	fb82 1203 	smull	r1, r2, r2, r3
 8002ed0:	1152      	asrs	r2, r2, #5
 8002ed2:	17db      	asrs	r3, r3, #31
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	e000      	b.n	8002edc <wm8994_SetVolume+0x34>
 8002eda:	2364      	movs	r3, #100	; 0x64
 8002edc:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8002ede:	4b82      	ldr	r3, [pc, #520]	; (80030e8 <wm8994_SetVolume+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 809b 	beq.w	800301e <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8002ee8:	7afb      	ldrb	r3, [r7, #11]
 8002eea:	2b3e      	cmp	r3, #62	; 0x3e
 8002eec:	d93d      	bls.n	8002f6a <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 f8fc 	bl	80030f0 <wm8994_SetMute>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4413      	add	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f240 127f 	movw	r2, #383	; 0x17f
 8002f08:	211c      	movs	r1, #28
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fb56 	bl	80035bc <CODEC_IO_Write>
 8002f10:	4603      	mov	r3, r0
 8002f12:	461a      	mov	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4413      	add	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	f240 127f 	movw	r2, #383	; 0x17f
 8002f22:	211d      	movs	r1, #29
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fb49 	bl	80035bc <CODEC_IO_Write>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4413      	add	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	f240 127f 	movw	r2, #383	; 0x17f
 8002f3c:	2126      	movs	r1, #38	; 0x26
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fb3c 	bl	80035bc <CODEC_IO_Write>
 8002f44:	4603      	mov	r3, r0
 8002f46:	461a      	mov	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f240 127f 	movw	r2, #383	; 0x17f
 8002f56:	2127      	movs	r1, #39	; 0x27
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fb2f 	bl	80035bc <CODEC_IO_Write>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	461a      	mov	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4413      	add	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	e059      	b.n	800301e <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8002f6a:	797b      	ldrb	r3, [r7, #5]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d109      	bne.n	8002f84 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002f70:	88fb      	ldrh	r3, [r7, #6]
 8002f72:	2101      	movs	r1, #1
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 f8bb 	bl	80030f0 <wm8994_SetMute>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	e04c      	b.n	800301e <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 f8b1 	bl	80030f0 <wm8994_SetMute>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4413      	add	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8002f96:	88fb      	ldrh	r3, [r7, #6]
 8002f98:	b2d8      	uxtb	r0, r3
 8002f9a:	7afb      	ldrb	r3, [r7, #11]
 8002f9c:	b21b      	sxth	r3, r3
 8002f9e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8002fa2:	b21b      	sxth	r3, r3
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	211c      	movs	r1, #28
 8002faa:	f000 fb07 	bl	80035bc <CODEC_IO_Write>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	b2d8      	uxtb	r0, r3
 8002fbc:	7afb      	ldrb	r3, [r7, #11]
 8002fbe:	b21b      	sxth	r3, r3
 8002fc0:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8002fc4:	b21b      	sxth	r3, r3
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	211d      	movs	r1, #29
 8002fcc:	f000 faf6 	bl	80035bc <CODEC_IO_Write>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	b2d8      	uxtb	r0, r3
 8002fde:	7afb      	ldrb	r3, [r7, #11]
 8002fe0:	b21b      	sxth	r3, r3
 8002fe2:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8002fe6:	b21b      	sxth	r3, r3
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	2126      	movs	r1, #38	; 0x26
 8002fee:	f000 fae5 	bl	80035bc <CODEC_IO_Write>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8002ffc:	88fb      	ldrh	r3, [r7, #6]
 8002ffe:	b2d8      	uxtb	r0, r3
 8003000:	7afb      	ldrb	r3, [r7, #11]
 8003002:	b21b      	sxth	r3, r3
 8003004:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8003008:	b21b      	sxth	r3, r3
 800300a:	b29b      	uxth	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	2127      	movs	r1, #39	; 0x27
 8003010:	f000 fad4 	bl	80035bc <CODEC_IO_Write>
 8003014:	4603      	mov	r3, r0
 8003016:	461a      	mov	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 800301e:	4b33      	ldr	r3, [pc, #204]	; (80030ec <wm8994_SetVolume+0x244>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d059      	beq.n	80030da <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8003026:	797b      	ldrb	r3, [r7, #5]
 8003028:	2b63      	cmp	r3, #99	; 0x63
 800302a:	d80c      	bhi.n	8003046 <wm8994_SetVolume+0x19e>
 800302c:	797a      	ldrb	r2, [r7, #5]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	4a2b      	ldr	r2, [pc, #172]	; (80030e4 <wm8994_SetVolume+0x23c>)
 8003038:	fb82 1203 	smull	r1, r2, r2, r3
 800303c:	1152      	asrs	r2, r2, #5
 800303e:	17db      	asrs	r3, r3, #31
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	e000      	b.n	8003048 <wm8994_SetVolume+0x1a0>
 8003046:	23ef      	movs	r3, #239	; 0xef
 8003048:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	b2d8      	uxtb	r0, r3
 800304e:	7afb      	ldrb	r3, [r7, #11]
 8003050:	b21b      	sxth	r3, r3
 8003052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003056:	b21b      	sxth	r3, r3
 8003058:	b29b      	uxth	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003060:	f000 faac 	bl	80035bc <CODEC_IO_Write>
 8003064:	4603      	mov	r3, r0
 8003066:	461a      	mov	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4413      	add	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 800306e:	88fb      	ldrh	r3, [r7, #6]
 8003070:	b2d8      	uxtb	r0, r3
 8003072:	7afb      	ldrb	r3, [r7, #11]
 8003074:	b21b      	sxth	r3, r3
 8003076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800307a:	b21b      	sxth	r3, r3
 800307c:	b29b      	uxth	r3, r3
 800307e:	461a      	mov	r2, r3
 8003080:	f240 4101 	movw	r1, #1025	; 0x401
 8003084:	f000 fa9a 	bl	80035bc <CODEC_IO_Write>
 8003088:	4603      	mov	r3, r0
 800308a:	461a      	mov	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8003092:	88fb      	ldrh	r3, [r7, #6]
 8003094:	b2d8      	uxtb	r0, r3
 8003096:	7afb      	ldrb	r3, [r7, #11]
 8003098:	b21b      	sxth	r3, r3
 800309a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309e:	b21b      	sxth	r3, r3
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	f240 4104 	movw	r1, #1028	; 0x404
 80030a8:	f000 fa88 	bl	80035bc <CODEC_IO_Write>
 80030ac:	4603      	mov	r3, r0
 80030ae:	461a      	mov	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4413      	add	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	b2d8      	uxtb	r0, r3
 80030ba:	7afb      	ldrb	r3, [r7, #11]
 80030bc:	b21b      	sxth	r3, r3
 80030be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c2:	b21b      	sxth	r3, r3
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	f240 4105 	movw	r1, #1029	; 0x405
 80030cc:	f000 fa76 	bl	80035bc <CODEC_IO_Write>
 80030d0:	4603      	mov	r3, r0
 80030d2:	461a      	mov	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4413      	add	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80030da:	68fb      	ldr	r3, [r7, #12]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	51eb851f 	.word	0x51eb851f
 80030e8:	20014d48 	.word	0x20014d48
 80030ec:	20014d4c 	.word	0x20014d4c

080030f0 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	6039      	str	r1, [r7, #0]
 80030fa:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8003100:	4b21      	ldr	r3, [pc, #132]	; (8003188 <wm8994_SetMute+0x98>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d039      	beq.n	800317c <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d11c      	bne.n	8003148 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003116:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fa4e 	bl	80035bc <CODEC_IO_Write>
 8003120:	4603      	mov	r3, r0
 8003122:	461a      	mov	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4413      	add	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003132:	f240 4122 	movw	r1, #1058	; 0x422
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fa40 	bl	80035bc <CODEC_IO_Write>
 800313c:	4603      	mov	r3, r0
 800313e:	461a      	mov	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	e019      	b.n	800317c <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003148:	88fb      	ldrh	r3, [r7, #6]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2210      	movs	r2, #16
 800314e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fa32 	bl	80035bc <CODEC_IO_Write>
 8003158:	4603      	mov	r3, r0
 800315a:	461a      	mov	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2210      	movs	r2, #16
 8003168:	f240 4122 	movw	r1, #1058	; 0x422
 800316c:	4618      	mov	r0, r3
 800316e:	f000 fa25 	bl	80035bc <CODEC_IO_Write>
 8003172:	4603      	mov	r3, r0
 8003174:	461a      	mov	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4413      	add	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 800317c:	68fb      	ldr	r3, [r7, #12]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20014d48 	.word	0x20014d48

0800318c <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	460a      	mov	r2, r1
 8003196:	80fb      	strh	r3, [r7, #6]
 8003198:	4613      	mov	r3, r2
 800319a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80031a0:	797b      	ldrb	r3, [r7, #5]
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	f000 808c 	beq.w	80032c0 <wm8994_SetOutputMode+0x134>
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	f300 80cb 	bgt.w	8003344 <wm8994_SetOutputMode+0x1b8>
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d002      	beq.n	80031b8 <wm8994_SetOutputMode+0x2c>
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d042      	beq.n	800323c <wm8994_SetOutputMode+0xb0>
 80031b6:	e0c5      	b.n	8003344 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f640 420c 	movw	r2, #3084	; 0xc0c
 80031c0:	2105      	movs	r1, #5
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f9fa 	bl	80035bc <CODEC_IO_Write>
 80031c8:	4603      	mov	r3, r0
 80031ca:	461a      	mov	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2200      	movs	r2, #0
 80031d8:	f240 6101 	movw	r1, #1537	; 0x601
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f9ed 	bl	80035bc <CODEC_IO_Write>
 80031e2:	4603      	mov	r3, r0
 80031e4:	461a      	mov	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4413      	add	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2200      	movs	r2, #0
 80031f2:	f240 6102 	movw	r1, #1538	; 0x602
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 f9e0 	bl	80035bc <CODEC_IO_Write>
 80031fc:	4603      	mov	r3, r0
 80031fe:	461a      	mov	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4413      	add	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2202      	movs	r2, #2
 800320c:	f240 6104 	movw	r1, #1540	; 0x604
 8003210:	4618      	mov	r0, r3
 8003212:	f000 f9d3 	bl	80035bc <CODEC_IO_Write>
 8003216:	4603      	mov	r3, r0
 8003218:	461a      	mov	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4413      	add	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2202      	movs	r2, #2
 8003226:	f240 6105 	movw	r1, #1541	; 0x605
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f9c6 	bl	80035bc <CODEC_IO_Write>
 8003230:	4603      	mov	r3, r0
 8003232:	461a      	mov	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4413      	add	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
    break;
 800323a:	e0c5      	b.n	80033c8 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800323c:	88fb      	ldrh	r3, [r7, #6]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	f240 3203 	movw	r2, #771	; 0x303
 8003244:	2105      	movs	r1, #5
 8003246:	4618      	mov	r0, r3
 8003248:	f000 f9b8 	bl	80035bc <CODEC_IO_Write>
 800324c:	4603      	mov	r3, r0
 800324e:	461a      	mov	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2201      	movs	r2, #1
 800325c:	f240 6101 	movw	r1, #1537	; 0x601
 8003260:	4618      	mov	r0, r3
 8003262:	f000 f9ab 	bl	80035bc <CODEC_IO_Write>
 8003266:	4603      	mov	r3, r0
 8003268:	461a      	mov	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4413      	add	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003270:	88fb      	ldrh	r3, [r7, #6]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2201      	movs	r2, #1
 8003276:	f240 6102 	movw	r1, #1538	; 0x602
 800327a:	4618      	mov	r0, r3
 800327c:	f000 f99e 	bl	80035bc <CODEC_IO_Write>
 8003280:	4603      	mov	r3, r0
 8003282:	461a      	mov	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4413      	add	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2200      	movs	r2, #0
 8003290:	f240 6104 	movw	r1, #1540	; 0x604
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f991 	bl	80035bc <CODEC_IO_Write>
 800329a:	4603      	mov	r3, r0
 800329c:	461a      	mov	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4413      	add	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2200      	movs	r2, #0
 80032aa:	f240 6105 	movw	r1, #1541	; 0x605
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f984 	bl	80035bc <CODEC_IO_Write>
 80032b4:	4603      	mov	r3, r0
 80032b6:	461a      	mov	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4413      	add	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
    break;
 80032be:	e083      	b.n	80033c8 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	f640 720f 	movw	r2, #3855	; 0xf0f
 80032c8:	2105      	movs	r1, #5
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f976 	bl	80035bc <CODEC_IO_Write>
 80032d0:	4603      	mov	r3, r0
 80032d2:	461a      	mov	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2201      	movs	r2, #1
 80032e0:	f240 6101 	movw	r1, #1537	; 0x601
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 f969 	bl	80035bc <CODEC_IO_Write>
 80032ea:	4603      	mov	r3, r0
 80032ec:	461a      	mov	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4413      	add	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2201      	movs	r2, #1
 80032fa:	f240 6102 	movw	r1, #1538	; 0x602
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f95c 	bl	80035bc <CODEC_IO_Write>
 8003304:	4603      	mov	r3, r0
 8003306:	461a      	mov	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4413      	add	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2202      	movs	r2, #2
 8003314:	f240 6104 	movw	r1, #1540	; 0x604
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f94f 	bl	80035bc <CODEC_IO_Write>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4413      	add	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2202      	movs	r2, #2
 800332e:	f240 6105 	movw	r1, #1541	; 0x605
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f942 	bl	80035bc <CODEC_IO_Write>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
    break;
 8003342:	e041      	b.n	80033c8 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f240 3203 	movw	r2, #771	; 0x303
 800334c:	2105      	movs	r1, #5
 800334e:	4618      	mov	r0, r3
 8003350:	f000 f934 	bl	80035bc <CODEC_IO_Write>
 8003354:	4603      	mov	r3, r0
 8003356:	461a      	mov	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2201      	movs	r2, #1
 8003364:	f240 6101 	movw	r1, #1537	; 0x601
 8003368:	4618      	mov	r0, r3
 800336a:	f000 f927 	bl	80035bc <CODEC_IO_Write>
 800336e:	4603      	mov	r3, r0
 8003370:	461a      	mov	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4413      	add	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2201      	movs	r2, #1
 800337e:	f240 6102 	movw	r1, #1538	; 0x602
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f91a 	bl	80035bc <CODEC_IO_Write>
 8003388:	4603      	mov	r3, r0
 800338a:	461a      	mov	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4413      	add	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2200      	movs	r2, #0
 8003398:	f240 6104 	movw	r1, #1540	; 0x604
 800339c:	4618      	mov	r0, r3
 800339e:	f000 f90d 	bl	80035bc <CODEC_IO_Write>
 80033a2:	4603      	mov	r3, r0
 80033a4:	461a      	mov	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4413      	add	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80033ac:	88fb      	ldrh	r3, [r7, #6]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2200      	movs	r2, #0
 80033b2:	f240 6105 	movw	r1, #1541	; 0x605
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f900 	bl	80035bc <CODEC_IO_Write>
 80033bc:	4603      	mov	r3, r0
 80033be:	461a      	mov	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4413      	add	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
    break;    
 80033c6:	bf00      	nop
  }  
  return counter;
 80033c8:	68fb      	ldr	r3, [r7, #12]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	6039      	str	r1, [r7, #0]
 80033de:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	4a64      	ldr	r2, [pc, #400]	; (8003578 <wm8994_SetFrequency+0x1a4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d079      	beq.n	80034e0 <wm8994_SetFrequency+0x10c>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	4a62      	ldr	r2, [pc, #392]	; (8003578 <wm8994_SetFrequency+0x1a4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	f200 80ad 	bhi.w	8003550 <wm8994_SetFrequency+0x17c>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d061      	beq.n	80034c4 <wm8994_SetFrequency+0xf0>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8003406:	4293      	cmp	r3, r2
 8003408:	f200 80a2 	bhi.w	8003550 <wm8994_SetFrequency+0x17c>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003412:	4293      	cmp	r3, r2
 8003414:	f000 808e 	beq.w	8003534 <wm8994_SetFrequency+0x160>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800341e:	4293      	cmp	r3, r2
 8003420:	f200 8096 	bhi.w	8003550 <wm8994_SetFrequency+0x17c>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800342a:	d03d      	beq.n	80034a8 <wm8994_SetFrequency+0xd4>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8003432:	f200 808d 	bhi.w	8003550 <wm8994_SetFrequency+0x17c>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	f245 6222 	movw	r2, #22050	; 0x5622
 800343c:	4293      	cmp	r3, r2
 800343e:	d06b      	beq.n	8003518 <wm8994_SetFrequency+0x144>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	f245 6222 	movw	r2, #22050	; 0x5622
 8003446:	4293      	cmp	r3, r2
 8003448:	f200 8082 	bhi.w	8003550 <wm8994_SetFrequency+0x17c>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003452:	d01b      	beq.n	800348c <wm8994_SetFrequency+0xb8>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800345a:	d879      	bhi.n	8003550 <wm8994_SetFrequency+0x17c>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003462:	d005      	beq.n	8003470 <wm8994_SetFrequency+0x9c>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	f642 3211 	movw	r2, #11025	; 0x2b11
 800346a:	4293      	cmp	r3, r2
 800346c:	d046      	beq.n	80034fc <wm8994_SetFrequency+0x128>
 800346e:	e06f      	b.n	8003550 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2203      	movs	r2, #3
 8003476:	f44f 7104 	mov.w	r1, #528	; 0x210
 800347a:	4618      	mov	r0, r3
 800347c:	f000 f89e 	bl	80035bc <CODEC_IO_Write>
 8003480:	4603      	mov	r3, r0
 8003482:	461a      	mov	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4413      	add	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
    break;
 800348a:	e06f      	b.n	800356c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800348c:	88fb      	ldrh	r3, [r7, #6]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2233      	movs	r2, #51	; 0x33
 8003492:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003496:	4618      	mov	r0, r3
 8003498:	f000 f890 	bl	80035bc <CODEC_IO_Write>
 800349c:	4603      	mov	r3, r0
 800349e:	461a      	mov	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]
    break;
 80034a6:	e061      	b.n	800356c <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2263      	movs	r2, #99	; 0x63
 80034ae:	f44f 7104 	mov.w	r1, #528	; 0x210
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f882 	bl	80035bc <CODEC_IO_Write>
 80034b8:	4603      	mov	r3, r0
 80034ba:	461a      	mov	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4413      	add	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
    break;
 80034c2:	e053      	b.n	800356c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2283      	movs	r2, #131	; 0x83
 80034ca:	f44f 7104 	mov.w	r1, #528	; 0x210
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 f874 	bl	80035bc <CODEC_IO_Write>
 80034d4:	4603      	mov	r3, r0
 80034d6:	461a      	mov	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4413      	add	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
    break;
 80034de:	e045      	b.n	800356c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80034e0:	88fb      	ldrh	r3, [r7, #6]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	22a3      	movs	r2, #163	; 0xa3
 80034e6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f866 	bl	80035bc <CODEC_IO_Write>
 80034f0:	4603      	mov	r3, r0
 80034f2:	461a      	mov	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
    break;
 80034fa:	e037      	b.n	800356c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2213      	movs	r2, #19
 8003502:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f858 	bl	80035bc <CODEC_IO_Write>
 800350c:	4603      	mov	r3, r0
 800350e:	461a      	mov	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4413      	add	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
    break;
 8003516:	e029      	b.n	800356c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2243      	movs	r2, #67	; 0x43
 800351e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f84a 	bl	80035bc <CODEC_IO_Write>
 8003528:	4603      	mov	r3, r0
 800352a:	461a      	mov	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
    break;
 8003532:	e01b      	b.n	800356c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2273      	movs	r2, #115	; 0x73
 800353a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f83c 	bl	80035bc <CODEC_IO_Write>
 8003544:	4603      	mov	r3, r0
 8003546:	461a      	mov	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4413      	add	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
    break; 
 800354e:	e00d      	b.n	800356c <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003550:	88fb      	ldrh	r3, [r7, #6]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2283      	movs	r2, #131	; 0x83
 8003556:	f44f 7104 	mov.w	r1, #528	; 0x210
 800355a:	4618      	mov	r0, r3
 800355c:	f000 f82e 	bl	80035bc <CODEC_IO_Write>
 8003560:	4603      	mov	r3, r0
 8003562:	461a      	mov	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4413      	add	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
    break; 
 800356a:	bf00      	nop
  }
  return counter;
 800356c:	68fb      	ldr	r3, [r7, #12]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	00017700 	.word	0x00017700

0800357c <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2200      	movs	r2, #0
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f000 f812 	bl	80035bc <CODEC_IO_Write>
 8003598:	4603      	mov	r3, r0
 800359a:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <wm8994_Reset+0x38>)
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 80035a2:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <wm8994_Reset+0x3c>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]

  return counter;
 80035a8:	68fb      	ldr	r3, [r7, #12]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20014d48 	.word	0x20014d48
 80035b8:	20014d4c 	.word	0x20014d4c

080035bc <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]
 80035c6:	460b      	mov	r3, r1
 80035c8:	80bb      	strh	r3, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80035d2:	887a      	ldrh	r2, [r7, #2]
 80035d4:	88b9      	ldrh	r1, [r7, #4]
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 f9eb 	bl	80039b4 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	b2db      	uxtb	r3, r3
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	; 0x28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d122      	bne.n	8003642 <BSP_LED_Init+0x56>
  {
    gpio_led = LED1_GPIO_PORT;
 80035fc:	4b13      	ldr	r3, [pc, #76]	; (800364c <BSP_LED_Init+0x60>)
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 8003600:	4b13      	ldr	r3, [pc, #76]	; (8003650 <BSP_LED_Init+0x64>)
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	4a12      	ldr	r2, [pc, #72]	; (8003650 <BSP_LED_Init+0x64>)
 8003606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360a:	6313      	str	r3, [r2, #48]	; 0x30
 800360c:	4b10      	ldr	r3, [pc, #64]	; (8003650 <BSP_LED_Init+0x64>)
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin = GPIO_PIN[Led];
 8003618:	2302      	movs	r3, #2
 800361a:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800361c:	2301      	movs	r3, #1
 800361e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8003620:	2301      	movs	r3, #1
 8003622:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003624:	2303      	movs	r3, #3
 8003626:	61fb      	str	r3, [r7, #28]
  
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8003628:	f107 0310 	add.w	r3, r7, #16
 800362c:	4619      	mov	r1, r3
 800362e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003630:	f004 fc06 	bl	8007e40 <HAL_GPIO_Init>
    
    /* By default, turn off LED */
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8003634:	2302      	movs	r3, #2
 8003636:	b29b      	uxth	r3, r3
 8003638:	2200      	movs	r2, #0
 800363a:	4619      	mov	r1, r3
 800363c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800363e:	f004 fecf 	bl	80083e0 <HAL_GPIO_WritePin>
  }
}
 8003642:	bf00      	nop
 8003644:	3728      	adds	r7, #40	; 0x28
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40022000 	.word	0x40022000
 8003650:	40023800 	.word	0x40023800

08003654 <BSP_LED_On>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Switch On LED connected to GPIO */
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d108      	bne.n	8003676 <BSP_LED_On+0x22>
  {
    gpio_led = LED1_GPIO_PORT;
 8003664:	4b06      	ldr	r3, [pc, #24]	; (8003680 <BSP_LED_On+0x2c>)
 8003666:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_SET);
 8003668:	2302      	movs	r3, #2
 800366a:	b29b      	uxth	r3, r3
 800366c:	2201      	movs	r2, #1
 800366e:	4619      	mov	r1, r3
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f004 feb5 	bl	80083e0 <HAL_GPIO_WritePin>
  }
}
 8003676:	bf00      	nop
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40022000 	.word	0x40022000

08003684 <BSP_LED_Toggle>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Toggle LED connected to GPIO */
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d107      	bne.n	80036a4 <BSP_LED_Toggle+0x20>
  {
    gpio_led = LED1_GPIO_PORT;
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <BSP_LED_Toggle+0x28>)
 8003696:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_TogglePin(gpio_led, GPIO_PIN[Led]);
 8003698:	2302      	movs	r3, #2
 800369a:	b29b      	uxth	r3, r3
 800369c:	4619      	mov	r1, r3
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f004 feb7 	bl	8008412 <HAL_GPIO_TogglePin>
  }
}
 80036a4:	bf00      	nop
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40022000 	.word	0x40022000

080036b0 <BSP_PB_GetState>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	4a07      	ldr	r2, [pc, #28]	; (80036dc <BSP_PB_GetState+0x2c>)
 80036be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	4906      	ldr	r1, [pc, #24]	; (80036e0 <BSP_PB_GetState+0x30>)
 80036c6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80036ca:	4619      	mov	r1, r3
 80036cc:	4610      	mov	r0, r2
 80036ce:	f004 fe6f 	bl	80083b0 <HAL_GPIO_ReadPin>
 80036d2:	4603      	mov	r3, r0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	200002b4 	.word	0x200002b4
 80036e0:	0800ca08 	.word	0x0800ca08

080036e4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08c      	sub	sp, #48	; 0x30
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a51      	ldr	r2, [pc, #324]	; (8003834 <I2Cx_MspInit+0x150>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d14d      	bne.n	8003790 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80036f4:	4b50      	ldr	r3, [pc, #320]	; (8003838 <I2Cx_MspInit+0x154>)
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	4a4f      	ldr	r2, [pc, #316]	; (8003838 <I2Cx_MspInit+0x154>)
 80036fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003700:	4b4d      	ldr	r3, [pc, #308]	; (8003838 <I2Cx_MspInit+0x154>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003710:	2312      	movs	r3, #18
 8003712:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003714:	2300      	movs	r3, #0
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003718:	2302      	movs	r3, #2
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800371c:	2304      	movs	r3, #4
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003720:	f107 031c 	add.w	r3, r7, #28
 8003724:	4619      	mov	r1, r3
 8003726:	4845      	ldr	r0, [pc, #276]	; (800383c <I2Cx_MspInit+0x158>)
 8003728:	f004 fb8a 	bl	8007e40 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800372c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003730:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003732:	f107 031c 	add.w	r3, r7, #28
 8003736:	4619      	mov	r1, r3
 8003738:	4840      	ldr	r0, [pc, #256]	; (800383c <I2Cx_MspInit+0x158>)
 800373a:	f004 fb81 	bl	8007e40 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800373e:	4b3e      	ldr	r3, [pc, #248]	; (8003838 <I2Cx_MspInit+0x154>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	4a3d      	ldr	r2, [pc, #244]	; (8003838 <I2Cx_MspInit+0x154>)
 8003744:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003748:	6413      	str	r3, [r2, #64]	; 0x40
 800374a:	4b3b      	ldr	r3, [pc, #236]	; (8003838 <I2Cx_MspInit+0x154>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003756:	4b38      	ldr	r3, [pc, #224]	; (8003838 <I2Cx_MspInit+0x154>)
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	4a37      	ldr	r2, [pc, #220]	; (8003838 <I2Cx_MspInit+0x154>)
 800375c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003760:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003762:	4b35      	ldr	r3, [pc, #212]	; (8003838 <I2Cx_MspInit+0x154>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	4a34      	ldr	r2, [pc, #208]	; (8003838 <I2Cx_MspInit+0x154>)
 8003768:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800376c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800376e:	2200      	movs	r2, #0
 8003770:	210f      	movs	r1, #15
 8003772:	2048      	movs	r0, #72	; 0x48
 8003774:	f003 fb97 	bl	8006ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003778:	2048      	movs	r0, #72	; 0x48
 800377a:	f003 fbb0 	bl	8006ede <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800377e:	2200      	movs	r2, #0
 8003780:	210f      	movs	r1, #15
 8003782:	2049      	movs	r0, #73	; 0x49
 8003784:	f003 fb8f 	bl	8006ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003788:	2049      	movs	r0, #73	; 0x49
 800378a:	f003 fba8 	bl	8006ede <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800378e:	e04d      	b.n	800382c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003790:	4b29      	ldr	r3, [pc, #164]	; (8003838 <I2Cx_MspInit+0x154>)
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	4a28      	ldr	r2, [pc, #160]	; (8003838 <I2Cx_MspInit+0x154>)
 8003796:	f043 0302 	orr.w	r3, r3, #2
 800379a:	6313      	str	r3, [r2, #48]	; 0x30
 800379c:	4b26      	ldr	r3, [pc, #152]	; (8003838 <I2Cx_MspInit+0x154>)
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80037a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ac:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80037ae:	2312      	movs	r3, #18
 80037b0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80037b6:	2302      	movs	r3, #2
 80037b8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80037ba:	2304      	movs	r3, #4
 80037bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80037be:	f107 031c 	add.w	r3, r7, #28
 80037c2:	4619      	mov	r1, r3
 80037c4:	481e      	ldr	r0, [pc, #120]	; (8003840 <I2Cx_MspInit+0x15c>)
 80037c6:	f004 fb3b 	bl	8007e40 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80037ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80037d0:	f107 031c 	add.w	r3, r7, #28
 80037d4:	4619      	mov	r1, r3
 80037d6:	481a      	ldr	r0, [pc, #104]	; (8003840 <I2Cx_MspInit+0x15c>)
 80037d8:	f004 fb32 	bl	8007e40 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80037dc:	4b16      	ldr	r3, [pc, #88]	; (8003838 <I2Cx_MspInit+0x154>)
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	4a15      	ldr	r2, [pc, #84]	; (8003838 <I2Cx_MspInit+0x154>)
 80037e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037e6:	6413      	str	r3, [r2, #64]	; 0x40
 80037e8:	4b13      	ldr	r3, [pc, #76]	; (8003838 <I2Cx_MspInit+0x154>)
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80037f4:	4b10      	ldr	r3, [pc, #64]	; (8003838 <I2Cx_MspInit+0x154>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	4a0f      	ldr	r2, [pc, #60]	; (8003838 <I2Cx_MspInit+0x154>)
 80037fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037fe:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003800:	4b0d      	ldr	r3, [pc, #52]	; (8003838 <I2Cx_MspInit+0x154>)
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	4a0c      	ldr	r2, [pc, #48]	; (8003838 <I2Cx_MspInit+0x154>)
 8003806:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800380a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800380c:	2200      	movs	r2, #0
 800380e:	210f      	movs	r1, #15
 8003810:	201f      	movs	r0, #31
 8003812:	f003 fb48 	bl	8006ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003816:	201f      	movs	r0, #31
 8003818:	f003 fb61 	bl	8006ede <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800381c:	2200      	movs	r2, #0
 800381e:	210f      	movs	r1, #15
 8003820:	2020      	movs	r0, #32
 8003822:	f003 fb40 	bl	8006ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003826:	2020      	movs	r0, #32
 8003828:	f003 fb59 	bl	8006ede <HAL_NVIC_EnableIRQ>
}
 800382c:	bf00      	nop
 800382e:	3730      	adds	r7, #48	; 0x30
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20014d50 	.word	0x20014d50
 8003838:	40023800 	.word	0x40023800
 800383c:	40021c00 	.word	0x40021c00
 8003840:	40020400 	.word	0x40020400

08003844 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f005 f921 	bl	8008a94 <HAL_I2C_GetState>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d125      	bne.n	80038a4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a14      	ldr	r2, [pc, #80]	; (80038ac <I2Cx_Init+0x68>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d103      	bne.n	8003868 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a13      	ldr	r2, [pc, #76]	; (80038b0 <I2Cx_Init+0x6c>)
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	e002      	b.n	800386e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a12      	ldr	r2, [pc, #72]	; (80038b4 <I2Cx_Init+0x70>)
 800386c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a11      	ldr	r2, [pc, #68]	; (80038b8 <I2Cx_Init+0x74>)
 8003872:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ff23 	bl	80036e4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f004 fdf6 	bl	8008490 <HAL_I2C_Init>
  }
}
 80038a4:	bf00      	nop
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20014d50 	.word	0x20014d50
 80038b0:	40005c00 	.word	0x40005c00
 80038b4:	40005400 	.word	0x40005400
 80038b8:	40912732 	.word	0x40912732

080038bc <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08a      	sub	sp, #40	; 0x28
 80038c0:	af04      	add	r7, sp, #16
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	4608      	mov	r0, r1
 80038c6:	4611      	mov	r1, r2
 80038c8:	461a      	mov	r2, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	72fb      	strb	r3, [r7, #11]
 80038ce:	460b      	mov	r3, r1
 80038d0:	813b      	strh	r3, [r7, #8]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80038da:	7afb      	ldrb	r3, [r7, #11]
 80038dc:	b299      	uxth	r1, r3
 80038de:	88f8      	ldrh	r0, [r7, #6]
 80038e0:	893a      	ldrh	r2, [r7, #8]
 80038e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038e6:	9302      	str	r3, [sp, #8]
 80038e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038ea:	9301      	str	r3, [sp, #4]
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	4603      	mov	r3, r0
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f004 ffb4 	bl	8008860 <HAL_I2C_Mem_Read>
 80038f8:	4603      	mov	r3, r0
 80038fa:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d004      	beq.n	800390c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003902:	7afb      	ldrb	r3, [r7, #11]
 8003904:	4619      	mov	r1, r3
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 f832 	bl	8003970 <I2Cx_Error>
  }
  return status;    
 800390c:	7dfb      	ldrb	r3, [r7, #23]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b08a      	sub	sp, #40	; 0x28
 800391a:	af04      	add	r7, sp, #16
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	4608      	mov	r0, r1
 8003920:	4611      	mov	r1, r2
 8003922:	461a      	mov	r2, r3
 8003924:	4603      	mov	r3, r0
 8003926:	72fb      	strb	r3, [r7, #11]
 8003928:	460b      	mov	r3, r1
 800392a:	813b      	strh	r3, [r7, #8]
 800392c:	4613      	mov	r3, r2
 800392e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003934:	7afb      	ldrb	r3, [r7, #11]
 8003936:	b299      	uxth	r1, r3
 8003938:	88f8      	ldrh	r0, [r7, #6]
 800393a:	893a      	ldrh	r2, [r7, #8]
 800393c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003940:	9302      	str	r3, [sp, #8]
 8003942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	4603      	mov	r3, r0
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f004 fe73 	bl	8008638 <HAL_I2C_Mem_Write>
 8003952:	4603      	mov	r3, r0
 8003954:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003956:	7dfb      	ldrb	r3, [r7, #23]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d004      	beq.n	8003966 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800395c:	7afb      	ldrb	r3, [r7, #11]
 800395e:	4619      	mov	r1, r3
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f805 	bl	8003970 <I2Cx_Error>
  }
  return status;
 8003966:	7dfb      	ldrb	r3, [r7, #23]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f004 fe17 	bl	80085b0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ff5e 	bl	8003844 <I2Cx_Init>
}
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003994:	4802      	ldr	r0, [pc, #8]	; (80039a0 <AUDIO_IO_Init+0x10>)
 8003996:	f7ff ff55 	bl	8003844 <I2Cx_Init>
}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20014d50 	.word	0x20014d50

080039a4 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
	...

080039b4 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	4603      	mov	r3, r0
 80039bc:	71fb      	strb	r3, [r7, #7]
 80039be:	460b      	mov	r3, r1
 80039c0:	80bb      	strh	r3, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 80039c6:	887b      	ldrh	r3, [r7, #2]
 80039c8:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80039ca:	89fb      	ldrh	r3, [r7, #14]
 80039cc:	0a1b      	lsrs	r3, r3, #8
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80039d2:	89fb      	ldrh	r3, [r7, #14]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	b21a      	sxth	r2, r3
 80039da:	887b      	ldrh	r3, [r7, #2]
 80039dc:	b21b      	sxth	r3, r3
 80039de:	4313      	orrs	r3, r2
 80039e0:	b21b      	sxth	r3, r3
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80039e6:	88ba      	ldrh	r2, [r7, #4]
 80039e8:	79f9      	ldrb	r1, [r7, #7]
 80039ea:	2302      	movs	r3, #2
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	1cbb      	adds	r3, r7, #2
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	2302      	movs	r3, #2
 80039f4:	4803      	ldr	r0, [pc, #12]	; (8003a04 <AUDIO_IO_Write+0x50>)
 80039f6:	f7ff ff8e 	bl	8003916 <I2Cx_WriteMultiple>
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20014d50 	.word	0x20014d50

08003a08 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	4603      	mov	r3, r0
 8003a10:	460a      	mov	r2, r1
 8003a12:	71fb      	strb	r3, [r7, #7]
 8003a14:	4613      	mov	r3, r2
 8003a16:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	81bb      	strh	r3, [r7, #12]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8003a20:	88ba      	ldrh	r2, [r7, #4]
 8003a22:	79f9      	ldrb	r1, [r7, #7]
 8003a24:	2302      	movs	r3, #2
 8003a26:	9301      	str	r3, [sp, #4]
 8003a28:	f107 030c 	add.w	r3, r7, #12
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	2302      	movs	r3, #2
 8003a30:	480a      	ldr	r0, [pc, #40]	; (8003a5c <AUDIO_IO_Read+0x54>)
 8003a32:	f7ff ff43 	bl	80038bc <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8003a36:	89bb      	ldrh	r3, [r7, #12]
 8003a38:	0a1b      	lsrs	r3, r3, #8
 8003a3a:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8003a3c:	89bb      	ldrh	r3, [r7, #12]
 8003a3e:	021b      	lsls	r3, r3, #8
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	b21a      	sxth	r2, r3
 8003a44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	b21b      	sxth	r3, r3
 8003a4c:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8003a4e:	89fb      	ldrh	r3, [r7, #14]
 8003a50:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8003a52:	89bb      	ldrh	r3, [r7, #12]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	20014d50 	.word	0x20014d50

08003a60 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f003 f8f9 	bl	8006c60 <HAL_Delay>
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003a7c:	4802      	ldr	r0, [pc, #8]	; (8003a88 <TS_IO_Init+0x10>)
 8003a7e:	f7ff fee1 	bl	8003844 <I2Cx_Init>
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20014d50 	.word	0x20014d50

08003a8c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	4603      	mov	r3, r0
 8003a94:	71fb      	strb	r3, [r7, #7]
 8003a96:	460b      	mov	r3, r1
 8003a98:	71bb      	strb	r3, [r7, #6]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003a9e:	79bb      	ldrb	r3, [r7, #6]
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	79f9      	ldrb	r1, [r7, #7]
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	9301      	str	r3, [sp, #4]
 8003aa8:	1d7b      	adds	r3, r7, #5
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	2301      	movs	r3, #1
 8003aae:	4803      	ldr	r0, [pc, #12]	; (8003abc <TS_IO_Write+0x30>)
 8003ab0:	f7ff ff31 	bl	8003916 <I2Cx_WriteMultiple>
}
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20014d50 	.word	0x20014d50

08003ac0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	460a      	mov	r2, r1
 8003aca:	71fb      	strb	r3, [r7, #7]
 8003acc:	4613      	mov	r3, r2
 8003ace:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003ad4:	79bb      	ldrb	r3, [r7, #6]
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	79f9      	ldrb	r1, [r7, #7]
 8003ada:	2301      	movs	r3, #1
 8003adc:	9301      	str	r3, [sp, #4]
 8003ade:	f107 030f 	add.w	r3, r7, #15
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	4804      	ldr	r0, [pc, #16]	; (8003af8 <TS_IO_Read+0x38>)
 8003ae8:	f7ff fee8 	bl	80038bc <I2Cx_ReadMultiple>

  return read_value;
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20014d50 	.word	0x20014d50

08003afc <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f003 f8ab 	bl	8006c60 <HAL_Delay>
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <BSP_AUDIO_OUT_Init>:
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @note   The I2S PLL input clock must be done in the user application.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{ 
 8003b14:	b590      	push	{r4, r7, lr}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	603a      	str	r2, [r7, #0]
 8003b1e:	80fb      	strh	r3, [r7, #6]
 8003b20:	460b      	mov	r3, r1
 8003b22:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
  uint32_t deviceid = 0x00;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60bb      	str	r3, [r7, #8]

  /* Disable SAI */
  SAIx_Out_DeInit();
 8003b2c:	f000 fab4 	bl	8004098 <SAIx_Out_DeInit>

  /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8003b30:	2200      	movs	r2, #0
 8003b32:	6839      	ldr	r1, [r7, #0]
 8003b34:	481c      	ldr	r0, [pc, #112]	; (8003ba8 <BSP_AUDIO_OUT_Init+0x94>)
 8003b36:	f000 fa0d 	bl	8003f54 <BSP_AUDIO_OUT_ClockConfig>
 
  /* SAI data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003b3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <BSP_AUDIO_OUT_Init+0x94>)
 8003b3c:	4a1b      	ldr	r2, [pc, #108]	; (8003bac <BSP_AUDIO_OUT_Init+0x98>)
 8003b3e:	601a      	str	r2, [r3, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8003b40:	4819      	ldr	r0, [pc, #100]	; (8003ba8 <BSP_AUDIO_OUT_Init+0x94>)
 8003b42:	f007 fba1 	bl	800b288 <HAL_SAI_GetState>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d103      	bne.n	8003b54 <BSP_AUDIO_OUT_Init+0x40>
  {
    /* Init the SAI MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	4816      	ldr	r0, [pc, #88]	; (8003ba8 <BSP_AUDIO_OUT_Init+0x94>)
 8003b50:	f000 f8e4 	bl	8003d1c <BSP_AUDIO_OUT_MspInit>
  }
  SAIx_Out_Init(AudioFreq);
 8003b54:	6838      	ldr	r0, [r7, #0]
 8003b56:	f000 fa41 	bl	8003fdc <SAIx_Out_Init>

  /* wm8994 codec initialization */
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8003b5a:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <BSP_AUDIO_OUT_Init+0x9c>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2034      	movs	r0, #52	; 0x34
 8003b60:	4798      	blx	r3
 8003b62:	60b8      	str	r0, [r7, #8]
  
  if((deviceid) == WM8994_ID)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f648 1294 	movw	r2, #35220	; 0x8994
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d109      	bne.n	8003b82 <BSP_AUDIO_OUT_Init+0x6e>
  {  
    /* Reset the Codec Registers */
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8003b6e:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <BSP_AUDIO_OUT_Init+0x9c>)
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	2034      	movs	r0, #52	; 0x34
 8003b74:	4798      	blx	r3
    /* Initialize the audio driver structure */
    audio_drv = &wm8994_drv; 
 8003b76:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <BSP_AUDIO_OUT_Init+0xa0>)
 8003b78:	4a0d      	ldr	r2, [pc, #52]	; (8003bb0 <BSP_AUDIO_OUT_Init+0x9c>)
 8003b7a:	601a      	str	r2, [r3, #0]
    ret = AUDIO_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	73fb      	strb	r3, [r7, #15]
 8003b80:	e001      	b.n	8003b86 <BSP_AUDIO_OUT_Init+0x72>
  }
  else
  {
    ret = AUDIO_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d107      	bne.n	8003b9c <BSP_AUDIO_OUT_Init+0x88>
  {
    /* Initialize the codec internal registers */
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <BSP_AUDIO_OUT_Init+0xa0>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681c      	ldr	r4, [r3, #0]
 8003b92:	797a      	ldrb	r2, [r7, #5]
 8003b94:	88f9      	ldrh	r1, [r7, #6]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2034      	movs	r0, #52	; 0x34
 8003b9a:	47a0      	blx	r4
  }
 
  return ret;
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd90      	pop	{r4, r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20014da8 	.word	0x20014da8
 8003bac:	40015c04 	.word	0x40015c04
 8003bb0:	20000280 	.word	0x20000280
 8003bb4:	20014da4 	.word	0x20014da4

08003bb8 <BSP_AUDIO_OUT_Play>:
  * @param  Size: Number of audio data in BYTES unit.
  *         In memory, first element is for left channel, second element is for right channel
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8003bc2:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <BSP_AUDIO_OUT_Play+0x4c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	b292      	uxth	r2, r2
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	2034      	movs	r0, #52	; 0x34
 8003bd0:	4798      	blx	r3
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <BSP_AUDIO_OUT_Play+0x24>
  {  
    return AUDIO_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e00f      	b.n	8003bfc <BSP_AUDIO_OUT_Play+0x44>
  }
  else
  {
    /* Update the Media layer and enable it for play */  
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003be2:	d203      	bcs.n	8003bec <BSP_AUDIO_OUT_Play+0x34>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	e001      	b.n	8003bf0 <BSP_AUDIO_OUT_Play+0x38>
 8003bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4804      	ldr	r0, [pc, #16]	; (8003c08 <BSP_AUDIO_OUT_Play+0x50>)
 8003bf6:	f007 fa09 	bl	800b00c <HAL_SAI_Transmit_DMA>
    
    return AUDIO_OK;
 8003bfa:	2300      	movs	r3, #0
  }
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20014da4 	.word	0x20014da4
 8003c08:	20014da8 	.word	0x20014da8

08003c0c <BSP_AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Stop(uint32_t Option)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_out_sai);
 8003c14:	480c      	ldr	r0, [pc, #48]	; (8003c48 <BSP_AUDIO_OUT_Stop+0x3c>)
 8003c16:	f007 f986 	bl	800af26 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8003c1a:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <BSP_AUDIO_OUT_Stop+0x40>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	2034      	movs	r0, #52	; 0x34
 8003c24:	4798      	blx	r3
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <BSP_AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e006      	b.n	8003c3e <BSP_AUDIO_OUT_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d102      	bne.n	8003c3c <BSP_AUDIO_OUT_Stop+0x30>
    { 
      /* Wait at least 100us */
      HAL_Delay(1);
 8003c36:	2001      	movs	r0, #1
 8003c38:	f003 f812 	bl	8006c60 <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8003c3c:	2300      	movs	r3, #0
  }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20014da8 	.word	0x20014da8
 8003c4c:	20014da4 	.word	0x20014da4

08003c50 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio frame slot.
  * @retval None
  */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot)
{ 
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8003c58:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c66:	601a      	str	r2, [r3, #0]
  
  /* Update the SAI audio frame slot configuration */
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8003c68:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6613      	str	r3, [r2, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 8003c6e:	4807      	ldr	r0, [pc, #28]	; (8003c8c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003c70:	f006 ff92 	bl	800ab98 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003c82:	601a      	str	r2, [r3, #0]
}
 8003c84:	bf00      	nop
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20014da8 	.word	0x20014da8

08003c90 <BSP_AUDIO_OUT_DeInit>:
/**
  * @brief  Deinit the audio peripherals.
  * @retval None
  */
void BSP_AUDIO_OUT_DeInit(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  SAIx_Out_DeInit();
 8003c94:	f000 fa00 	bl	8004098 <SAIx_Out_DeInit>
  /* DeInit the SAI MSP : this __weak function can be rewritten by the application */
  BSP_AUDIO_OUT_MspDeInit(&haudio_out_sai, NULL);
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4802      	ldr	r0, [pc, #8]	; (8003ca4 <BSP_AUDIO_OUT_DeInit+0x14>)
 8003c9c:	f000 f914 	bl	8003ec8 <BSP_AUDIO_OUT_MspDeInit>
}
 8003ca0:	bf00      	nop
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20014da8 	.word	0x20014da8

08003ca8 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8003cb0:	f7fd fbda 	bl	8001468 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8003cc4:	f7fd fbdc 	bl	8001480 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8003cc8:	bf00      	nop
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8003cd8:	480e      	ldr	r0, [pc, #56]	; (8003d14 <HAL_SAI_ErrorCallback+0x44>)
 8003cda:	f007 fad5 	bl	800b288 <HAL_SAI_GetState>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8003ce2:	480d      	ldr	r0, [pc, #52]	; (8003d18 <HAL_SAI_ErrorCallback+0x48>)
 8003ce4:	f007 fad0 	bl	800b288 <HAL_SAI_GetState>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d002      	beq.n	8003cf8 <HAL_SAI_ErrorCallback+0x28>
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	2b12      	cmp	r3, #18
 8003cf6:	d101      	bne.n	8003cfc <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8003cf8:	f7fd fbce 	bl	8001498 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8003cfc:	7bbb      	ldrb	r3, [r7, #14]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d002      	beq.n	8003d08 <HAL_SAI_ErrorCallback+0x38>
 8003d02:	7bbb      	ldrb	r3, [r7, #14]
 8003d04:	2b22      	cmp	r3, #34	; 0x22
 8003d06:	d101      	bne.n	8003d0c <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8003d08:	f7fd fb94 	bl	8001434 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20014da8 	.word	0x20014da8
 8003d18:	20014e2c 	.word	0x20014e2c

08003d1c <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08c      	sub	sp, #48	; 0x30
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8003d26:	4b63      	ldr	r3, [pc, #396]	; (8003eb4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	4a62      	ldr	r2, [pc, #392]	; (8003eb4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003d2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d30:	6453      	str	r3, [r2, #68]	; 0x44
 8003d32:	4b60      	ldr	r3, [pc, #384]	; (8003eb4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8003d3e:	4b5d      	ldr	r3, [pc, #372]	; (8003eb4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	4a5c      	ldr	r2, [pc, #368]	; (8003eb4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d48:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4a:	4b5a      	ldr	r3, [pc, #360]	; (8003eb4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8003d56:	4b57      	ldr	r3, [pc, #348]	; (8003eb4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	4a56      	ldr	r2, [pc, #344]	; (8003eb4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d60:	6313      	str	r3, [r2, #48]	; 0x30
 8003d62:	4b54      	ldr	r3, [pc, #336]	; (8003eb4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8003d6e:	4b51      	ldr	r3, [pc, #324]	; (8003eb4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	4a50      	ldr	r2, [pc, #320]	; (8003eb4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d78:	6313      	str	r3, [r2, #48]	; 0x30
 8003d7a:	4b4e      	ldr	r3, [pc, #312]	; (8003eb4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8003d86:	2380      	movs	r3, #128	; 0x80
 8003d88:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003d92:	2303      	movs	r3, #3
 8003d94:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003d96:	230a      	movs	r3, #10
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8003d9a:	f107 031c 	add.w	r3, r7, #28
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4845      	ldr	r0, [pc, #276]	; (8003eb8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003da2:	f004 f84d 	bl	8007e40 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8003da6:	2320      	movs	r3, #32
 8003da8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003daa:	2302      	movs	r3, #2
 8003dac:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003db2:	2303      	movs	r3, #3
 8003db4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8003db6:	230a      	movs	r3, #10
 8003db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003dba:	f107 031c 	add.w	r3, r7, #28
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	483d      	ldr	r0, [pc, #244]	; (8003eb8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003dc2:	f004 f83d 	bl	8007e40 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8003dc6:	2340      	movs	r3, #64	; 0x40
 8003dc8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003dca:	2302      	movs	r3, #2
 8003dcc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003dd6:	230a      	movs	r3, #10
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8003dda:	f107 031c 	add.w	r3, r7, #28
 8003dde:	4619      	mov	r1, r3
 8003de0:	4835      	ldr	r0, [pc, #212]	; (8003eb8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003de2:	f004 f82d 	bl	8007e40 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8003de6:	2310      	movs	r3, #16
 8003de8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003dea:	2302      	movs	r3, #2
 8003dec:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003df2:	2303      	movs	r3, #3
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8003df6:	230a      	movs	r3, #10
 8003df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8003dfa:	f107 031c 	add.w	r3, r7, #28
 8003dfe:	4619      	mov	r1, r3
 8003e00:	482d      	ldr	r0, [pc, #180]	; (8003eb8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003e02:	f004 f81d 	bl	8007e40 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8003e06:	4b2b      	ldr	r3, [pc, #172]	; (8003eb4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	4a2a      	ldr	r2, [pc, #168]	; (8003eb4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e10:	6313      	str	r3, [r2, #48]	; 0x30
 8003e12:	4b28      	ldr	r3, [pc, #160]	; (8003eb4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a26      	ldr	r2, [pc, #152]	; (8003ebc <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d138      	bne.n	8003e9a <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8003e28:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003e2a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003e2e:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003e30:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003e32:	2240      	movs	r2, #64	; 0x40
 8003e34:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003e36:	4b22      	ldr	r3, [pc, #136]	; (8003ec0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8003e3c:	4b20      	ldr	r3, [pc, #128]	; (8003ec0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e42:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8003e44:	4b1e      	ldr	r3, [pc, #120]	; (8003ec0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003e46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e4a:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8003e4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003e4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e52:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8003e54:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e5a:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8003e5c:	4b18      	ldr	r3, [pc, #96]	; (8003ec0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003e5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e62:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8003e64:	4b16      	ldr	r3, [pc, #88]	; (8003ec0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003e66:	2204      	movs	r2, #4
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003e6a:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003e70:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003e76:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8003e7c:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003e7e:	4a11      	ldr	r2, [pc, #68]	; (8003ec4 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8003e80:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a0e      	ldr	r2, [pc, #56]	; (8003ec0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003e86:	66da      	str	r2, [r3, #108]	; 0x6c
 8003e88:	4a0d      	ldr	r2, [pc, #52]	; (8003ec0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8003e8e:	480c      	ldr	r0, [pc, #48]	; (8003ec0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003e90:	f003 f986 	bl	80071a0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8003e94:	480a      	ldr	r0, [pc, #40]	; (8003ec0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003e96:	f003 f8d5 	bl	8007044 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	210e      	movs	r1, #14
 8003e9e:	203c      	movs	r0, #60	; 0x3c
 8003ea0:	f003 f801 	bl	8006ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8003ea4:	203c      	movs	r0, #60	; 0x3c
 8003ea6:	f003 f81a 	bl	8006ede <HAL_NVIC_EnableIRQ>
}
 8003eaa:	bf00      	nop
 8003eac:	3730      	adds	r7, #48	; 0x30
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40022000 	.word	0x40022000
 8003ebc:	40015c04 	.word	0x40015c04
 8003ec0:	20014eb0 	.word	0x20014eb0
 8003ec4:	40026470 	.word	0x40026470

08003ec8 <BSP_AUDIO_OUT_MspDeInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspDeInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef  gpio_init_structure;

    /* SAI DMA IRQ Channel deactivation */
    HAL_NVIC_DisableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8003ed2:	203c      	movs	r0, #60	; 0x3c
 8003ed4:	f003 f811 	bl	8006efa <HAL_NVIC_DisableIRQ>

    if(hsai->Instance == AUDIO_OUT_SAIx)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1a      	ldr	r2, [pc, #104]	; (8003f48 <BSP_AUDIO_OUT_MspDeInit+0x80>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d104      	bne.n	8003eec <BSP_AUDIO_OUT_MspDeInit+0x24>
    {
      /* Deinitialize the DMA stream */
      HAL_DMA_DeInit(hsai->hdmatx);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f003 f95a 	bl	80071a0 <HAL_DMA_DeInit>
    }

    /* Disable SAI peripheral */
    __HAL_SAI_DISABLE(hsai);  
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003efa:	601a      	str	r2, [r3, #0]

    /* Deactives CODEC_SAI pins FS, SCK, MCK and SD by putting them in input mode */
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_FS_GPIO_PORT, gpio_init_structure.Pin);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4619      	mov	r1, r3
 8003f04:	4811      	ldr	r0, [pc, #68]	; (8003f4c <BSP_AUDIO_OUT_MspDeInit+0x84>)
 8003f06:	f004 f947 	bl	8008198 <HAL_GPIO_DeInit>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8003f0a:	2320      	movs	r3, #32
 8003f0c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, gpio_init_structure.Pin);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4619      	mov	r1, r3
 8003f12:	480e      	ldr	r0, [pc, #56]	; (8003f4c <BSP_AUDIO_OUT_MspDeInit+0x84>)
 8003f14:	f004 f940 	bl	8008198 <HAL_GPIO_DeInit>

    gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8003f18:	2340      	movs	r3, #64	; 0x40
 8003f1a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, gpio_init_structure.Pin);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4619      	mov	r1, r3
 8003f20:	480a      	ldr	r0, [pc, #40]	; (8003f4c <BSP_AUDIO_OUT_MspDeInit+0x84>)
 8003f22:	f004 f939 	bl	8008198 <HAL_GPIO_DeInit>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8003f26:	2310      	movs	r3, #16
 8003f28:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, gpio_init_structure.Pin);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4807      	ldr	r0, [pc, #28]	; (8003f4c <BSP_AUDIO_OUT_MspDeInit+0x84>)
 8003f30:	f004 f932 	bl	8008198 <HAL_GPIO_DeInit>
  
    /* Disable SAI clock */
    AUDIO_OUT_SAIx_CLK_DISABLE();
 8003f34:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <BSP_AUDIO_OUT_MspDeInit+0x88>)
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	4a05      	ldr	r2, [pc, #20]	; (8003f50 <BSP_AUDIO_OUT_MspDeInit+0x88>)
 8003f3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f3e:	6453      	str	r3, [r2, #68]	; 0x44

    /* GPIO pins clock and DMA clock can be shut down in the application
       by surcharging this __weak function */
}
 8003f40:	bf00      	nop
 8003f42:	3720      	adds	r7, #32
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40015c04 	.word	0x40015c04
 8003f4c:	40022000 	.word	0x40022000
 8003f50:	40023800 	.word	0x40023800

08003f54 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b0a6      	sub	sp, #152	; 0x98
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003f60:	f107 0314 	add.w	r3, r7, #20
 8003f64:	4618      	mov	r0, r3
 8003f66:	f006 fbc7 	bl	800a6f8 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d009      	beq.n	8003f88 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f245 6222 	movw	r2, #22050	; 0x5622
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d112      	bne.n	8003fae <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003f88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f8c:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003f8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f92:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8003f94:	f240 13ad 	movw	r3, #429	; 0x1ad
 8003f98:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8003f9e:	2313      	movs	r3, #19
 8003fa0:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003fa2:	f107 0314 	add.w	r3, r7, #20
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f005 ffb6 	bl	8009f18 <HAL_RCCEx_PeriphCLKConfig>
 8003fac:	e012      	b.n	8003fd4 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003fae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003fb2:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003fb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003fb8:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8003fba:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8003fbe:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8003fc0:	2307      	movs	r3, #7
 8003fc2:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003fc8:	f107 0314 	add.w	r3, r7, #20
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f005 ffa3 	bl	8009f18 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8003fd2:	bf00      	nop
 8003fd4:	bf00      	nop
 8003fd6:	3798      	adds	r7, #152	; 0x98
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <SAIx_Out_Init>:
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123 
  *         and user can update this configuration using 
  * @retval None
  */
static void SAIx_Out_Init(uint32_t AudioFreq)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003fe4:	4b2a      	ldr	r3, [pc, #168]	; (8004090 <SAIx_Out_Init+0xb4>)
 8003fe6:	4a2b      	ldr	r2, [pc, #172]	; (8004094 <SAIx_Out_Init+0xb8>)
 8003fe8:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8003fea:	4b29      	ldr	r3, [pc, #164]	; (8004090 <SAIx_Out_Init+0xb4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4b27      	ldr	r3, [pc, #156]	; (8004090 <SAIx_Out_Init+0xb4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ff8:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x 
  LSBFirst: Disabled 
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8003ffa:	4a25      	ldr	r2, [pc, #148]	; (8004090 <SAIx_Out_Init+0xb4>)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8004000:	4b23      	ldr	r3, [pc, #140]	; (8004090 <SAIx_Out_Init+0xb4>)
 8004002:	2200      	movs	r2, #0
 8004004:	605a      	str	r2, [r3, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004006:	4b22      	ldr	r3, [pc, #136]	; (8004090 <SAIx_Out_Init+0xb4>)
 8004008:	2200      	movs	r2, #0
 800400a:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800400c:	4b20      	ldr	r3, [pc, #128]	; (8004090 <SAIx_Out_Init+0xb4>)
 800400e:	2200      	movs	r2, #0
 8004010:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8004012:	4b1f      	ldr	r3, [pc, #124]	; (8004090 <SAIx_Out_Init+0xb4>)
 8004014:	2280      	movs	r2, #128	; 0x80
 8004016:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004018:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <SAIx_Out_Init+0xb4>)
 800401a:	2200      	movs	r2, #0
 800401c:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800401e:	4b1c      	ldr	r3, [pc, #112]	; (8004090 <SAIx_Out_Init+0xb4>)
 8004020:	2201      	movs	r2, #1
 8004022:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8004024:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <SAIx_Out_Init+0xb4>)
 8004026:	2200      	movs	r2, #0
 8004028:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 800402a:	4b19      	ldr	r3, [pc, #100]	; (8004090 <SAIx_Out_Init+0xb4>)
 800402c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004030:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004032:	4b17      	ldr	r3, [pc, #92]	; (8004090 <SAIx_Out_Init+0xb4>)
 8004034:	2201      	movs	r2, #1
 8004036:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */ 
  haudio_out_sai.FrameInit.FrameLength = 64; 
 8004038:	4b15      	ldr	r3, [pc, #84]	; (8004090 <SAIx_Out_Init+0xb4>)
 800403a:	2240      	movs	r2, #64	; 0x40
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 800403e:	4b14      	ldr	r3, [pc, #80]	; (8004090 <SAIx_Out_Init+0xb4>)
 8004040:	2220      	movs	r2, #32
 8004042:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004044:	4b12      	ldr	r3, [pc, #72]	; (8004090 <SAIx_Out_Init+0xb4>)
 8004046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800404a:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800404c:	4b10      	ldr	r3, [pc, #64]	; (8004090 <SAIx_Out_Init+0xb4>)
 800404e:	2200      	movs	r2, #0
 8004050:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004052:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <SAIx_Out_Init+0xb4>)
 8004054:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004058:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot 
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 800405a:	4b0d      	ldr	r3, [pc, #52]	; (8004090 <SAIx_Out_Init+0xb4>)
 800405c:	2200      	movs	r2, #0
 800405e:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <SAIx_Out_Init+0xb4>)
 8004062:	2200      	movs	r2, #0
 8004064:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4; 
 8004066:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <SAIx_Out_Init+0xb4>)
 8004068:	2204      	movs	r2, #4
 800406a:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 800406c:	4b08      	ldr	r3, [pc, #32]	; (8004090 <SAIx_Out_Init+0xb4>)
 800406e:	220f      	movs	r2, #15
 8004070:	661a      	str	r2, [r3, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8004072:	4807      	ldr	r0, [pc, #28]	; (8004090 <SAIx_Out_Init+0xb4>)
 8004074:	f006 fd90 	bl	800ab98 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <SAIx_Out_Init+0xb4>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b04      	ldr	r3, [pc, #16]	; (8004090 <SAIx_Out_Init+0xb4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004086:	601a      	str	r2, [r3, #0]
}
 8004088:	bf00      	nop
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20014da8 	.word	0x20014da8
 8004094:	40015c04 	.word	0x40015c04

08004098 <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800409c:	4b07      	ldr	r3, [pc, #28]	; (80040bc <SAIx_Out_DeInit+0x24>)
 800409e:	4a08      	ldr	r2, [pc, #32]	; (80040c0 <SAIx_Out_DeInit+0x28>)
 80040a0:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <SAIx_Out_DeInit+0x24>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <SAIx_Out_DeInit+0x24>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80040b0:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 80040b2:	4802      	ldr	r0, [pc, #8]	; (80040bc <SAIx_Out_DeInit+0x24>)
 80040b4:	f006 feee 	bl	800ae94 <HAL_SAI_DeInit>
}
 80040b8:	bf00      	nop
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	20014da8 	.word	0x20014da8
 80040c0:	40015c04 	.word	0x40015c04

080040c4 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	68f9      	ldr	r1, [r7, #12]
 80040d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80040da:	f000 f805 	bl	80040e8 <BSP_AUDIO_IN_InitEx>
 80040de:	4603      	mov	r3, r0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 80040e8:	b590      	push	{r4, r7, lr}
 80040ea:	b089      	sub	sp, #36	; 0x24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	4603      	mov	r3, r0
 80040f6:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8004100:	89fb      	ldrh	r3, [r7, #14]
 8004102:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004106:	d006      	beq.n	8004116 <BSP_AUDIO_IN_InitEx+0x2e>
 8004108:	89fb      	ldrh	r3, [r7, #14]
 800410a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800410e:	d002      	beq.n	8004116 <BSP_AUDIO_IN_InitEx+0x2e>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	77fb      	strb	r3, [r7, #31]
 8004114:	e046      	b.n	80041a4 <BSP_AUDIO_IN_InitEx+0xbc>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8004116:	f000 fa09 	bl	800452c <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 800411a:	2200      	movs	r2, #0
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	4824      	ldr	r0, [pc, #144]	; (80041b0 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004120:	f7ff ff18 	bl	8003f54 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004124:	4b22      	ldr	r3, [pc, #136]	; (80041b0 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004126:	4a23      	ldr	r2, [pc, #140]	; (80041b4 <BSP_AUDIO_IN_InitEx+0xcc>)
 8004128:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 800412a:	4821      	ldr	r0, [pc, #132]	; (80041b0 <BSP_AUDIO_IN_InitEx+0xc8>)
 800412c:	f007 f8ac 	bl	800b288 <HAL_SAI_GetState>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d107      	bne.n	8004146 <BSP_AUDIO_IN_InitEx+0x5e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8004136:	2100      	movs	r1, #0
 8004138:	481d      	ldr	r0, [pc, #116]	; (80041b0 <BSP_AUDIO_IN_InitEx+0xc8>)
 800413a:	f7ff fdef 	bl	8003d1c <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 800413e:	2100      	movs	r1, #0
 8004140:	481b      	ldr	r0, [pc, #108]	; (80041b0 <BSP_AUDIO_IN_InitEx+0xc8>)
 8004142:	f000 f88b 	bl	800425c <BSP_AUDIO_IN_MspInit>

    /* Configure SAI in master RX mode :
     *   - SAI2_block_A in master RX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8004146:	89fb      	ldrh	r3, [r7, #14]
 8004148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800414c:	d102      	bne.n	8004154 <BSP_AUDIO_IN_InitEx+0x6c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 800414e:	230a      	movs	r3, #10
 8004150:	61bb      	str	r3, [r7, #24]
 8004152:	e001      	b.n	8004158 <BSP_AUDIO_IN_InitEx+0x70>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8004154:	2305      	movs	r3, #5
 8004156:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	69b9      	ldr	r1, [r7, #24]
 800415c:	2001      	movs	r0, #1
 800415e:	f000 f92f 	bl	80043c0 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8004162:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <BSP_AUDIO_IN_InitEx+0xd0>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2034      	movs	r0, #52	; 0x34
 8004168:	4798      	blx	r3
 800416a:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f648 1294 	movw	r2, #35220	; 0x8994
 8004172:	4293      	cmp	r3, r2
 8004174:	d109      	bne.n	800418a <BSP_AUDIO_IN_InitEx+0xa2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8004176:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <BSP_AUDIO_IN_InitEx+0xd0>)
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	2034      	movs	r0, #52	; 0x34
 800417c:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 800417e:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <BSP_AUDIO_IN_InitEx+0xd4>)
 8004180:	4a0d      	ldr	r2, [pc, #52]	; (80041b8 <BSP_AUDIO_IN_InitEx+0xd0>)
 8004182:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e001      	b.n	800418e <BSP_AUDIO_IN_InitEx+0xa6>
    }
    else
    {
      ret = AUDIO_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 800418e:	7ffb      	ldrb	r3, [r7, #31]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d107      	bne.n	80041a4 <BSP_AUDIO_IN_InitEx+0xbc>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8004194:	4b09      	ldr	r3, [pc, #36]	; (80041bc <BSP_AUDIO_IN_InitEx+0xd4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681c      	ldr	r4, [r3, #0]
 800419a:	89f9      	ldrh	r1, [r7, #14]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2264      	movs	r2, #100	; 0x64
 80041a0:	2034      	movs	r0, #52	; 0x34
 80041a2:	47a0      	blx	r4
    }
  }
  return ret;
 80041a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3724      	adds	r7, #36	; 0x24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd90      	pop	{r4, r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20014e2c 	.word	0x20014e2c
 80041b4:	40015c24 	.word	0x40015c24
 80041b8:	20000280 	.word	0x20000280
 80041bc:	20014da4 	.word	0x20014da4

080041c0 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	4805      	ldr	r0, [pc, #20]	; (80041ec <BSP_AUDIO_IN_Record+0x2c>)
 80041d8:	f006 ffc8 	bl	800b16c <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	60fb      	str	r3, [r7, #12]
  
  return ret;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	b2db      	uxtb	r3, r3
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	20014e2c 	.word	0x20014e2c

080041f0 <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 80041f8:	480c      	ldr	r0, [pc, #48]	; (800422c <BSP_AUDIO_IN_Stop+0x3c>)
 80041fa:	f006 fe94 	bl	800af26 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80041fe:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <BSP_AUDIO_IN_Stop+0x40>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	2034      	movs	r0, #52	; 0x34
 8004208:	4798      	blx	r3
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <BSP_AUDIO_IN_Stop+0x24>
  {
    return AUDIO_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e006      	b.n	8004222 <BSP_AUDIO_IN_Stop+0x32>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d102      	bne.n	8004220 <BSP_AUDIO_IN_Stop+0x30>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 800421a:	2001      	movs	r0, #1
 800421c:	f002 fd20 	bl	8006c60 <HAL_Delay>
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8004220:	2300      	movs	r3, #0
  }
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20014e2c 	.word	0x20014e2c
 8004230:	20014da4 	.word	0x20014da4

08004234 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 800423c:	f7fd f8e2 	bl	8001404 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8004240:	bf00      	nop
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8004250:	f7fd f8e4 	bl	800141c <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8004254:	bf00      	nop
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08c      	sub	sp, #48	; 0x30
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8004266:	4b50      	ldr	r3, [pc, #320]	; (80043a8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	4a4f      	ldr	r2, [pc, #316]	; (80043a8 <BSP_AUDIO_IN_MspInit+0x14c>)
 800426c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004270:	6453      	str	r3, [r2, #68]	; 0x44
 8004272:	4b4d      	ldr	r3, [pc, #308]	; (80043a8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004276:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800427a:	61bb      	str	r3, [r7, #24]
 800427c:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 800427e:	4b4a      	ldr	r3, [pc, #296]	; (80043a8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	4a49      	ldr	r2, [pc, #292]	; (80043a8 <BSP_AUDIO_IN_MspInit+0x14c>)
 8004284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004288:	6313      	str	r3, [r2, #48]	; 0x30
 800428a:	4b47      	ldr	r3, [pc, #284]	; (80043a8 <BSP_AUDIO_IN_MspInit+0x14c>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8004296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800429a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800429c:	2302      	movs	r3, #2
 800429e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80042a4:	2302      	movs	r3, #2
 80042a6:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 80042a8:	230a      	movs	r3, #10
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80042ac:	f107 031c 	add.w	r3, r7, #28
 80042b0:	4619      	mov	r1, r3
 80042b2:	483e      	ldr	r0, [pc, #248]	; (80043ac <BSP_AUDIO_IN_MspInit+0x150>)
 80042b4:	f003 fdc4 	bl	8007e40 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 80042b8:	4b3b      	ldr	r3, [pc, #236]	; (80043a8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	4a3a      	ldr	r2, [pc, #232]	; (80043a8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80042be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c2:	6313      	str	r3, [r2, #48]	; 0x30
 80042c4:	4b38      	ldr	r3, [pc, #224]	; (80043a8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80042d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042d4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80042d6:	2300      	movs	r3, #0
 80042d8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80042de:	2302      	movs	r3, #2
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80042e2:	f107 031c 	add.w	r3, r7, #28
 80042e6:	4619      	mov	r1, r3
 80042e8:	4831      	ldr	r0, [pc, #196]	; (80043b0 <BSP_AUDIO_IN_MspInit+0x154>)
 80042ea:	f003 fda9 	bl	8007e40 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80042ee:	4b2e      	ldr	r3, [pc, #184]	; (80043a8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	4a2d      	ldr	r2, [pc, #180]	; (80043a8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80042f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042f8:	6313      	str	r3, [r2, #48]	; 0x30
 80042fa:	4b2b      	ldr	r3, [pc, #172]	; (80043a8 <BSP_AUDIO_IN_MspInit+0x14c>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a2a      	ldr	r2, [pc, #168]	; (80043b4 <BSP_AUDIO_IN_MspInit+0x158>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d137      	bne.n	8004380 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8004310:	4b29      	ldr	r3, [pc, #164]	; (80043b8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004312:	2200      	movs	r2, #0
 8004314:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8004316:	4b28      	ldr	r3, [pc, #160]	; (80043b8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004318:	2200      	movs	r2, #0
 800431a:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800431c:	4b26      	ldr	r3, [pc, #152]	; (80043b8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800431e:	2200      	movs	r2, #0
 8004320:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8004322:	4b25      	ldr	r3, [pc, #148]	; (80043b8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004324:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004328:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800432a:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800432c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004330:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8004332:	4b21      	ldr	r3, [pc, #132]	; (80043b8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004334:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004338:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800433a:	4b1f      	ldr	r3, [pc, #124]	; (80043b8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800433c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004340:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004342:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004344:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004348:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800434a:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800434c:	2200      	movs	r2, #0
 800434e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004350:	4b19      	ldr	r3, [pc, #100]	; (80043b8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004352:	2203      	movs	r2, #3
 8004354:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004356:	4b18      	ldr	r3, [pc, #96]	; (80043b8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004358:	2200      	movs	r2, #0
 800435a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800435c:	4b16      	ldr	r3, [pc, #88]	; (80043b8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800435e:	2200      	movs	r2, #0
 8004360:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8004362:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004364:	4a15      	ldr	r2, [pc, #84]	; (80043bc <BSP_AUDIO_IN_MspInit+0x160>)
 8004366:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a13      	ldr	r2, [pc, #76]	; (80043b8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800436c:	671a      	str	r2, [r3, #112]	; 0x70
 800436e:	4a12      	ldr	r2, [pc, #72]	; (80043b8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8004374:	4810      	ldr	r0, [pc, #64]	; (80043b8 <BSP_AUDIO_IN_MspInit+0x15c>)
 8004376:	f002 ff13 	bl	80071a0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 800437a:	480f      	ldr	r0, [pc, #60]	; (80043b8 <BSP_AUDIO_IN_MspInit+0x15c>)
 800437c:	f002 fe62 	bl	8007044 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004380:	2200      	movs	r2, #0
 8004382:	210f      	movs	r1, #15
 8004384:	2046      	movs	r0, #70	; 0x46
 8004386:	f002 fd8e 	bl	8006ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800438a:	2046      	movs	r0, #70	; 0x46
 800438c:	f002 fda7 	bl	8006ede <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004390:	2200      	movs	r2, #0
 8004392:	210f      	movs	r1, #15
 8004394:	2028      	movs	r0, #40	; 0x28
 8004396:	f002 fd86 	bl	8006ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 800439a:	2028      	movs	r0, #40	; 0x28
 800439c:	f002 fd9f 	bl	8006ede <HAL_NVIC_EnableIRQ>
}
 80043a0:	bf00      	nop
 80043a2:	3730      	adds	r7, #48	; 0x30
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40023800 	.word	0x40023800
 80043ac:	40021800 	.word	0x40021800
 80043b0:	40021c00 	.word	0x40021c00
 80043b4:	40015c24 	.word	0x40015c24
 80043b8:	20014f10 	.word	0x20014f10
 80043bc:	400264b8 	.word	0x400264b8

080043c0 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80043cc:	4b53      	ldr	r3, [pc, #332]	; (800451c <SAIx_In_Init+0x15c>)
 80043ce:	4a54      	ldr	r2, [pc, #336]	; (8004520 <SAIx_In_Init+0x160>)
 80043d0:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80043d2:	4b52      	ldr	r3, [pc, #328]	; (800451c <SAIx_In_Init+0x15c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b50      	ldr	r3, [pc, #320]	; (800451c <SAIx_In_Init+0x15c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80043e0:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80043e2:	4a4e      	ldr	r2, [pc, #312]	; (800451c <SAIx_In_Init+0x15c>)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 80043e8:	4a4c      	ldr	r2, [pc, #304]	; (800451c <SAIx_In_Init+0x15c>)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80043ee:	4b4b      	ldr	r3, [pc, #300]	; (800451c <SAIx_In_Init+0x15c>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80043f4:	4b49      	ldr	r3, [pc, #292]	; (800451c <SAIx_In_Init+0x15c>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 80043fa:	4b48      	ldr	r3, [pc, #288]	; (800451c <SAIx_In_Init+0x15c>)
 80043fc:	2280      	movs	r2, #128	; 0x80
 80043fe:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004400:	4b46      	ldr	r3, [pc, #280]	; (800451c <SAIx_In_Init+0x15c>)
 8004402:	2200      	movs	r2, #0
 8004404:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004406:	4b45      	ldr	r3, [pc, #276]	; (800451c <SAIx_In_Init+0x15c>)
 8004408:	2201      	movs	r2, #1
 800440a:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 800440c:	4b43      	ldr	r3, [pc, #268]	; (800451c <SAIx_In_Init+0x15c>)
 800440e:	2200      	movs	r2, #0
 8004410:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8004412:	4b42      	ldr	r3, [pc, #264]	; (800451c <SAIx_In_Init+0x15c>)
 8004414:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004418:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800441a:	4b40      	ldr	r3, [pc, #256]	; (800451c <SAIx_In_Init+0x15c>)
 800441c:	2201      	movs	r2, #1
 800441e:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8004420:	4b3e      	ldr	r3, [pc, #248]	; (800451c <SAIx_In_Init+0x15c>)
 8004422:	2240      	movs	r2, #64	; 0x40
 8004424:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8004426:	4b3d      	ldr	r3, [pc, #244]	; (800451c <SAIx_In_Init+0x15c>)
 8004428:	2220      	movs	r2, #32
 800442a:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800442c:	4b3b      	ldr	r3, [pc, #236]	; (800451c <SAIx_In_Init+0x15c>)
 800442e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004432:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004434:	4b39      	ldr	r3, [pc, #228]	; (800451c <SAIx_In_Init+0x15c>)
 8004436:	2200      	movs	r2, #0
 8004438:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800443a:	4b38      	ldr	r3, [pc, #224]	; (800451c <SAIx_In_Init+0x15c>)
 800443c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004440:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8004442:	4b36      	ldr	r3, [pc, #216]	; (800451c <SAIx_In_Init+0x15c>)
 8004444:	2200      	movs	r2, #0
 8004446:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004448:	4b34      	ldr	r3, [pc, #208]	; (800451c <SAIx_In_Init+0x15c>)
 800444a:	2200      	movs	r2, #0
 800444c:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 800444e:	4b33      	ldr	r3, [pc, #204]	; (800451c <SAIx_In_Init+0x15c>)
 8004450:	2204      	movs	r2, #4
 8004452:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8004454:	4a31      	ldr	r2, [pc, #196]	; (800451c <SAIx_In_Init+0x15c>)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 800445a:	4830      	ldr	r0, [pc, #192]	; (800451c <SAIx_In_Init+0x15c>)
 800445c:	f006 fb9c 	bl	800ab98 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004460:	4b30      	ldr	r3, [pc, #192]	; (8004524 <SAIx_In_Init+0x164>)
 8004462:	4a31      	ldr	r2, [pc, #196]	; (8004528 <SAIx_In_Init+0x168>)
 8004464:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8004466:	4b2f      	ldr	r3, [pc, #188]	; (8004524 <SAIx_In_Init+0x164>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	4b2d      	ldr	r3, [pc, #180]	; (8004524 <SAIx_In_Init+0x164>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004474:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8004476:	4a2b      	ldr	r2, [pc, #172]	; (8004524 <SAIx_In_Init+0x164>)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 800447c:	4b29      	ldr	r3, [pc, #164]	; (8004524 <SAIx_In_Init+0x164>)
 800447e:	2203      	movs	r2, #3
 8004480:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004482:	4b28      	ldr	r3, [pc, #160]	; (8004524 <SAIx_In_Init+0x164>)
 8004484:	2200      	movs	r2, #0
 8004486:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004488:	4b26      	ldr	r3, [pc, #152]	; (8004524 <SAIx_In_Init+0x164>)
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 800448e:	4b25      	ldr	r3, [pc, #148]	; (8004524 <SAIx_In_Init+0x164>)
 8004490:	2280      	movs	r2, #128	; 0x80
 8004492:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004494:	4b23      	ldr	r3, [pc, #140]	; (8004524 <SAIx_In_Init+0x164>)
 8004496:	2200      	movs	r2, #0
 8004498:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800449a:	4b22      	ldr	r3, [pc, #136]	; (8004524 <SAIx_In_Init+0x164>)
 800449c:	2201      	movs	r2, #1
 800449e:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 80044a0:	4b20      	ldr	r3, [pc, #128]	; (8004524 <SAIx_In_Init+0x164>)
 80044a2:	2201      	movs	r2, #1
 80044a4:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 80044a6:	4b1f      	ldr	r3, [pc, #124]	; (8004524 <SAIx_In_Init+0x164>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80044ac:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <SAIx_In_Init+0x164>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 80044b2:	4b1c      	ldr	r3, [pc, #112]	; (8004524 <SAIx_In_Init+0x164>)
 80044b4:	2240      	movs	r2, #64	; 0x40
 80044b6:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 80044b8:	4b1a      	ldr	r3, [pc, #104]	; (8004524 <SAIx_In_Init+0x164>)
 80044ba:	2220      	movs	r2, #32
 80044bc:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80044be:	4b19      	ldr	r3, [pc, #100]	; (8004524 <SAIx_In_Init+0x164>)
 80044c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80044c4:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80044c6:	4b17      	ldr	r3, [pc, #92]	; (8004524 <SAIx_In_Init+0x164>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80044cc:	4b15      	ldr	r3, [pc, #84]	; (8004524 <SAIx_In_Init+0x164>)
 80044ce:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80044d2:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 80044d4:	4b13      	ldr	r3, [pc, #76]	; (8004524 <SAIx_In_Init+0x164>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80044da:	4b12      	ldr	r3, [pc, #72]	; (8004524 <SAIx_In_Init+0x164>)
 80044dc:	2200      	movs	r2, #0
 80044de:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 80044e0:	4b10      	ldr	r3, [pc, #64]	; (8004524 <SAIx_In_Init+0x164>)
 80044e2:	2204      	movs	r2, #4
 80044e4:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 80044e6:	4a0f      	ldr	r2, [pc, #60]	; (8004524 <SAIx_In_Init+0x164>)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 80044ec:	480d      	ldr	r0, [pc, #52]	; (8004524 <SAIx_In_Init+0x164>)
 80044ee:	f006 fb53 	bl	800ab98 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 80044f2:	4b0a      	ldr	r3, [pc, #40]	; (800451c <SAIx_In_Init+0x15c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4b08      	ldr	r3, [pc, #32]	; (800451c <SAIx_In_Init+0x15c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004500:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8004502:	4b08      	ldr	r3, [pc, #32]	; (8004524 <SAIx_In_Init+0x164>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	4b06      	ldr	r3, [pc, #24]	; (8004524 <SAIx_In_Init+0x164>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004510:	601a      	str	r2, [r3, #0]
}
 8004512:	bf00      	nop
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20014da8 	.word	0x20014da8
 8004520:	40015c04 	.word	0x40015c04
 8004524:	20014e2c 	.word	0x20014e2c
 8004528:	40015c24 	.word	0x40015c24

0800452c <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004530:	4b07      	ldr	r3, [pc, #28]	; (8004550 <SAIx_In_DeInit+0x24>)
 8004532:	4a08      	ldr	r2, [pc, #32]	; (8004554 <SAIx_In_DeInit+0x28>)
 8004534:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <SAIx_In_DeInit+0x24>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4b04      	ldr	r3, [pc, #16]	; (8004550 <SAIx_In_DeInit+0x24>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004544:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8004546:	4802      	ldr	r0, [pc, #8]	; (8004550 <SAIx_In_DeInit+0x24>)
 8004548:	f006 fca4 	bl	800ae94 <HAL_SAI_DeInit>
}
 800454c:	bf00      	nop
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20014e2c 	.word	0x20014e2c
 8004554:	40015c24 	.word	0x40015c24

08004558 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800455c:	4b31      	ldr	r3, [pc, #196]	; (8004624 <BSP_LCD_Init+0xcc>)
 800455e:	2228      	movs	r2, #40	; 0x28
 8004560:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8004562:	4b30      	ldr	r3, [pc, #192]	; (8004624 <BSP_LCD_Init+0xcc>)
 8004564:	2209      	movs	r2, #9
 8004566:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004568:	4b2e      	ldr	r3, [pc, #184]	; (8004624 <BSP_LCD_Init+0xcc>)
 800456a:	2235      	movs	r2, #53	; 0x35
 800456c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800456e:	4b2d      	ldr	r3, [pc, #180]	; (8004624 <BSP_LCD_Init+0xcc>)
 8004570:	220b      	movs	r2, #11
 8004572:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004574:	4b2b      	ldr	r3, [pc, #172]	; (8004624 <BSP_LCD_Init+0xcc>)
 8004576:	f240 121b 	movw	r2, #283	; 0x11b
 800457a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800457c:	4b29      	ldr	r3, [pc, #164]	; (8004624 <BSP_LCD_Init+0xcc>)
 800457e:	f240 2215 	movw	r2, #533	; 0x215
 8004582:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8004584:	4b27      	ldr	r3, [pc, #156]	; (8004624 <BSP_LCD_Init+0xcc>)
 8004586:	f240 121d 	movw	r2, #285	; 0x11d
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800458c:	4b25      	ldr	r3, [pc, #148]	; (8004624 <BSP_LCD_Init+0xcc>)
 800458e:	f240 2235 	movw	r2, #565	; 0x235
 8004592:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8004594:	2100      	movs	r1, #0
 8004596:	4823      	ldr	r0, [pc, #140]	; (8004624 <BSP_LCD_Init+0xcc>)
 8004598:	f000 fe50 	bl	800523c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800459c:	4b21      	ldr	r3, [pc, #132]	; (8004624 <BSP_LCD_Init+0xcc>)
 800459e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80045a2:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80045a4:	4b1f      	ldr	r3, [pc, #124]	; (8004624 <BSP_LCD_Init+0xcc>)
 80045a6:	f44f 7288 	mov.w	r2, #272	; 0x110
 80045aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80045ac:	4b1d      	ldr	r3, [pc, #116]	; (8004624 <BSP_LCD_Init+0xcc>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80045b4:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <BSP_LCD_Init+0xcc>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80045bc:	4b19      	ldr	r3, [pc, #100]	; (8004624 <BSP_LCD_Init+0xcc>)
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80045c4:	4b17      	ldr	r3, [pc, #92]	; (8004624 <BSP_LCD_Init+0xcc>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80045ca:	4b16      	ldr	r3, [pc, #88]	; (8004624 <BSP_LCD_Init+0xcc>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80045d0:	4b14      	ldr	r3, [pc, #80]	; (8004624 <BSP_LCD_Init+0xcc>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80045d6:	4b13      	ldr	r3, [pc, #76]	; (8004624 <BSP_LCD_Init+0xcc>)
 80045d8:	2200      	movs	r2, #0
 80045da:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80045dc:	4b11      	ldr	r3, [pc, #68]	; (8004624 <BSP_LCD_Init+0xcc>)
 80045de:	4a12      	ldr	r2, [pc, #72]	; (8004628 <BSP_LCD_Init+0xd0>)
 80045e0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80045e2:	4810      	ldr	r0, [pc, #64]	; (8004624 <BSP_LCD_Init+0xcc>)
 80045e4:	f004 fe16 	bl	8009214 <HAL_LTDC_GetState>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d103      	bne.n	80045f6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80045ee:	2100      	movs	r1, #0
 80045f0:	480c      	ldr	r0, [pc, #48]	; (8004624 <BSP_LCD_Init+0xcc>)
 80045f2:	f000 fd49 	bl	8005088 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80045f6:	480b      	ldr	r0, [pc, #44]	; (8004624 <BSP_LCD_Init+0xcc>)
 80045f8:	f004 fcf4 	bl	8008fe4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80045fc:	2201      	movs	r2, #1
 80045fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004602:	480a      	ldr	r0, [pc, #40]	; (800462c <BSP_LCD_Init+0xd4>)
 8004604:	f003 feec 	bl	80083e0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8004608:	2201      	movs	r2, #1
 800460a:	2108      	movs	r1, #8
 800460c:	4808      	ldr	r0, [pc, #32]	; (8004630 <BSP_LCD_Init+0xd8>)
 800460e:	f003 fee7 	bl	80083e0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8004612:	f000 ff33 	bl	800547c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8004616:	4807      	ldr	r0, [pc, #28]	; (8004634 <BSP_LCD_Init+0xdc>)
 8004618:	f000 f8d8 	bl	80047cc <BSP_LCD_SetFont>
  
  return LCD_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20014f70 	.word	0x20014f70
 8004628:	40016800 	.word	0x40016800
 800462c:	40022000 	.word	0x40022000
 8004630:	40022800 	.word	0x40022800
 8004634:	200002c0 	.word	0x200002c0

08004638 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <BSP_LCD_GetXSize+0x20>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a06      	ldr	r2, [pc, #24]	; (800465c <BSP_LCD_GetXSize+0x24>)
 8004642:	2134      	movs	r1, #52	; 0x34
 8004644:	fb01 f303 	mul.w	r3, r1, r3
 8004648:	4413      	add	r3, r2
 800464a:	3360      	adds	r3, #96	; 0x60
 800464c:	681b      	ldr	r3, [r3, #0]
}
 800464e:	4618      	mov	r0, r3
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	20015058 	.word	0x20015058
 800465c:	20014f70 	.word	0x20014f70

08004660 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8004664:	4b06      	ldr	r3, [pc, #24]	; (8004680 <BSP_LCD_GetYSize+0x20>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a06      	ldr	r2, [pc, #24]	; (8004684 <BSP_LCD_GetYSize+0x24>)
 800466a:	2134      	movs	r1, #52	; 0x34
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	4413      	add	r3, r2
 8004672:	3364      	adds	r3, #100	; 0x64
 8004674:	681b      	ldr	r3, [r3, #0]
}
 8004676:	4618      	mov	r0, r3
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	20015058 	.word	0x20015058
 8004684:	20014f70 	.word	0x20014f70

08004688 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004688:	b580      	push	{r7, lr}
 800468a:	b090      	sub	sp, #64	; 0x40
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	6039      	str	r1, [r7, #0]
 8004692:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8004698:	f7ff ffce 	bl	8004638 <BSP_LCD_GetXSize>
 800469c:	4603      	mov	r3, r0
 800469e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80046a4:	f7ff ffdc 	bl	8004660 <BSP_LCD_GetYSize>
 80046a8:	4603      	mov	r3, r0
 80046aa:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80046b4:	23ff      	movs	r3, #255	; 0xff
 80046b6:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80046ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80046d2:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80046d4:	2307      	movs	r3, #7
 80046d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80046d8:	f7ff ffae 	bl	8004638 <BSP_LCD_GetXSize>
 80046dc:	4603      	mov	r3, r0
 80046de:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80046e0:	f7ff ffbe 	bl	8004660 <BSP_LCD_GetYSize>
 80046e4:	4603      	mov	r3, r0
 80046e6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80046e8:	88fa      	ldrh	r2, [r7, #6]
 80046ea:	f107 030c 	add.w	r3, r7, #12
 80046ee:	4619      	mov	r1, r3
 80046f0:	4812      	ldr	r0, [pc, #72]	; (800473c <BSP_LCD_LayerDefaultInit+0xb4>)
 80046f2:	f004 fd51 	bl	8009198 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80046f6:	88fa      	ldrh	r2, [r7, #6]
 80046f8:	4911      	ldr	r1, [pc, #68]	; (8004740 <BSP_LCD_LayerDefaultInit+0xb8>)
 80046fa:	4613      	mov	r3, r2
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	440b      	add	r3, r1
 8004704:	3304      	adds	r3, #4
 8004706:	f04f 32ff 	mov.w	r2, #4294967295
 800470a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800470c:	88fa      	ldrh	r2, [r7, #6]
 800470e:	490c      	ldr	r1, [pc, #48]	; (8004740 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004710:	4613      	mov	r3, r2
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	3308      	adds	r3, #8
 800471c:	4a09      	ldr	r2, [pc, #36]	; (8004744 <BSP_LCD_LayerDefaultInit+0xbc>)
 800471e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8004720:	88fa      	ldrh	r2, [r7, #6]
 8004722:	4907      	ldr	r1, [pc, #28]	; (8004740 <BSP_LCD_LayerDefaultInit+0xb8>)
 8004724:	4613      	mov	r3, r2
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8004732:	601a      	str	r2, [r3, #0]
}
 8004734:	bf00      	nop
 8004736:	3740      	adds	r7, #64	; 0x40
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20014f70 	.word	0x20014f70
 8004740:	2001505c 	.word	0x2001505c
 8004744:	200002c0 	.word	0x200002c0

08004748 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004750:	4a04      	ldr	r2, [pc, #16]	; (8004764 <BSP_LCD_SelectLayer+0x1c>)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6013      	str	r3, [r2, #0]
} 
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20015058 	.word	0x20015058

08004768 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004770:	4b07      	ldr	r3, [pc, #28]	; (8004790 <BSP_LCD_SetTextColor+0x28>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	4907      	ldr	r1, [pc, #28]	; (8004794 <BSP_LCD_SetTextColor+0x2c>)
 8004776:	4613      	mov	r3, r2
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	4413      	add	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	440b      	add	r3, r1
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	601a      	str	r2, [r3, #0]
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	20015058 	.word	0x20015058
 8004794:	2001505c 	.word	0x2001505c

08004798 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80047a0:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <BSP_LCD_SetBackColor+0x2c>)
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	4908      	ldr	r1, [pc, #32]	; (80047c8 <BSP_LCD_SetBackColor+0x30>)
 80047a6:	4613      	mov	r3, r2
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	3304      	adds	r3, #4
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	601a      	str	r2, [r3, #0]
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20015058 	.word	0x20015058
 80047c8:	2001505c 	.word	0x2001505c

080047cc <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80047d4:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <BSP_LCD_SetFont+0x2c>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4908      	ldr	r1, [pc, #32]	; (80047fc <BSP_LCD_SetFont+0x30>)
 80047da:	4613      	mov	r3, r2
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	3308      	adds	r3, #8
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	601a      	str	r2, [r3, #0]
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20015058 	.word	0x20015058
 80047fc:	2001505c 	.word	0x2001505c

08004800 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8004804:	4b07      	ldr	r3, [pc, #28]	; (8004824 <BSP_LCD_GetFont+0x24>)
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	4907      	ldr	r1, [pc, #28]	; (8004828 <BSP_LCD_GetFont+0x28>)
 800480a:	4613      	mov	r3, r2
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	3308      	adds	r3, #8
 8004816:	681b      	ldr	r3, [r3, #0]
}
 8004818:	4618      	mov	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	20015058 	.word	0x20015058
 8004828:	2001505c 	.word	0x2001505c

0800482c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800482c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800482e:	b085      	sub	sp, #20
 8004830:	af02      	add	r7, sp, #8
 8004832:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004834:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <BSP_LCD_Clear+0x48>)
 8004836:	681c      	ldr	r4, [r3, #0]
 8004838:	4b0e      	ldr	r3, [pc, #56]	; (8004874 <BSP_LCD_Clear+0x48>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a0e      	ldr	r2, [pc, #56]	; (8004878 <BSP_LCD_Clear+0x4c>)
 800483e:	2134      	movs	r1, #52	; 0x34
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	4413      	add	r3, r2
 8004846:	335c      	adds	r3, #92	; 0x5c
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	461e      	mov	r6, r3
 800484c:	f7ff fef4 	bl	8004638 <BSP_LCD_GetXSize>
 8004850:	4605      	mov	r5, r0
 8004852:	f7ff ff05 	bl	8004660 <BSP_LCD_GetYSize>
 8004856:	4602      	mov	r2, r0
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	2300      	movs	r3, #0
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	4613      	mov	r3, r2
 8004862:	462a      	mov	r2, r5
 8004864:	4631      	mov	r1, r6
 8004866:	4620      	mov	r0, r4
 8004868:	f000 fdbc 	bl	80053e4 <LL_FillBuffer>
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004874:	20015058 	.word	0x20015058
 8004878:	20014f70 	.word	0x20014f70

0800487c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800487c:	b590      	push	{r4, r7, lr}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	4603      	mov	r3, r0
 8004884:	80fb      	strh	r3, [r7, #6]
 8004886:	460b      	mov	r3, r1
 8004888:	80bb      	strh	r3, [r7, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800488e:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <BSP_LCD_DisplayChar+0x80>)
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	491b      	ldr	r1, [pc, #108]	; (8004900 <BSP_LCD_DisplayChar+0x84>)
 8004894:	4613      	mov	r3, r2
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	3308      	adds	r3, #8
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6819      	ldr	r1, [r3, #0]
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80048aa:	4b14      	ldr	r3, [pc, #80]	; (80048fc <BSP_LCD_DisplayChar+0x80>)
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	4c14      	ldr	r4, [pc, #80]	; (8004900 <BSP_LCD_DisplayChar+0x84>)
 80048b0:	4613      	mov	r3, r2
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	4413      	add	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4423      	add	r3, r4
 80048ba:	3308      	adds	r3, #8
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80048c0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80048c4:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <BSP_LCD_DisplayChar+0x80>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4c0d      	ldr	r4, [pc, #52]	; (8004900 <BSP_LCD_DisplayChar+0x84>)
 80048ca:	4613      	mov	r3, r2
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4423      	add	r3, r4
 80048d4:	3308      	adds	r3, #8
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	889b      	ldrh	r3, [r3, #4]
 80048da:	3307      	adds	r3, #7
 80048dc:	2b00      	cmp	r3, #0
 80048de:	da00      	bge.n	80048e2 <BSP_LCD_DisplayChar+0x66>
 80048e0:	3307      	adds	r3, #7
 80048e2:	10db      	asrs	r3, r3, #3
 80048e4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80048e8:	18ca      	adds	r2, r1, r3
 80048ea:	88b9      	ldrh	r1, [r7, #4]
 80048ec:	88fb      	ldrh	r3, [r7, #6]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fcc0 	bl	8005274 <DrawChar>
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd90      	pop	{r4, r7, pc}
 80048fc:	20015058 	.word	0x20015058
 8004900:	2001505c 	.word	0x2001505c

08004904 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8004904:	b5b0      	push	{r4, r5, r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	60ba      	str	r2, [r7, #8]
 800490c:	461a      	mov	r2, r3
 800490e:	4603      	mov	r3, r0
 8004910:	81fb      	strh	r3, [r7, #14]
 8004912:	460b      	mov	r3, r1
 8004914:	81bb      	strh	r3, [r7, #12]
 8004916:	4613      	mov	r3, r2
 8004918:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800491a:	2301      	movs	r3, #1
 800491c:	83fb      	strh	r3, [r7, #30]
 800491e:	2300      	movs	r3, #0
 8004920:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8004922:	2300      	movs	r3, #0
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	2300      	movs	r3, #0
 8004928:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800492e:	e002      	b.n	8004936 <BSP_LCD_DisplayStringAt+0x32>
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	3301      	adds	r3, #1
 8004934:	61bb      	str	r3, [r7, #24]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	617a      	str	r2, [r7, #20]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f6      	bne.n	8004930 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8004942:	f7ff fe79 	bl	8004638 <BSP_LCD_GetXSize>
 8004946:	4601      	mov	r1, r0
 8004948:	4b50      	ldr	r3, [pc, #320]	; (8004a8c <BSP_LCD_DisplayStringAt+0x188>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	4850      	ldr	r0, [pc, #320]	; (8004a90 <BSP_LCD_DisplayStringAt+0x18c>)
 800494e:	4613      	mov	r3, r2
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4403      	add	r3, r0
 8004958:	3308      	adds	r3, #8
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	889b      	ldrh	r3, [r3, #4]
 800495e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004962:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	2b03      	cmp	r3, #3
 8004968:	d01c      	beq.n	80049a4 <BSP_LCD_DisplayStringAt+0xa0>
 800496a:	2b03      	cmp	r3, #3
 800496c:	dc33      	bgt.n	80049d6 <BSP_LCD_DisplayStringAt+0xd2>
 800496e:	2b01      	cmp	r3, #1
 8004970:	d002      	beq.n	8004978 <BSP_LCD_DisplayStringAt+0x74>
 8004972:	2b02      	cmp	r3, #2
 8004974:	d019      	beq.n	80049aa <BSP_LCD_DisplayStringAt+0xa6>
 8004976:	e02e      	b.n	80049d6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	1ad1      	subs	r1, r2, r3
 800497e:	4b43      	ldr	r3, [pc, #268]	; (8004a8c <BSP_LCD_DisplayStringAt+0x188>)
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	4843      	ldr	r0, [pc, #268]	; (8004a90 <BSP_LCD_DisplayStringAt+0x18c>)
 8004984:	4613      	mov	r3, r2
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	4413      	add	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4403      	add	r3, r0
 800498e:	3308      	adds	r3, #8
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	889b      	ldrh	r3, [r3, #4]
 8004994:	fb01 f303 	mul.w	r3, r1, r3
 8004998:	085b      	lsrs	r3, r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	89fb      	ldrh	r3, [r7, #14]
 800499e:	4413      	add	r3, r2
 80049a0:	83fb      	strh	r3, [r7, #30]
      break;
 80049a2:	e01b      	b.n	80049dc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80049a4:	89fb      	ldrh	r3, [r7, #14]
 80049a6:	83fb      	strh	r3, [r7, #30]
      break;
 80049a8:	e018      	b.n	80049dc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	b299      	uxth	r1, r3
 80049b2:	4b36      	ldr	r3, [pc, #216]	; (8004a8c <BSP_LCD_DisplayStringAt+0x188>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	4836      	ldr	r0, [pc, #216]	; (8004a90 <BSP_LCD_DisplayStringAt+0x18c>)
 80049b8:	4613      	mov	r3, r2
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	4413      	add	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4403      	add	r3, r0
 80049c2:	3308      	adds	r3, #8
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	889b      	ldrh	r3, [r3, #4]
 80049c8:	fb11 f303 	smulbb	r3, r1, r3
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	89fb      	ldrh	r3, [r7, #14]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	83fb      	strh	r3, [r7, #30]
      break;
 80049d4:	e002      	b.n	80049dc <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80049d6:	89fb      	ldrh	r3, [r7, #14]
 80049d8:	83fb      	strh	r3, [r7, #30]
      break;
 80049da:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80049dc:	8bfb      	ldrh	r3, [r7, #30]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <BSP_LCD_DisplayStringAt+0xe6>
 80049e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	da1d      	bge.n	8004a26 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80049ea:	2301      	movs	r3, #1
 80049ec:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80049ee:	e01a      	b.n	8004a26 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	781a      	ldrb	r2, [r3, #0]
 80049f4:	89b9      	ldrh	r1, [r7, #12]
 80049f6:	8bfb      	ldrh	r3, [r7, #30]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff ff3f 	bl	800487c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80049fe:	4b23      	ldr	r3, [pc, #140]	; (8004a8c <BSP_LCD_DisplayStringAt+0x188>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4923      	ldr	r1, [pc, #140]	; (8004a90 <BSP_LCD_DisplayStringAt+0x18c>)
 8004a04:	4613      	mov	r3, r2
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	4413      	add	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	3308      	adds	r3, #8
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	889a      	ldrh	r2, [r3, #4]
 8004a14:	8bfb      	ldrh	r3, [r7, #30]
 8004a16:	4413      	add	r3, r2
 8004a18:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	60bb      	str	r3, [r7, #8]
    i++;
 8004a20:	8bbb      	ldrh	r3, [r7, #28]
 8004a22:	3301      	adds	r3, #1
 8004a24:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	bf14      	ite	ne
 8004a2e:	2301      	movne	r3, #1
 8004a30:	2300      	moveq	r3, #0
 8004a32:	b2dc      	uxtb	r4, r3
 8004a34:	f7ff fe00 	bl	8004638 <BSP_LCD_GetXSize>
 8004a38:	8bb9      	ldrh	r1, [r7, #28]
 8004a3a:	4b14      	ldr	r3, [pc, #80]	; (8004a8c <BSP_LCD_DisplayStringAt+0x188>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4d14      	ldr	r5, [pc, #80]	; (8004a90 <BSP_LCD_DisplayStringAt+0x18c>)
 8004a40:	4613      	mov	r3, r2
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	442b      	add	r3, r5
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	889b      	ldrh	r3, [r3, #4]
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	1ac3      	subs	r3, r0, r3
 8004a56:	b299      	uxth	r1, r3
 8004a58:	4b0c      	ldr	r3, [pc, #48]	; (8004a8c <BSP_LCD_DisplayStringAt+0x188>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	480c      	ldr	r0, [pc, #48]	; (8004a90 <BSP_LCD_DisplayStringAt+0x18c>)
 8004a5e:	4613      	mov	r3, r2
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4403      	add	r3, r0
 8004a68:	3308      	adds	r3, #8
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	889b      	ldrh	r3, [r3, #4]
 8004a6e:	4299      	cmp	r1, r3
 8004a70:	bf2c      	ite	cs
 8004a72:	2301      	movcs	r3, #1
 8004a74:	2300      	movcc	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	4023      	ands	r3, r4
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1b7      	bne.n	80049f0 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	3720      	adds	r7, #32
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bdb0      	pop	{r4, r5, r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20015058 	.word	0x20015058
 8004a90:	2001505c 	.word	0x2001505c

08004a94 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	6039      	str	r1, [r7, #0]
 8004a9e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8004aa0:	f7ff feae 	bl	8004800 <BSP_LCD_GetFont>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	88db      	ldrh	r3, [r3, #6]
 8004aa8:	88fa      	ldrh	r2, [r7, #6]
 8004aaa:	fb12 f303 	smulbb	r3, r2, r3
 8004aae:	b299      	uxth	r1, r3
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	f7ff ff25 	bl	8004904 <BSP_LCD_DisplayStringAt>
}
 8004aba:	bf00      	nop
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004ac4:	b5b0      	push	{r4, r5, r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	4603      	mov	r3, r0
 8004acc:	80fb      	strh	r3, [r7, #6]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	80bb      	strh	r3, [r7, #4]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004ada:	4b26      	ldr	r3, [pc, #152]	; (8004b74 <BSP_LCD_DrawHLine+0xb0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a26      	ldr	r2, [pc, #152]	; (8004b78 <BSP_LCD_DrawHLine+0xb4>)
 8004ae0:	2134      	movs	r1, #52	; 0x34
 8004ae2:	fb01 f303 	mul.w	r3, r1, r3
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3348      	adds	r3, #72	; 0x48
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d114      	bne.n	8004b1a <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004af0:	4b20      	ldr	r3, [pc, #128]	; (8004b74 <BSP_LCD_DrawHLine+0xb0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a20      	ldr	r2, [pc, #128]	; (8004b78 <BSP_LCD_DrawHLine+0xb4>)
 8004af6:	2134      	movs	r1, #52	; 0x34
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	335c      	adds	r3, #92	; 0x5c
 8004b00:	681c      	ldr	r4, [r3, #0]
 8004b02:	f7ff fd99 	bl	8004638 <BSP_LCD_GetXSize>
 8004b06:	4602      	mov	r2, r0
 8004b08:	88bb      	ldrh	r3, [r7, #4]
 8004b0a:	fb03 f202 	mul.w	r2, r3, r2
 8004b0e:	88fb      	ldrh	r3, [r7, #6]
 8004b10:	4413      	add	r3, r2
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	4423      	add	r3, r4
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	e013      	b.n	8004b42 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004b1a:	4b16      	ldr	r3, [pc, #88]	; (8004b74 <BSP_LCD_DrawHLine+0xb0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a16      	ldr	r2, [pc, #88]	; (8004b78 <BSP_LCD_DrawHLine+0xb4>)
 8004b20:	2134      	movs	r1, #52	; 0x34
 8004b22:	fb01 f303 	mul.w	r3, r1, r3
 8004b26:	4413      	add	r3, r2
 8004b28:	335c      	adds	r3, #92	; 0x5c
 8004b2a:	681c      	ldr	r4, [r3, #0]
 8004b2c:	f7ff fd84 	bl	8004638 <BSP_LCD_GetXSize>
 8004b30:	4602      	mov	r2, r0
 8004b32:	88bb      	ldrh	r3, [r7, #4]
 8004b34:	fb03 f202 	mul.w	r2, r3, r2
 8004b38:	88fb      	ldrh	r3, [r7, #6]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4423      	add	r3, r4
 8004b40:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8004b42:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <BSP_LCD_DrawHLine+0xb0>)
 8004b44:	6818      	ldr	r0, [r3, #0]
 8004b46:	68f9      	ldr	r1, [r7, #12]
 8004b48:	887c      	ldrh	r4, [r7, #2]
 8004b4a:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <BSP_LCD_DrawHLine+0xb0>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4d0b      	ldr	r5, [pc, #44]	; (8004b7c <BSP_LCD_DrawHLine+0xb8>)
 8004b50:	4613      	mov	r3, r2
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	442b      	add	r3, r5
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	2301      	movs	r3, #1
 8004b64:	4622      	mov	r2, r4
 8004b66:	f000 fc3d 	bl	80053e4 <LL_FillBuffer>
}
 8004b6a:	bf00      	nop
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bdb0      	pop	{r4, r5, r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20015058 	.word	0x20015058
 8004b78:	20014f70 	.word	0x20014f70
 8004b7c:	2001505c 	.word	0x2001505c

08004b80 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	4603      	mov	r3, r0
 8004b88:	80fb      	strh	r3, [r7, #6]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	80bb      	strh	r3, [r7, #4]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004b96:	4b28      	ldr	r3, [pc, #160]	; (8004c38 <BSP_LCD_DrawVLine+0xb8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a28      	ldr	r2, [pc, #160]	; (8004c3c <BSP_LCD_DrawVLine+0xbc>)
 8004b9c:	2134      	movs	r1, #52	; 0x34
 8004b9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ba2:	4413      	add	r3, r2
 8004ba4:	3348      	adds	r3, #72	; 0x48
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d114      	bne.n	8004bd6 <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004bac:	4b22      	ldr	r3, [pc, #136]	; (8004c38 <BSP_LCD_DrawVLine+0xb8>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a22      	ldr	r2, [pc, #136]	; (8004c3c <BSP_LCD_DrawVLine+0xbc>)
 8004bb2:	2134      	movs	r1, #52	; 0x34
 8004bb4:	fb01 f303 	mul.w	r3, r1, r3
 8004bb8:	4413      	add	r3, r2
 8004bba:	335c      	adds	r3, #92	; 0x5c
 8004bbc:	681c      	ldr	r4, [r3, #0]
 8004bbe:	f7ff fd3b 	bl	8004638 <BSP_LCD_GetXSize>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	88bb      	ldrh	r3, [r7, #4]
 8004bc6:	fb03 f202 	mul.w	r2, r3, r2
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	4413      	add	r3, r2
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	4423      	add	r3, r4
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e013      	b.n	8004bfe <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004bd6:	4b18      	ldr	r3, [pc, #96]	; (8004c38 <BSP_LCD_DrawVLine+0xb8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a18      	ldr	r2, [pc, #96]	; (8004c3c <BSP_LCD_DrawVLine+0xbc>)
 8004bdc:	2134      	movs	r1, #52	; 0x34
 8004bde:	fb01 f303 	mul.w	r3, r1, r3
 8004be2:	4413      	add	r3, r2
 8004be4:	335c      	adds	r3, #92	; 0x5c
 8004be6:	681c      	ldr	r4, [r3, #0]
 8004be8:	f7ff fd26 	bl	8004638 <BSP_LCD_GetXSize>
 8004bec:	4602      	mov	r2, r0
 8004bee:	88bb      	ldrh	r3, [r7, #4]
 8004bf0:	fb03 f202 	mul.w	r2, r3, r2
 8004bf4:	88fb      	ldrh	r3, [r7, #6]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4423      	add	r3, r4
 8004bfc:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8004bfe:	4b0e      	ldr	r3, [pc, #56]	; (8004c38 <BSP_LCD_DrawVLine+0xb8>)
 8004c00:	681c      	ldr	r4, [r3, #0]
 8004c02:	68fd      	ldr	r5, [r7, #12]
 8004c04:	887e      	ldrh	r6, [r7, #2]
 8004c06:	f7ff fd17 	bl	8004638 <BSP_LCD_GetXSize>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	1e59      	subs	r1, r3, #1
 8004c0e:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <BSP_LCD_DrawVLine+0xb8>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	480b      	ldr	r0, [pc, #44]	; (8004c40 <BSP_LCD_DrawVLine+0xc0>)
 8004c14:	4613      	mov	r3, r2
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4403      	add	r3, r0
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	9301      	str	r3, [sp, #4]
 8004c22:	9100      	str	r1, [sp, #0]
 8004c24:	4633      	mov	r3, r6
 8004c26:	2201      	movs	r2, #1
 8004c28:	4629      	mov	r1, r5
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	f000 fbda 	bl	80053e4 <LL_FillBuffer>
}
 8004c30:	bf00      	nop
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c38:	20015058 	.word	0x20015058
 8004c3c:	20014f70 	.word	0x20014f70
 8004c40:	2001505c 	.word	0x2001505c

08004c44 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	4611      	mov	r1, r2
 8004c50:	461a      	mov	r2, r3
 8004c52:	4623      	mov	r3, r4
 8004c54:	80fb      	strh	r3, [r7, #6]
 8004c56:	4603      	mov	r3, r0
 8004c58:	80bb      	strh	r3, [r7, #4]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	807b      	strh	r3, [r7, #2]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8004c62:	887a      	ldrh	r2, [r7, #2]
 8004c64:	88b9      	ldrh	r1, [r7, #4]
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff ff2b 	bl	8004ac4 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8004c6e:	88ba      	ldrh	r2, [r7, #4]
 8004c70:	883b      	ldrh	r3, [r7, #0]
 8004c72:	4413      	add	r3, r2
 8004c74:	b299      	uxth	r1, r3
 8004c76:	887a      	ldrh	r2, [r7, #2]
 8004c78:	88fb      	ldrh	r3, [r7, #6]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff ff22 	bl	8004ac4 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8004c80:	883a      	ldrh	r2, [r7, #0]
 8004c82:	88b9      	ldrh	r1, [r7, #4]
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff ff7a 	bl	8004b80 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8004c8c:	88fa      	ldrh	r2, [r7, #6]
 8004c8e:	887b      	ldrh	r3, [r7, #2]
 8004c90:	4413      	add	r3, r2
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	883a      	ldrh	r2, [r7, #0]
 8004c96:	88b9      	ldrh	r1, [r7, #4]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff ff71 	bl	8004b80 <BSP_LCD_DrawVLine>
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd90      	pop	{r4, r7, pc}
	...

08004ca8 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004ca8:	b590      	push	{r4, r7, lr}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	4603      	mov	r3, r0
 8004cb0:	80fb      	strh	r3, [r7, #6]
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	80bb      	strh	r3, [r7, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8004cba:	887b      	ldrh	r3, [r7, #2]
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	f1c3 0303 	rsb	r3, r3, #3
 8004cc2:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8004cc8:	887b      	ldrh	r3, [r7, #2]
 8004cca:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8004ccc:	e0c7      	b.n	8004e5e <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	b298      	uxth	r0, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	88ba      	ldrh	r2, [r7, #4]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	b299      	uxth	r1, r3
 8004ce2:	4b64      	ldr	r3, [pc, #400]	; (8004e74 <BSP_LCD_DrawCircle+0x1cc>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4c64      	ldr	r4, [pc, #400]	; (8004e78 <BSP_LCD_DrawCircle+0x1d0>)
 8004ce8:	4613      	mov	r3, r2
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4423      	add	r3, r4
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	f000 f8c1 	bl	8004e7c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	88fa      	ldrh	r2, [r7, #6]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	b298      	uxth	r0, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	88ba      	ldrh	r2, [r7, #4]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	b299      	uxth	r1, r3
 8004d0e:	4b59      	ldr	r3, [pc, #356]	; (8004e74 <BSP_LCD_DrawCircle+0x1cc>)
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	4c59      	ldr	r4, [pc, #356]	; (8004e78 <BSP_LCD_DrawCircle+0x1d0>)
 8004d14:	4613      	mov	r3, r2
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4423      	add	r3, r4
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	f000 f8ab 	bl	8004e7c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	88fb      	ldrh	r3, [r7, #6]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	b298      	uxth	r0, r3
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	88ba      	ldrh	r2, [r7, #4]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	b299      	uxth	r1, r3
 8004d3a:	4b4e      	ldr	r3, [pc, #312]	; (8004e74 <BSP_LCD_DrawCircle+0x1cc>)
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4c4e      	ldr	r4, [pc, #312]	; (8004e78 <BSP_LCD_DrawCircle+0x1d0>)
 8004d40:	4613      	mov	r3, r2
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4423      	add	r3, r4
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	f000 f895 	bl	8004e7c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	88fa      	ldrh	r2, [r7, #6]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	b298      	uxth	r0, r3
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	88ba      	ldrh	r2, [r7, #4]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	b299      	uxth	r1, r3
 8004d66:	4b43      	ldr	r3, [pc, #268]	; (8004e74 <BSP_LCD_DrawCircle+0x1cc>)
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4c43      	ldr	r4, [pc, #268]	; (8004e78 <BSP_LCD_DrawCircle+0x1d0>)
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4423      	add	r3, r4
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	f000 f87f 	bl	8004e7c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	88fb      	ldrh	r3, [r7, #6]
 8004d84:	4413      	add	r3, r2
 8004d86:	b298      	uxth	r0, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	88bb      	ldrh	r3, [r7, #4]
 8004d8e:	4413      	add	r3, r2
 8004d90:	b299      	uxth	r1, r3
 8004d92:	4b38      	ldr	r3, [pc, #224]	; (8004e74 <BSP_LCD_DrawCircle+0x1cc>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4c38      	ldr	r4, [pc, #224]	; (8004e78 <BSP_LCD_DrawCircle+0x1d0>)
 8004d98:	4613      	mov	r3, r2
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4423      	add	r3, r4
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	461a      	mov	r2, r3
 8004da6:	f000 f869 	bl	8004e7c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	88fa      	ldrh	r2, [r7, #6]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	b298      	uxth	r0, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	88bb      	ldrh	r3, [r7, #4]
 8004dba:	4413      	add	r3, r2
 8004dbc:	b299      	uxth	r1, r3
 8004dbe:	4b2d      	ldr	r3, [pc, #180]	; (8004e74 <BSP_LCD_DrawCircle+0x1cc>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4c2d      	ldr	r4, [pc, #180]	; (8004e78 <BSP_LCD_DrawCircle+0x1d0>)
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4423      	add	r3, r4
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f000 f853 	bl	8004e7c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	88fb      	ldrh	r3, [r7, #6]
 8004ddc:	4413      	add	r3, r2
 8004dde:	b298      	uxth	r0, r3
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	88bb      	ldrh	r3, [r7, #4]
 8004de6:	4413      	add	r3, r2
 8004de8:	b299      	uxth	r1, r3
 8004dea:	4b22      	ldr	r3, [pc, #136]	; (8004e74 <BSP_LCD_DrawCircle+0x1cc>)
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	4c22      	ldr	r4, [pc, #136]	; (8004e78 <BSP_LCD_DrawCircle+0x1d0>)
 8004df0:	4613      	mov	r3, r2
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4423      	add	r3, r4
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	f000 f83d 	bl	8004e7c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	88fa      	ldrh	r2, [r7, #6]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	b298      	uxth	r0, r3
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	88bb      	ldrh	r3, [r7, #4]
 8004e12:	4413      	add	r3, r2
 8004e14:	b299      	uxth	r1, r3
 8004e16:	4b17      	ldr	r3, [pc, #92]	; (8004e74 <BSP_LCD_DrawCircle+0x1cc>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	4c17      	ldr	r4, [pc, #92]	; (8004e78 <BSP_LCD_DrawCircle+0x1d0>)
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4423      	add	r3, r4
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f000 f827 	bl	8004e7c <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	da06      	bge.n	8004e42 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	009a      	lsls	r2, r3, #2
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3306      	adds	r3, #6
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	e00a      	b.n	8004e58 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	009a      	lsls	r2, r3, #2
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	330a      	adds	r3, #10
 8004e50:	617b      	str	r3, [r7, #20]
      current_y--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	f67f af33 	bls.w	8004cce <BSP_LCD_DrawCircle+0x26>
  } 
}
 8004e68:	bf00      	nop
 8004e6a:	bf00      	nop
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd90      	pop	{r4, r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20015058 	.word	0x20015058
 8004e78:	2001505c 	.word	0x2001505c

08004e7c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004e7c:	b5b0      	push	{r4, r5, r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	4603      	mov	r3, r0
 8004e84:	603a      	str	r2, [r7, #0]
 8004e86:	80fb      	strh	r3, [r7, #6]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004e8c:	4b1d      	ldr	r3, [pc, #116]	; (8004f04 <BSP_LCD_DrawPixel+0x88>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a1d      	ldr	r2, [pc, #116]	; (8004f08 <BSP_LCD_DrawPixel+0x8c>)
 8004e92:	2134      	movs	r1, #52	; 0x34
 8004e94:	fb01 f303 	mul.w	r3, r1, r3
 8004e98:	4413      	add	r3, r2
 8004e9a:	3348      	adds	r3, #72	; 0x48
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d116      	bne.n	8004ed0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8004ea2:	4b18      	ldr	r3, [pc, #96]	; (8004f04 <BSP_LCD_DrawPixel+0x88>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a18      	ldr	r2, [pc, #96]	; (8004f08 <BSP_LCD_DrawPixel+0x8c>)
 8004ea8:	2134      	movs	r1, #52	; 0x34
 8004eaa:	fb01 f303 	mul.w	r3, r1, r3
 8004eae:	4413      	add	r3, r2
 8004eb0:	335c      	adds	r3, #92	; 0x5c
 8004eb2:	681c      	ldr	r4, [r3, #0]
 8004eb4:	88bd      	ldrh	r5, [r7, #4]
 8004eb6:	f7ff fbbf 	bl	8004638 <BSP_LCD_GetXSize>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	fb03 f205 	mul.w	r2, r3, r5
 8004ec0:	88fb      	ldrh	r3, [r7, #6]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	4423      	add	r3, r4
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	b292      	uxth	r2, r2
 8004ecc:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8004ece:	e015      	b.n	8004efc <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004ed0:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <BSP_LCD_DrawPixel+0x88>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a0c      	ldr	r2, [pc, #48]	; (8004f08 <BSP_LCD_DrawPixel+0x8c>)
 8004ed6:	2134      	movs	r1, #52	; 0x34
 8004ed8:	fb01 f303 	mul.w	r3, r1, r3
 8004edc:	4413      	add	r3, r2
 8004ede:	335c      	adds	r3, #92	; 0x5c
 8004ee0:	681c      	ldr	r4, [r3, #0]
 8004ee2:	88bd      	ldrh	r5, [r7, #4]
 8004ee4:	f7ff fba8 	bl	8004638 <BSP_LCD_GetXSize>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	fb03 f205 	mul.w	r2, r3, r5
 8004eee:	88fb      	ldrh	r3, [r7, #6]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4423      	add	r3, r4
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	6013      	str	r3, [r2, #0]
}
 8004efc:	bf00      	nop
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bdb0      	pop	{r4, r5, r7, pc}
 8004f04:	20015058 	.word	0x20015058
 8004f08:	20014f70 	.word	0x20014f70

08004f0c <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	80fb      	strh	r3, [r7, #6]
 8004f16:	460b      	mov	r3, r1
 8004f18:	80bb      	strh	r3, [r7, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8004f1e:	887b      	ldrh	r3, [r7, #2]
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	f1c3 0303 	rsb	r3, r3, #3
 8004f26:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8004f2c:	887b      	ldrh	r3, [r7, #2]
 8004f2e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004f30:	4b44      	ldr	r3, [pc, #272]	; (8005044 <BSP_LCD_FillCircle+0x138>)
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	4944      	ldr	r1, [pc, #272]	; (8005048 <BSP_LCD_FillCircle+0x13c>)
 8004f36:	4613      	mov	r3, r2
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff fc10 	bl	8004768 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8004f48:	e061      	b.n	800500e <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d021      	beq.n	8004f94 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	88fa      	ldrh	r2, [r7, #6]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	b298      	uxth	r0, r3
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	88bb      	ldrh	r3, [r7, #4]
 8004f60:	4413      	add	r3, r2
 8004f62:	b299      	uxth	r1, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	f7ff fda9 	bl	8004ac4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	88fa      	ldrh	r2, [r7, #6]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	b298      	uxth	r0, r3
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	88ba      	ldrh	r2, [r7, #4]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	b299      	uxth	r1, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f7ff fd98 	bl	8004ac4 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d021      	beq.n	8004fde <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	88fa      	ldrh	r2, [r7, #6]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	b298      	uxth	r0, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	88ba      	ldrh	r2, [r7, #4]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	b299      	uxth	r1, r3
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f7ff fd84 	bl	8004ac4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	88fa      	ldrh	r2, [r7, #6]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	b298      	uxth	r0, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	88bb      	ldrh	r3, [r7, #4]
 8004fcc:	4413      	add	r3, r2
 8004fce:	b299      	uxth	r1, r3
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	461a      	mov	r2, r3
 8004fda:	f7ff fd73 	bl	8004ac4 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	da06      	bge.n	8004ff2 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	009a      	lsls	r2, r3, #2
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	4413      	add	r3, r2
 8004fec:	3306      	adds	r3, #6
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	e00a      	b.n	8005008 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	009a      	lsls	r2, r3, #2
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	330a      	adds	r3, #10
 8005000:	617b      	str	r3, [r7, #20]
      current_y--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	3b01      	subs	r3, #1
 8005006:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	3301      	adds	r3, #1
 800500c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	429a      	cmp	r2, r3
 8005014:	d999      	bls.n	8004f4a <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8005016:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <BSP_LCD_FillCircle+0x138>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	490b      	ldr	r1, [pc, #44]	; (8005048 <BSP_LCD_FillCircle+0x13c>)
 800501c:	4613      	mov	r3, r2
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fb9d 	bl	8004768 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800502e:	887a      	ldrh	r2, [r7, #2]
 8005030:	88b9      	ldrh	r1, [r7, #4]
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff fe37 	bl	8004ca8 <BSP_LCD_DrawCircle>
}
 800503a:	bf00      	nop
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20015058 	.word	0x20015058
 8005048:	2001505c 	.word	0x2001505c

0800504c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8005050:	4b0a      	ldr	r3, [pc, #40]	; (800507c <BSP_LCD_DisplayOn+0x30>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	4b09      	ldr	r3, [pc, #36]	; (800507c <BSP_LCD_DisplayOn+0x30>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8005060:	2201      	movs	r2, #1
 8005062:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005066:	4806      	ldr	r0, [pc, #24]	; (8005080 <BSP_LCD_DisplayOn+0x34>)
 8005068:	f003 f9ba 	bl	80083e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800506c:	2201      	movs	r2, #1
 800506e:	2108      	movs	r1, #8
 8005070:	4804      	ldr	r0, [pc, #16]	; (8005084 <BSP_LCD_DisplayOn+0x38>)
 8005072:	f003 f9b5 	bl	80083e0 <HAL_GPIO_WritePin>
}
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20014f70 	.word	0x20014f70
 8005080:	40022000 	.word	0x40022000
 8005084:	40022800 	.word	0x40022800

08005088 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b090      	sub	sp, #64	; 0x40
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8005092:	4b64      	ldr	r3, [pc, #400]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 8005094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005096:	4a63      	ldr	r2, [pc, #396]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 8005098:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800509c:	6453      	str	r3, [r2, #68]	; 0x44
 800509e:	4b61      	ldr	r3, [pc, #388]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 80050a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80050aa:	4b5e      	ldr	r3, [pc, #376]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ae:	4a5d      	ldr	r2, [pc, #372]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 80050b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050b4:	6313      	str	r3, [r2, #48]	; 0x30
 80050b6:	4b5b      	ldr	r3, [pc, #364]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80050c2:	4b58      	ldr	r3, [pc, #352]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	4a57      	ldr	r2, [pc, #348]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 80050c8:	f043 0310 	orr.w	r3, r3, #16
 80050cc:	6313      	str	r3, [r2, #48]	; 0x30
 80050ce:	4b55      	ldr	r3, [pc, #340]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 80050d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d2:	f003 0310 	and.w	r3, r3, #16
 80050d6:	623b      	str	r3, [r7, #32]
 80050d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80050da:	4b52      	ldr	r3, [pc, #328]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	4a51      	ldr	r2, [pc, #324]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 80050e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050e4:	6313      	str	r3, [r2, #48]	; 0x30
 80050e6:	4b4f      	ldr	r3, [pc, #316]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ee:	61fb      	str	r3, [r7, #28]
 80050f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80050f2:	4b4c      	ldr	r3, [pc, #304]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	4a4b      	ldr	r2, [pc, #300]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 80050f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050fc:	6313      	str	r3, [r2, #48]	; 0x30
 80050fe:	4b49      	ldr	r3, [pc, #292]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005106:	61bb      	str	r3, [r7, #24]
 8005108:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800510a:	4b46      	ldr	r3, [pc, #280]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	4a45      	ldr	r2, [pc, #276]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 8005110:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005114:	6313      	str	r3, [r2, #48]	; 0x30
 8005116:	4b43      	ldr	r3, [pc, #268]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 8005118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8005122:	4b40      	ldr	r3, [pc, #256]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	4a3f      	ldr	r2, [pc, #252]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 8005128:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800512c:	6313      	str	r3, [r2, #48]	; 0x30
 800512e:	4b3d      	ldr	r3, [pc, #244]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800513a:	4b3a      	ldr	r3, [pc, #232]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 800513c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513e:	4a39      	ldr	r2, [pc, #228]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 8005140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005144:	6313      	str	r3, [r2, #48]	; 0x30
 8005146:	4b37      	ldr	r3, [pc, #220]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8005152:	4b34      	ldr	r3, [pc, #208]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	4a33      	ldr	r2, [pc, #204]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 8005158:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800515c:	6313      	str	r3, [r2, #48]	; 0x30
 800515e:	4b31      	ldr	r3, [pc, #196]	; (8005224 <BSP_LCD_MspInit+0x19c>)
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005166:	60bb      	str	r3, [r7, #8]
 8005168:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800516a:	2310      	movs	r3, #16
 800516c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800516e:	2302      	movs	r3, #2
 8005170:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005172:	2300      	movs	r3, #0
 8005174:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005176:	2302      	movs	r3, #2
 8005178:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800517a:	230e      	movs	r3, #14
 800517c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800517e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005182:	4619      	mov	r1, r3
 8005184:	4828      	ldr	r0, [pc, #160]	; (8005228 <BSP_LCD_MspInit+0x1a0>)
 8005186:	f002 fe5b 	bl	8007e40 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800518a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800518e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005190:	2302      	movs	r3, #2
 8005192:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8005194:	2309      	movs	r3, #9
 8005196:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800519c:	4619      	mov	r1, r3
 800519e:	4823      	ldr	r0, [pc, #140]	; (800522c <BSP_LCD_MspInit+0x1a4>)
 80051a0:	f002 fe4e 	bl	8007e40 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80051a4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80051aa:	2302      	movs	r3, #2
 80051ac:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80051ae:	230e      	movs	r3, #14
 80051b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80051b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051b6:	4619      	mov	r1, r3
 80051b8:	481d      	ldr	r0, [pc, #116]	; (8005230 <BSP_LCD_MspInit+0x1a8>)
 80051ba:	f002 fe41 	bl	8007e40 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80051be:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80051c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80051c4:	2302      	movs	r3, #2
 80051c6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80051c8:	230e      	movs	r3, #14
 80051ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80051cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051d0:	4619      	mov	r1, r3
 80051d2:	4818      	ldr	r0, [pc, #96]	; (8005234 <BSP_LCD_MspInit+0x1ac>)
 80051d4:	f002 fe34 	bl	8007e40 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80051d8:	23f7      	movs	r3, #247	; 0xf7
 80051da:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80051dc:	2302      	movs	r3, #2
 80051de:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80051e0:	230e      	movs	r3, #14
 80051e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80051e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051e8:	4619      	mov	r1, r3
 80051ea:	4813      	ldr	r0, [pc, #76]	; (8005238 <BSP_LCD_MspInit+0x1b0>)
 80051ec:	f002 fe28 	bl	8007e40 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80051f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80051f6:	2301      	movs	r3, #1
 80051f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80051fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051fe:	4619      	mov	r1, r3
 8005200:	480b      	ldr	r0, [pc, #44]	; (8005230 <BSP_LCD_MspInit+0x1a8>)
 8005202:	f002 fe1d 	bl	8007e40 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8005206:	2308      	movs	r3, #8
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800520a:	2301      	movs	r3, #1
 800520c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800520e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005212:	4619      	mov	r1, r3
 8005214:	4808      	ldr	r0, [pc, #32]	; (8005238 <BSP_LCD_MspInit+0x1b0>)
 8005216:	f002 fe13 	bl	8007e40 <HAL_GPIO_Init>
}
 800521a:	bf00      	nop
 800521c:	3740      	adds	r7, #64	; 0x40
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40023800 	.word	0x40023800
 8005228:	40021000 	.word	0x40021000
 800522c:	40021800 	.word	0x40021800
 8005230:	40022000 	.word	0x40022000
 8005234:	40022400 	.word	0x40022400
 8005238:	40022800 	.word	0x40022800

0800523c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005246:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <BSP_LCD_ClockConfig+0x34>)
 8005248:	2208      	movs	r2, #8
 800524a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800524c:	4b08      	ldr	r3, [pc, #32]	; (8005270 <BSP_LCD_ClockConfig+0x34>)
 800524e:	22c0      	movs	r2, #192	; 0xc0
 8005250:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8005252:	4b07      	ldr	r3, [pc, #28]	; (8005270 <BSP_LCD_ClockConfig+0x34>)
 8005254:	2205      	movs	r2, #5
 8005256:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8005258:	4b05      	ldr	r3, [pc, #20]	; (8005270 <BSP_LCD_ClockConfig+0x34>)
 800525a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800525e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8005260:	4803      	ldr	r0, [pc, #12]	; (8005270 <BSP_LCD_ClockConfig+0x34>)
 8005262:	f004 fe59 	bl	8009f18 <HAL_RCCEx_PeriphCLKConfig>
}
 8005266:	bf00      	nop
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	20015074 	.word	0x20015074

08005274 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	603a      	str	r2, [r7, #0]
 800527e:	80fb      	strh	r3, [r7, #6]
 8005280:	460b      	mov	r3, r1
 8005282:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	61fb      	str	r3, [r7, #28]
 8005288:	2300      	movs	r3, #0
 800528a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800528c:	4b53      	ldr	r3, [pc, #332]	; (80053dc <DrawChar+0x168>)
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	4953      	ldr	r1, [pc, #332]	; (80053e0 <DrawChar+0x16c>)
 8005292:	4613      	mov	r3, r2
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	3308      	adds	r3, #8
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	88db      	ldrh	r3, [r3, #6]
 80052a2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80052a4:	4b4d      	ldr	r3, [pc, #308]	; (80053dc <DrawChar+0x168>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	494d      	ldr	r1, [pc, #308]	; (80053e0 <DrawChar+0x16c>)
 80052aa:	4613      	mov	r3, r2
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	440b      	add	r3, r1
 80052b4:	3308      	adds	r3, #8
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	889b      	ldrh	r3, [r3, #4]
 80052ba:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80052bc:	8a3b      	ldrh	r3, [r7, #16]
 80052be:	3307      	adds	r3, #7
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	da00      	bge.n	80052c6 <DrawChar+0x52>
 80052c4:	3307      	adds	r3, #7
 80052c6:	10db      	asrs	r3, r3, #3
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	8a3b      	ldrh	r3, [r7, #16]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80052d6:	2300      	movs	r3, #0
 80052d8:	61fb      	str	r3, [r7, #28]
 80052da:	e076      	b.n	80053ca <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80052dc:	8a3b      	ldrh	r3, [r7, #16]
 80052de:	3307      	adds	r3, #7
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	da00      	bge.n	80052e6 <DrawChar+0x72>
 80052e4:	3307      	adds	r3, #7
 80052e6:	10db      	asrs	r3, r3, #3
 80052e8:	461a      	mov	r2, r3
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	fb02 f303 	mul.w	r3, r2, r3
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	4413      	add	r3, r2
 80052f4:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80052f6:	8a3b      	ldrh	r3, [r7, #16]
 80052f8:	3307      	adds	r3, #7
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	da00      	bge.n	8005300 <DrawChar+0x8c>
 80052fe:	3307      	adds	r3, #7
 8005300:	10db      	asrs	r3, r3, #3
 8005302:	2b01      	cmp	r3, #1
 8005304:	d002      	beq.n	800530c <DrawChar+0x98>
 8005306:	2b02      	cmp	r3, #2
 8005308:	d004      	beq.n	8005314 <DrawChar+0xa0>
 800530a:	e00c      	b.n	8005326 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	617b      	str	r3, [r7, #20]
      break;
 8005312:	e016      	b.n	8005342 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	021b      	lsls	r3, r3, #8
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	3201      	adds	r2, #1
 800531e:	7812      	ldrb	r2, [r2, #0]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]
      break;
 8005324:	e00d      	b.n	8005342 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	041a      	lsls	r2, r3, #16
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	3301      	adds	r3, #1
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	4313      	orrs	r3, r2
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	3202      	adds	r2, #2
 800533a:	7812      	ldrb	r2, [r2, #0]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
      break;
 8005340:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8005342:	2300      	movs	r3, #0
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	e036      	b.n	80053b6 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8005348:	8a3a      	ldrh	r2, [r7, #16]
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	1ad2      	subs	r2, r2, r3
 800534e:	7bfb      	ldrb	r3, [r7, #15]
 8005350:	4413      	add	r3, r2
 8005352:	3b01      	subs	r3, #1
 8005354:	2201      	movs	r2, #1
 8005356:	fa02 f303 	lsl.w	r3, r2, r3
 800535a:	461a      	mov	r2, r3
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	4013      	ands	r3, r2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d012      	beq.n	800538a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	b29a      	uxth	r2, r3
 8005368:	88fb      	ldrh	r3, [r7, #6]
 800536a:	4413      	add	r3, r2
 800536c:	b298      	uxth	r0, r3
 800536e:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <DrawChar+0x168>)
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	491b      	ldr	r1, [pc, #108]	; (80053e0 <DrawChar+0x16c>)
 8005374:	4613      	mov	r3, r2
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	4413      	add	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	88bb      	ldrh	r3, [r7, #4]
 8005382:	4619      	mov	r1, r3
 8005384:	f7ff fd7a 	bl	8004e7c <BSP_LCD_DrawPixel>
 8005388:	e012      	b.n	80053b0 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	b29a      	uxth	r2, r3
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	4413      	add	r3, r2
 8005392:	b298      	uxth	r0, r3
 8005394:	4b11      	ldr	r3, [pc, #68]	; (80053dc <DrawChar+0x168>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	4911      	ldr	r1, [pc, #68]	; (80053e0 <DrawChar+0x16c>)
 800539a:	4613      	mov	r3, r2
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	4413      	add	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	440b      	add	r3, r1
 80053a4:	3304      	adds	r3, #4
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	88bb      	ldrh	r3, [r7, #4]
 80053aa:	4619      	mov	r1, r3
 80053ac:	f7ff fd66 	bl	8004e7c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	3301      	adds	r3, #1
 80053b4:	61bb      	str	r3, [r7, #24]
 80053b6:	8a3b      	ldrh	r3, [r7, #16]
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d3c4      	bcc.n	8005348 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80053be:	88bb      	ldrh	r3, [r7, #4]
 80053c0:	3301      	adds	r3, #1
 80053c2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	3301      	adds	r3, #1
 80053c8:	61fb      	str	r3, [r7, #28]
 80053ca:	8a7b      	ldrh	r3, [r7, #18]
 80053cc:	69fa      	ldr	r2, [r7, #28]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d384      	bcc.n	80052dc <DrawChar+0x68>
  }
}
 80053d2:	bf00      	nop
 80053d4:	bf00      	nop
 80053d6:	3720      	adds	r7, #32
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	20015058 	.word	0x20015058
 80053e0:	2001505c 	.word	0x2001505c

080053e4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80053f2:	4b1e      	ldr	r3, [pc, #120]	; (800546c <LL_FillBuffer+0x88>)
 80053f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80053f8:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80053fa:	4b1d      	ldr	r3, [pc, #116]	; (8005470 <LL_FillBuffer+0x8c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <LL_FillBuffer+0x90>)
 8005400:	2134      	movs	r1, #52	; 0x34
 8005402:	fb01 f303 	mul.w	r3, r1, r3
 8005406:	4413      	add	r3, r2
 8005408:	3348      	adds	r3, #72	; 0x48
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b02      	cmp	r3, #2
 800540e:	d103      	bne.n	8005418 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8005410:	4b16      	ldr	r3, [pc, #88]	; (800546c <LL_FillBuffer+0x88>)
 8005412:	2202      	movs	r2, #2
 8005414:	609a      	str	r2, [r3, #8]
 8005416:	e002      	b.n	800541e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8005418:	4b14      	ldr	r3, [pc, #80]	; (800546c <LL_FillBuffer+0x88>)
 800541a:	2200      	movs	r2, #0
 800541c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800541e:	4a13      	ldr	r2, [pc, #76]	; (800546c <LL_FillBuffer+0x88>)
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8005424:	4b11      	ldr	r3, [pc, #68]	; (800546c <LL_FillBuffer+0x88>)
 8005426:	4a14      	ldr	r2, [pc, #80]	; (8005478 <LL_FillBuffer+0x94>)
 8005428:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800542a:	4810      	ldr	r0, [pc, #64]	; (800546c <LL_FillBuffer+0x88>)
 800542c:	f002 fa72 	bl	8007914 <HAL_DMA2D_Init>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d115      	bne.n	8005462 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8005436:	68f9      	ldr	r1, [r7, #12]
 8005438:	480c      	ldr	r0, [pc, #48]	; (800546c <LL_FillBuffer+0x88>)
 800543a:	f002 fbd3 	bl	8007be4 <HAL_DMA2D_ConfigLayer>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10e      	bne.n	8005462 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69f9      	ldr	r1, [r7, #28]
 800544e:	4807      	ldr	r0, [pc, #28]	; (800546c <LL_FillBuffer+0x88>)
 8005450:	f002 fab4 	bl	80079bc <HAL_DMA2D_Start>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d103      	bne.n	8005462 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800545a:	210a      	movs	r1, #10
 800545c:	4803      	ldr	r0, [pc, #12]	; (800546c <LL_FillBuffer+0x88>)
 800545e:	f002 fad8 	bl	8007a12 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8005462:	bf00      	nop
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20015018 	.word	0x20015018
 8005470:	20015058 	.word	0x20015058
 8005474:	20014f70 	.word	0x20014f70
 8005478:	4002b000 	.word	0x4002b000

0800547c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8005480:	4b29      	ldr	r3, [pc, #164]	; (8005528 <BSP_SDRAM_Init+0xac>)
 8005482:	4a2a      	ldr	r2, [pc, #168]	; (800552c <BSP_SDRAM_Init+0xb0>)
 8005484:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8005486:	4b2a      	ldr	r3, [pc, #168]	; (8005530 <BSP_SDRAM_Init+0xb4>)
 8005488:	2202      	movs	r2, #2
 800548a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800548c:	4b28      	ldr	r3, [pc, #160]	; (8005530 <BSP_SDRAM_Init+0xb4>)
 800548e:	2207      	movs	r2, #7
 8005490:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8005492:	4b27      	ldr	r3, [pc, #156]	; (8005530 <BSP_SDRAM_Init+0xb4>)
 8005494:	2204      	movs	r2, #4
 8005496:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8005498:	4b25      	ldr	r3, [pc, #148]	; (8005530 <BSP_SDRAM_Init+0xb4>)
 800549a:	2207      	movs	r2, #7
 800549c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800549e:	4b24      	ldr	r3, [pc, #144]	; (8005530 <BSP_SDRAM_Init+0xb4>)
 80054a0:	2202      	movs	r2, #2
 80054a2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80054a4:	4b22      	ldr	r3, [pc, #136]	; (8005530 <BSP_SDRAM_Init+0xb4>)
 80054a6:	2202      	movs	r2, #2
 80054a8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80054aa:	4b21      	ldr	r3, [pc, #132]	; (8005530 <BSP_SDRAM_Init+0xb4>)
 80054ac:	2202      	movs	r2, #2
 80054ae:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80054b0:	4b1d      	ldr	r3, [pc, #116]	; (8005528 <BSP_SDRAM_Init+0xac>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80054b6:	4b1c      	ldr	r3, [pc, #112]	; (8005528 <BSP_SDRAM_Init+0xac>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80054bc:	4b1a      	ldr	r3, [pc, #104]	; (8005528 <BSP_SDRAM_Init+0xac>)
 80054be:	2204      	movs	r2, #4
 80054c0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80054c2:	4b19      	ldr	r3, [pc, #100]	; (8005528 <BSP_SDRAM_Init+0xac>)
 80054c4:	2210      	movs	r2, #16
 80054c6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80054c8:	4b17      	ldr	r3, [pc, #92]	; (8005528 <BSP_SDRAM_Init+0xac>)
 80054ca:	2240      	movs	r2, #64	; 0x40
 80054cc:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80054ce:	4b16      	ldr	r3, [pc, #88]	; (8005528 <BSP_SDRAM_Init+0xac>)
 80054d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054d4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80054d6:	4b14      	ldr	r3, [pc, #80]	; (8005528 <BSP_SDRAM_Init+0xac>)
 80054d8:	2200      	movs	r2, #0
 80054da:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80054dc:	4b12      	ldr	r3, [pc, #72]	; (8005528 <BSP_SDRAM_Init+0xac>)
 80054de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054e2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80054e4:	4b10      	ldr	r3, [pc, #64]	; (8005528 <BSP_SDRAM_Init+0xac>)
 80054e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054ea:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80054ec:	4b0e      	ldr	r3, [pc, #56]	; (8005528 <BSP_SDRAM_Init+0xac>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80054f2:	2100      	movs	r1, #0
 80054f4:	480c      	ldr	r0, [pc, #48]	; (8005528 <BSP_SDRAM_Init+0xac>)
 80054f6:	f000 f87f 	bl	80055f8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80054fa:	490d      	ldr	r1, [pc, #52]	; (8005530 <BSP_SDRAM_Init+0xb4>)
 80054fc:	480a      	ldr	r0, [pc, #40]	; (8005528 <BSP_SDRAM_Init+0xac>)
 80054fe:	f005 ffee 	bl	800b4de <HAL_SDRAM_Init>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d003      	beq.n	8005510 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <BSP_SDRAM_Init+0xb8>)
 800550a:	2201      	movs	r2, #1
 800550c:	701a      	strb	r2, [r3, #0]
 800550e:	e002      	b.n	8005516 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8005510:	4b08      	ldr	r3, [pc, #32]	; (8005534 <BSP_SDRAM_Init+0xb8>)
 8005512:	2200      	movs	r2, #0
 8005514:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8005516:	f240 6003 	movw	r0, #1539	; 0x603
 800551a:	f000 f80d 	bl	8005538 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800551e:	4b05      	ldr	r3, [pc, #20]	; (8005534 <BSP_SDRAM_Init+0xb8>)
 8005520:	781b      	ldrb	r3, [r3, #0]
}
 8005522:	4618      	mov	r0, r3
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	200150f8 	.word	0x200150f8
 800552c:	a0000140 	.word	0xa0000140
 8005530:	2001512c 	.word	0x2001512c
 8005534:	200002c8 	.word	0x200002c8

08005538 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005544:	4b2a      	ldr	r3, [pc, #168]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005546:	2201      	movs	r2, #1
 8005548:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800554a:	4b29      	ldr	r3, [pc, #164]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800554c:	2210      	movs	r2, #16
 800554e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005550:	4b27      	ldr	r3, [pc, #156]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005552:	2201      	movs	r2, #1
 8005554:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005556:	4b26      	ldr	r3, [pc, #152]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005558:	2200      	movs	r2, #0
 800555a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800555c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005560:	4923      	ldr	r1, [pc, #140]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005562:	4824      	ldr	r0, [pc, #144]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005564:	f005 fff9 	bl	800b55a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005568:	2001      	movs	r0, #1
 800556a:	f001 fb79 	bl	8006c60 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800556e:	4b20      	ldr	r3, [pc, #128]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005570:	2202      	movs	r2, #2
 8005572:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005574:	4b1e      	ldr	r3, [pc, #120]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005576:	2210      	movs	r2, #16
 8005578:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800557a:	4b1d      	ldr	r3, [pc, #116]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800557c:	2201      	movs	r2, #1
 800557e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005580:	4b1b      	ldr	r3, [pc, #108]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005582:	2200      	movs	r2, #0
 8005584:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8005586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800558a:	4919      	ldr	r1, [pc, #100]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800558c:	4819      	ldr	r0, [pc, #100]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800558e:	f005 ffe4 	bl	800b55a <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005592:	4b17      	ldr	r3, [pc, #92]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005594:	2203      	movs	r2, #3
 8005596:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005598:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800559a:	2210      	movs	r2, #16
 800559c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800559e:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055a0:	2208      	movs	r2, #8
 80055a2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80055a4:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80055aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055ae:	4910      	ldr	r1, [pc, #64]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055b0:	4810      	ldr	r0, [pc, #64]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80055b2:	f005 ffd2 	bl	800b55a <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80055b6:	f44f 7308 	mov.w	r3, #544	; 0x220
 80055ba:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80055bc:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055be:	2204      	movs	r2, #4
 80055c0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80055c2:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055c4:	2210      	movs	r2, #16
 80055c6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80055c8:	4b09      	ldr	r3, [pc, #36]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055ca:	2201      	movs	r2, #1
 80055cc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	4a07      	ldr	r2, [pc, #28]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055d2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80055d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055d8:	4905      	ldr	r1, [pc, #20]	; (80055f0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80055da:	4806      	ldr	r0, [pc, #24]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80055dc:	f005 ffbd 	bl	800b55a <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	4804      	ldr	r0, [pc, #16]	; (80055f4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80055e4:	f005 ffee 	bl	800b5c4 <HAL_SDRAM_ProgramRefreshRate>
}
 80055e8:	bf00      	nop
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	20015148 	.word	0x20015148
 80055f4:	200150f8 	.word	0x200150f8

080055f8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b090      	sub	sp, #64	; 0x40
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005602:	4b70      	ldr	r3, [pc, #448]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 8005604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005606:	4a6f      	ldr	r2, [pc, #444]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 8005608:	f043 0301 	orr.w	r3, r3, #1
 800560c:	6393      	str	r3, [r2, #56]	; 0x38
 800560e:	4b6d      	ldr	r3, [pc, #436]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	62bb      	str	r3, [r7, #40]	; 0x28
 8005618:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800561a:	4b6a      	ldr	r3, [pc, #424]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	4a69      	ldr	r2, [pc, #420]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 8005620:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005624:	6313      	str	r3, [r2, #48]	; 0x30
 8005626:	4b67      	ldr	r3, [pc, #412]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800562e:	627b      	str	r3, [r7, #36]	; 0x24
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005632:	4b64      	ldr	r3, [pc, #400]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	4a63      	ldr	r2, [pc, #396]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 8005638:	f043 0304 	orr.w	r3, r3, #4
 800563c:	6313      	str	r3, [r2, #48]	; 0x30
 800563e:	4b61      	ldr	r3, [pc, #388]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	623b      	str	r3, [r7, #32]
 8005648:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800564a:	4b5e      	ldr	r3, [pc, #376]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	4a5d      	ldr	r2, [pc, #372]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 8005650:	f043 0308 	orr.w	r3, r3, #8
 8005654:	6313      	str	r3, [r2, #48]	; 0x30
 8005656:	4b5b      	ldr	r3, [pc, #364]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	61fb      	str	r3, [r7, #28]
 8005660:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005662:	4b58      	ldr	r3, [pc, #352]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 8005664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005666:	4a57      	ldr	r2, [pc, #348]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 8005668:	f043 0310 	orr.w	r3, r3, #16
 800566c:	6313      	str	r3, [r2, #48]	; 0x30
 800566e:	4b55      	ldr	r3, [pc, #340]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	f003 0310 	and.w	r3, r3, #16
 8005676:	61bb      	str	r3, [r7, #24]
 8005678:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800567a:	4b52      	ldr	r3, [pc, #328]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	4a51      	ldr	r2, [pc, #324]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 8005680:	f043 0320 	orr.w	r3, r3, #32
 8005684:	6313      	str	r3, [r2, #48]	; 0x30
 8005686:	4b4f      	ldr	r3, [pc, #316]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005692:	4b4c      	ldr	r3, [pc, #304]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	4a4b      	ldr	r2, [pc, #300]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 8005698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800569c:	6313      	str	r3, [r2, #48]	; 0x30
 800569e:	4b49      	ldr	r3, [pc, #292]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a6:	613b      	str	r3, [r7, #16]
 80056a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80056aa:	4b46      	ldr	r3, [pc, #280]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	4a45      	ldr	r2, [pc, #276]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 80056b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b4:	6313      	str	r3, [r2, #48]	; 0x30
 80056b6:	4b43      	ldr	r3, [pc, #268]	; (80057c4 <BSP_SDRAM_MspInit+0x1cc>)
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80056c2:	2302      	movs	r3, #2
 80056c4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80056c6:	2301      	movs	r3, #1
 80056c8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80056ca:	2302      	movs	r3, #2
 80056cc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80056ce:	230c      	movs	r3, #12
 80056d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80056d2:	2308      	movs	r3, #8
 80056d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80056d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056da:	4619      	mov	r1, r3
 80056dc:	483a      	ldr	r0, [pc, #232]	; (80057c8 <BSP_SDRAM_MspInit+0x1d0>)
 80056de:	f002 fbaf 	bl	8007e40 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80056e2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80056e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056ec:	4619      	mov	r1, r3
 80056ee:	4837      	ldr	r0, [pc, #220]	; (80057cc <BSP_SDRAM_MspInit+0x1d4>)
 80056f0:	f002 fba6 	bl	8007e40 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80056f4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80056f8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80056fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056fe:	4619      	mov	r1, r3
 8005700:	4833      	ldr	r0, [pc, #204]	; (80057d0 <BSP_SDRAM_MspInit+0x1d8>)
 8005702:	f002 fb9d 	bl	8007e40 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005706:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800570a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800570c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005710:	4619      	mov	r1, r3
 8005712:	4830      	ldr	r0, [pc, #192]	; (80057d4 <BSP_SDRAM_MspInit+0x1dc>)
 8005714:	f002 fb94 	bl	8007e40 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8005718:	f248 1333 	movw	r3, #33075	; 0x8133
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800571e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005722:	4619      	mov	r1, r3
 8005724:	482c      	ldr	r0, [pc, #176]	; (80057d8 <BSP_SDRAM_MspInit+0x1e0>)
 8005726:	f002 fb8b 	bl	8007e40 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800572a:	2328      	movs	r3, #40	; 0x28
 800572c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800572e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005732:	4619      	mov	r1, r3
 8005734:	4829      	ldr	r0, [pc, #164]	; (80057dc <BSP_SDRAM_MspInit+0x1e4>)
 8005736:	f002 fb83 	bl	8007e40 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800573a:	4b29      	ldr	r3, [pc, #164]	; (80057e0 <BSP_SDRAM_MspInit+0x1e8>)
 800573c:	2200      	movs	r2, #0
 800573e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8005740:	4b27      	ldr	r3, [pc, #156]	; (80057e0 <BSP_SDRAM_MspInit+0x1e8>)
 8005742:	2280      	movs	r2, #128	; 0x80
 8005744:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8005746:	4b26      	ldr	r3, [pc, #152]	; (80057e0 <BSP_SDRAM_MspInit+0x1e8>)
 8005748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800574c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800574e:	4b24      	ldr	r3, [pc, #144]	; (80057e0 <BSP_SDRAM_MspInit+0x1e8>)
 8005750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005754:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005756:	4b22      	ldr	r3, [pc, #136]	; (80057e0 <BSP_SDRAM_MspInit+0x1e8>)
 8005758:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800575c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800575e:	4b20      	ldr	r3, [pc, #128]	; (80057e0 <BSP_SDRAM_MspInit+0x1e8>)
 8005760:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005764:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8005766:	4b1e      	ldr	r3, [pc, #120]	; (80057e0 <BSP_SDRAM_MspInit+0x1e8>)
 8005768:	2200      	movs	r2, #0
 800576a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800576c:	4b1c      	ldr	r3, [pc, #112]	; (80057e0 <BSP_SDRAM_MspInit+0x1e8>)
 800576e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005772:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8005774:	4b1a      	ldr	r3, [pc, #104]	; (80057e0 <BSP_SDRAM_MspInit+0x1e8>)
 8005776:	2200      	movs	r2, #0
 8005778:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800577a:	4b19      	ldr	r3, [pc, #100]	; (80057e0 <BSP_SDRAM_MspInit+0x1e8>)
 800577c:	2203      	movs	r2, #3
 800577e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005780:	4b17      	ldr	r3, [pc, #92]	; (80057e0 <BSP_SDRAM_MspInit+0x1e8>)
 8005782:	2200      	movs	r2, #0
 8005784:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005786:	4b16      	ldr	r3, [pc, #88]	; (80057e0 <BSP_SDRAM_MspInit+0x1e8>)
 8005788:	2200      	movs	r2, #0
 800578a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800578c:	4b14      	ldr	r3, [pc, #80]	; (80057e0 <BSP_SDRAM_MspInit+0x1e8>)
 800578e:	4a15      	ldr	r2, [pc, #84]	; (80057e4 <BSP_SDRAM_MspInit+0x1ec>)
 8005790:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a12      	ldr	r2, [pc, #72]	; (80057e0 <BSP_SDRAM_MspInit+0x1e8>)
 8005796:	631a      	str	r2, [r3, #48]	; 0x30
 8005798:	4a11      	ldr	r2, [pc, #68]	; (80057e0 <BSP_SDRAM_MspInit+0x1e8>)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800579e:	4810      	ldr	r0, [pc, #64]	; (80057e0 <BSP_SDRAM_MspInit+0x1e8>)
 80057a0:	f001 fcfe 	bl	80071a0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80057a4:	480e      	ldr	r0, [pc, #56]	; (80057e0 <BSP_SDRAM_MspInit+0x1e8>)
 80057a6:	f001 fc4d 	bl	8007044 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80057aa:	2200      	movs	r2, #0
 80057ac:	210f      	movs	r1, #15
 80057ae:	2038      	movs	r0, #56	; 0x38
 80057b0:	f001 fb79 	bl	8006ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80057b4:	2038      	movs	r0, #56	; 0x38
 80057b6:	f001 fb92 	bl	8006ede <HAL_NVIC_EnableIRQ>
}
 80057ba:	bf00      	nop
 80057bc:	3740      	adds	r7, #64	; 0x40
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40023800 	.word	0x40023800
 80057c8:	40020800 	.word	0x40020800
 80057cc:	40020c00 	.word	0x40020c00
 80057d0:	40021000 	.word	0x40021000
 80057d4:	40021400 	.word	0x40021400
 80057d8:	40021800 	.word	0x40021800
 80057dc:	40021c00 	.word	0x40021c00
 80057e0:	20015158 	.word	0x20015158
 80057e4:	40026410 	.word	0x40026410

080057e8 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	4603      	mov	r3, r0
 80057f0:	460a      	mov	r2, r1
 80057f2:	80fb      	strh	r3, [r7, #6]
 80057f4:	4613      	mov	r3, r2
 80057f6:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80057fc:	4a14      	ldr	r2, [pc, #80]	; (8005850 <BSP_TS_Init+0x68>)
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8005802:	4a14      	ldr	r2, [pc, #80]	; (8005854 <BSP_TS_Init+0x6c>)
 8005804:	88bb      	ldrh	r3, [r7, #4]
 8005806:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8005808:	4b13      	ldr	r3, [pc, #76]	; (8005858 <BSP_TS_Init+0x70>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2070      	movs	r0, #112	; 0x70
 800580e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8005810:	4b11      	ldr	r3, [pc, #68]	; (8005858 <BSP_TS_Init+0x70>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2070      	movs	r0, #112	; 0x70
 8005816:	4798      	blx	r3
 8005818:	4603      	mov	r3, r0
 800581a:	2b51      	cmp	r3, #81	; 0x51
 800581c:	d111      	bne.n	8005842 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800581e:	4b0f      	ldr	r3, [pc, #60]	; (800585c <BSP_TS_Init+0x74>)
 8005820:	4a0d      	ldr	r2, [pc, #52]	; (8005858 <BSP_TS_Init+0x70>)
 8005822:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8005824:	4b0e      	ldr	r3, [pc, #56]	; (8005860 <BSP_TS_Init+0x78>)
 8005826:	2270      	movs	r2, #112	; 0x70
 8005828:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800582a:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <BSP_TS_Init+0x7c>)
 800582c:	2208      	movs	r2, #8
 800582e:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8005830:	4b0a      	ldr	r3, [pc, #40]	; (800585c <BSP_TS_Init+0x74>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	4a0a      	ldr	r2, [pc, #40]	; (8005860 <BSP_TS_Init+0x78>)
 8005838:	7812      	ldrb	r2, [r2, #0]
 800583a:	b292      	uxth	r2, r2
 800583c:	4610      	mov	r0, r2
 800583e:	4798      	blx	r3
 8005840:	e001      	b.n	8005846 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8005842:	2303      	movs	r3, #3
 8005844:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005846:	7bfb      	ldrb	r3, [r7, #15]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	200151bc 	.word	0x200151bc
 8005854:	200151be 	.word	0x200151be
 8005858:	20000258 	.word	0x20000258
 800585c:	200151b8 	.word	0x200151b8
 8005860:	200151c1 	.word	0x200151c1
 8005864:	200151c0 	.word	0x200151c0

08005868 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8005868:	b590      	push	{r4, r7, lr}
 800586a:	b097      	sub	sp, #92	; 0x5c
 800586c:	af02      	add	r7, sp, #8
 800586e:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8005876:	2300      	movs	r3, #0
 8005878:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800587e:	2300      	movs	r3, #0
 8005880:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8005882:	4bb4      	ldr	r3, [pc, #720]	; (8005b54 <BSP_TS_GetState+0x2ec>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	4ab3      	ldr	r2, [pc, #716]	; (8005b58 <BSP_TS_GetState+0x2f0>)
 800588a:	7812      	ldrb	r2, [r2, #0]
 800588c:	b292      	uxth	r2, r2
 800588e:	4610      	mov	r0, r2
 8005890:	4798      	blx	r3
 8005892:	4603      	mov	r3, r0
 8005894:	461a      	mov	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 8196 	beq.w	8005bd0 <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80058a4:	2300      	movs	r3, #0
 80058a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80058a8:	e185      	b.n	8005bb6 <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80058aa:	4baa      	ldr	r3, [pc, #680]	; (8005b54 <BSP_TS_GetState+0x2ec>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	4aa9      	ldr	r2, [pc, #676]	; (8005b58 <BSP_TS_GetState+0x2f0>)
 80058b2:	7812      	ldrb	r2, [r2, #0]
 80058b4:	b290      	uxth	r0, r2
 80058b6:	f107 0120 	add.w	r1, r7, #32
 80058ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058bc:	0052      	lsls	r2, r2, #1
 80058be:	188c      	adds	r4, r1, r2
 80058c0:	f107 0114 	add.w	r1, r7, #20
 80058c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058c6:	0052      	lsls	r2, r2, #1
 80058c8:	440a      	add	r2, r1
 80058ca:	4621      	mov	r1, r4
 80058cc:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80058ce:	4ba3      	ldr	r3, [pc, #652]	; (8005b5c <BSP_TS_GetState+0x2f4>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d117      	bne.n	8005906 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 80058d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	3350      	adds	r3, #80	; 0x50
 80058dc:	443b      	add	r3, r7
 80058de:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80058e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	3350      	adds	r3, #80	; 0x50
 80058e8:	443b      	add	r3, r7
 80058ea:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 80058ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	3350      	adds	r3, #80	; 0x50
 80058f4:	443b      	add	r3, r7
 80058f6:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80058fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	3350      	adds	r3, #80	; 0x50
 8005900:	443b      	add	r3, r7
 8005902:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8005906:	4b95      	ldr	r3, [pc, #596]	; (8005b5c <BSP_TS_GetState+0x2f4>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00e      	beq.n	8005930 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8005912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	3350      	adds	r3, #80	; 0x50
 8005918:	443b      	add	r3, r7
 800591a:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800591e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8005922:	b29a      	uxth	r2, r3
 8005924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	3350      	adds	r3, #80	; 0x50
 800592a:	443b      	add	r3, r7
 800592c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8005930:	4b8a      	ldr	r3, [pc, #552]	; (8005b5c <BSP_TS_GetState+0x2f4>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00e      	beq.n	800595a <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 800593c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	3350      	adds	r3, #80	; 0x50
 8005942:	443b      	add	r3, r7
 8005944:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8005948:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800594c:	b29a      	uxth	r2, r3
 800594e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	3350      	adds	r3, #80	; 0x50
 8005954:	443b      	add	r3, r7
 8005956:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800595a:	4b80      	ldr	r3, [pc, #512]	; (8005b5c <BSP_TS_GetState+0x2f4>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d017      	beq.n	8005996 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8005966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	3350      	adds	r3, #80	; 0x50
 800596c:	443b      	add	r3, r7
 800596e:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	3350      	adds	r3, #80	; 0x50
 8005978:	443b      	add	r3, r7
 800597a:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800597e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	3350      	adds	r3, #80	; 0x50
 8005984:	443b      	add	r3, r7
 8005986:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800598a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	3350      	adds	r3, #80	; 0x50
 8005990:	443b      	add	r3, r7
 8005992:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8005996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	3350      	adds	r3, #80	; 0x50
 800599c:	443b      	add	r3, r7
 800599e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80059a2:	4619      	mov	r1, r3
 80059a4:	4a6e      	ldr	r2, [pc, #440]	; (8005b60 <BSP_TS_GetState+0x2f8>)
 80059a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ac:	4299      	cmp	r1, r3
 80059ae:	d90d      	bls.n	80059cc <BSP_TS_GetState+0x164>
 80059b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	3350      	adds	r3, #80	; 0x50
 80059b6:	443b      	add	r3, r7
 80059b8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80059bc:	4968      	ldr	r1, [pc, #416]	; (8005b60 <BSP_TS_GetState+0x2f8>)
 80059be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	e00c      	b.n	80059e6 <BSP_TS_GetState+0x17e>
 80059cc:	4a64      	ldr	r2, [pc, #400]	; (8005b60 <BSP_TS_GetState+0x2f8>)
 80059ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	3350      	adds	r3, #80	; 0x50
 80059dc:	443b      	add	r3, r7
 80059de:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80059ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	3350      	adds	r3, #80	; 0x50
 80059f0:	443b      	add	r3, r7
 80059f2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80059f6:	4619      	mov	r1, r3
 80059f8:	4a5a      	ldr	r2, [pc, #360]	; (8005b64 <BSP_TS_GetState+0x2fc>)
 80059fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a00:	4299      	cmp	r1, r3
 8005a02:	d90d      	bls.n	8005a20 <BSP_TS_GetState+0x1b8>
 8005a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	3350      	adds	r3, #80	; 0x50
 8005a0a:	443b      	add	r3, r7
 8005a0c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8005a10:	4954      	ldr	r1, [pc, #336]	; (8005b64 <BSP_TS_GetState+0x2fc>)
 8005a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	e00c      	b.n	8005a3a <BSP_TS_GetState+0x1d2>
 8005a20:	4a50      	ldr	r2, [pc, #320]	; (8005b64 <BSP_TS_GetState+0x2fc>)
 8005a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	3350      	adds	r3, #80	; 0x50
 8005a30:	443b      	add	r3, r7
 8005a32:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8005a3e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8005a42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005a46:	4413      	add	r3, r2
 8005a48:	2b05      	cmp	r3, #5
 8005a4a:	dd15      	ble.n	8005a78 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8005a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	3350      	adds	r3, #80	; 0x50
 8005a52:	443b      	add	r3, r7
 8005a54:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4a41      	ldr	r2, [pc, #260]	; (8005b60 <BSP_TS_GetState+0x2f8>)
 8005a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8005a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	3350      	adds	r3, #80	; 0x50
 8005a68:	443b      	add	r3, r7
 8005a6a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4a3c      	ldr	r2, [pc, #240]	; (8005b64 <BSP_TS_GetState+0x2fc>)
 8005a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8005a78:	4b37      	ldr	r3, [pc, #220]	; (8005b58 <BSP_TS_GetState+0x2f0>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b70      	cmp	r3, #112	; 0x70
 8005a7e:	d119      	bne.n	8005ab4 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8005a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	3350      	adds	r3, #80	; 0x50
 8005a86:	443b      	add	r3, r7
 8005a88:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	4413      	add	r3, r2
 8005a94:	460a      	mov	r2, r1
 8005a96:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8005a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	3350      	adds	r3, #80	; 0x50
 8005a9e:	443b      	add	r3, r7
 8005aa0:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	4413      	add	r3, r2
 8005aae:	460a      	mov	r2, r1
 8005ab0:	809a      	strh	r2, [r3, #4]
 8005ab2:	e022      	b.n	8005afa <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8005ab4:	4b2c      	ldr	r3, [pc, #176]	; (8005b68 <BSP_TS_GetState+0x300>)
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4a29      	ldr	r2, [pc, #164]	; (8005b60 <BSP_TS_GetState+0x2f8>)
 8005abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac2:	fb01 f303 	mul.w	r3, r1, r3
 8005ac6:	0b1b      	lsrs	r3, r3, #12
 8005ac8:	b299      	uxth	r1, r3
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	4413      	add	r3, r2
 8005ad2:	460a      	mov	r2, r1
 8005ad4:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8005ad6:	4b25      	ldr	r3, [pc, #148]	; (8005b6c <BSP_TS_GetState+0x304>)
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	4619      	mov	r1, r3
 8005adc:	4a21      	ldr	r2, [pc, #132]	; (8005b64 <BSP_TS_GetState+0x2fc>)
 8005ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ae4:	fb01 f303 	mul.w	r3, r1, r3
 8005ae8:	0b1b      	lsrs	r3, r3, #12
 8005aea:	b299      	uxth	r1, r3
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af0:	3304      	adds	r3, #4
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	4413      	add	r3, r2
 8005af6:	460a      	mov	r2, r1
 8005af8:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8005afa:	4b17      	ldr	r3, [pc, #92]	; (8005b58 <BSP_TS_GetState+0x2f0>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	b298      	uxth	r0, r3
 8005b00:	f107 010c 	add.w	r1, r7, #12
 8005b04:	f107 0210 	add.w	r2, r7, #16
 8005b08:	f107 0308 	add.w	r3, r7, #8
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005b12:	f7fc f961 	bl	8001dd8 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	b2d9      	uxtb	r1, r3
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b1e:	4413      	add	r3, r2
 8005b20:	3316      	adds	r3, #22
 8005b22:	460a      	mov	r2, r1
 8005b24:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	b2d9      	uxtb	r1, r3
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b2e:	4413      	add	r3, r2
 8005b30:	3320      	adds	r3, #32
 8005b32:	460a      	mov	r2, r1
 8005b34:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d835      	bhi.n	8005ba8 <BSP_TS_GetState+0x340>
 8005b3c:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <BSP_TS_GetState+0x2dc>)
 8005b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b42:	bf00      	nop
 8005b44:	08005b71 	.word	0x08005b71
 8005b48:	08005b7f 	.word	0x08005b7f
 8005b4c:	08005b8d 	.word	0x08005b8d
 8005b50:	08005b9b 	.word	0x08005b9b
 8005b54:	200151b8 	.word	0x200151b8
 8005b58:	200151c1 	.word	0x200151c1
 8005b5c:	200151c0 	.word	0x200151c0
 8005b60:	200151c4 	.word	0x200151c4
 8005b64:	200151d8 	.word	0x200151d8
 8005b68:	200151bc 	.word	0x200151bc
 8005b6c:	200151be 	.word	0x200151be
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b74:	4413      	add	r3, r2
 8005b76:	331b      	adds	r3, #27
 8005b78:	2201      	movs	r2, #1
 8005b7a:	701a      	strb	r2, [r3, #0]
          break;
 8005b7c:	e018      	b.n	8005bb0 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b82:	4413      	add	r3, r2
 8005b84:	331b      	adds	r3, #27
 8005b86:	2202      	movs	r2, #2
 8005b88:	701a      	strb	r2, [r3, #0]
          break;
 8005b8a:	e011      	b.n	8005bb0 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b90:	4413      	add	r3, r2
 8005b92:	331b      	adds	r3, #27
 8005b94:	2203      	movs	r2, #3
 8005b96:	701a      	strb	r2, [r3, #0]
          break;
 8005b98:	e00a      	b.n	8005bb0 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b9e:	4413      	add	r3, r2
 8005ba0:	331b      	adds	r3, #27
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	701a      	strb	r2, [r3, #0]
          break;
 8005ba6:	e003      	b.n	8005bb0 <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8005bae:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8005bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	f4ff ae73 	bcc.w	80058aa <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f809 	bl	8005bdc <BSP_TS_Get_GestureId>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8005bd0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3754      	adds	r7, #84	; 0x54
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd90      	pop	{r4, r7, pc}

08005bdc <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8005be4:	2300      	movs	r3, #0
 8005be6:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8005be8:	2300      	movs	r3, #0
 8005bea:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8005bec:	4b3b      	ldr	r3, [pc, #236]	; (8005cdc <BSP_TS_Get_GestureId+0x100>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f107 0208 	add.w	r2, r7, #8
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fc f8d4 	bl	8001da6 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b49      	cmp	r3, #73	; 0x49
 8005c02:	d05e      	beq.n	8005cc2 <BSP_TS_Get_GestureId+0xe6>
 8005c04:	2b49      	cmp	r3, #73	; 0x49
 8005c06:	d860      	bhi.n	8005cca <BSP_TS_Get_GestureId+0xee>
 8005c08:	2b1c      	cmp	r3, #28
 8005c0a:	d83f      	bhi.n	8005c8c <BSP_TS_Get_GestureId+0xb0>
 8005c0c:	2b1c      	cmp	r3, #28
 8005c0e:	d85c      	bhi.n	8005cca <BSP_TS_Get_GestureId+0xee>
 8005c10:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <BSP_TS_Get_GestureId+0x3c>)
 8005c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c16:	bf00      	nop
 8005c18:	08005c93 	.word	0x08005c93
 8005c1c:	08005ccb 	.word	0x08005ccb
 8005c20:	08005ccb 	.word	0x08005ccb
 8005c24:	08005ccb 	.word	0x08005ccb
 8005c28:	08005ccb 	.word	0x08005ccb
 8005c2c:	08005ccb 	.word	0x08005ccb
 8005c30:	08005ccb 	.word	0x08005ccb
 8005c34:	08005ccb 	.word	0x08005ccb
 8005c38:	08005ccb 	.word	0x08005ccb
 8005c3c:	08005ccb 	.word	0x08005ccb
 8005c40:	08005ccb 	.word	0x08005ccb
 8005c44:	08005ccb 	.word	0x08005ccb
 8005c48:	08005ccb 	.word	0x08005ccb
 8005c4c:	08005ccb 	.word	0x08005ccb
 8005c50:	08005ccb 	.word	0x08005ccb
 8005c54:	08005ccb 	.word	0x08005ccb
 8005c58:	08005c9b 	.word	0x08005c9b
 8005c5c:	08005ccb 	.word	0x08005ccb
 8005c60:	08005ccb 	.word	0x08005ccb
 8005c64:	08005ccb 	.word	0x08005ccb
 8005c68:	08005ca3 	.word	0x08005ca3
 8005c6c:	08005ccb 	.word	0x08005ccb
 8005c70:	08005ccb 	.word	0x08005ccb
 8005c74:	08005ccb 	.word	0x08005ccb
 8005c78:	08005cab 	.word	0x08005cab
 8005c7c:	08005ccb 	.word	0x08005ccb
 8005c80:	08005ccb 	.word	0x08005ccb
 8005c84:	08005ccb 	.word	0x08005ccb
 8005c88:	08005cb3 	.word	0x08005cb3
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d014      	beq.n	8005cba <BSP_TS_Get_GestureId+0xde>
 8005c90:	e01b      	b.n	8005cca <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005c98:	e01a      	b.n	8005cd0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005ca0:	e016      	b.n	8005cd0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005ca8:	e012      	b.n	8005cd0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2203      	movs	r2, #3
 8005cae:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005cb0:	e00e      	b.n	8005cd0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2204      	movs	r2, #4
 8005cb6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005cb8:	e00a      	b.n	8005cd0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2205      	movs	r2, #5
 8005cbe:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005cc0:	e006      	b.n	8005cd0 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2206      	movs	r2, #6
 8005cc6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8005cc8:	e002      	b.n	8005cd0 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8005cce:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	200151c1 	.word	0x200151c1

08005ce0 <arm_add_f32>:
void arm_add_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b08f      	sub	sp, #60	; 0x3c
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
 8005cec:	603b      	str	r3, [r7, #0]
/* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t inA1, inA2, inA3, inA4;              /* temporary input variabels */
  float32_t inB1, inB2, inB3, inB4;              /* temporary input variables */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	089b      	lsrs	r3, r3, #2
 8005cf2:	637b      	str	r3, [r7, #52]	; 0x34

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8005cf4:	e04a      	b.n	8005d8c <arm_add_f32+0xac>
  {
    /* C = A + B */
    /* Add and then store the results in the destination buffer. */

    /* read four inputs from sourceA and four inputs from sourceB */
    inA1 = *pSrcA;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	633b      	str	r3, [r7, #48]	; 0x30
    inB1 = *pSrcB;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    inA2 = *(pSrcA + 1);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	62bb      	str	r3, [r7, #40]	; 0x28
    inB2 = *(pSrcB + 1);
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
    inA3 = *(pSrcA + 2);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	623b      	str	r3, [r7, #32]
    inB3 = *(pSrcB + 2);
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	61fb      	str	r3, [r7, #28]
    inA4 = *(pSrcA + 3);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	61bb      	str	r3, [r7, #24]
    inB4 = *(pSrcB + 3);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	617b      	str	r3, [r7, #20]

    /* C = A + B */
    /* add and store result to destination */
    *pDst = inA1 + inB1;
 8005d26:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005d2a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	edc3 7a00 	vstr	s15, [r3]
    *(pDst + 1) = inA2 + inB2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005d40:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d48:	edc3 7a00 	vstr	s15, [r3]
    *(pDst + 2) = inA3 + inB3;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	3308      	adds	r3, #8
 8005d50:	ed97 7a08 	vldr	s14, [r7, #32]
 8005d54:	edd7 7a07 	vldr	s15, [r7, #28]
 8005d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d5c:	edc3 7a00 	vstr	s15, [r3]
    *(pDst + 3) = inA4 + inB4;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	330c      	adds	r3, #12
 8005d64:	ed97 7a06 	vldr	s14, [r7, #24]
 8005d68:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d70:	edc3 7a00 	vstr	s15, [r3]

    /* update pointers to process next samples */
    pSrcA += 4U;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3310      	adds	r3, #16
 8005d78:	60fb      	str	r3, [r7, #12]
    pSrcB += 4U;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	3310      	adds	r3, #16
 8005d7e:	60bb      	str	r3, [r7, #8]
    pDst += 4U;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3310      	adds	r3, #16
 8005d84:	607b      	str	r3, [r7, #4]


    /* Decrement the loop counter */
    blkCnt--;
 8005d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	637b      	str	r3, [r7, #52]	; 0x34
  while (blkCnt > 0U)
 8005d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1b1      	bne.n	8005cf6 <arm_add_f32+0x16>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	f003 0303 	and.w	r3, r3, #3
 8005d98:	637b      	str	r3, [r7, #52]	; 0x34
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8005d9a:	e013      	b.n	8005dc4 <arm_add_f32+0xe4>
  {
    /* C = A + B */
    /* Add and then store the results in the destination buffer. */
    *pDst++ = (*pSrcA++) + (*pSrcB++);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	1d1a      	adds	r2, r3, #4
 8005da0:	60fa      	str	r2, [r7, #12]
 8005da2:	ed93 7a00 	vldr	s14, [r3]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	1d1a      	adds	r2, r3, #4
 8005daa:	60ba      	str	r2, [r7, #8]
 8005dac:	edd3 7a00 	vldr	s15, [r3]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	1d1a      	adds	r2, r3, #4
 8005db4:	607a      	str	r2, [r7, #4]
 8005db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dba:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the loop counter */
    blkCnt--;
 8005dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	637b      	str	r3, [r7, #52]	; 0x34
  while (blkCnt > 0U)
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e8      	bne.n	8005d9c <arm_add_f32+0xbc>
  }
}
 8005dca:	bf00      	nop
 8005dcc:	bf00      	nop
 8005dce:	373c      	adds	r7, #60	; 0x3c
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <arm_mult_f32>:
void arm_mult_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b093      	sub	sp, #76	; 0x4c
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
 8005de4:	603b      	str	r3, [r7, #0]
  float32_t inA1, inA2, inA3, inA4;              /* temporary input variables */
  float32_t inB1, inB2, inB3, inB4;              /* temporary input variables */
  float32_t out1, out2, out3, out4;              /* temporary output variables */

  /* loop Unrolling */
  blkCnt = blockSize >> 2U;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	089b      	lsrs	r3, r3, #2
 8005dea:	647b      	str	r3, [r7, #68]	; 0x44

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8005dec:	e052      	b.n	8005e94 <arm_mult_f32+0xbc>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    /* read sample from sourceA */
    inA1 = *pSrcA;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	643b      	str	r3, [r7, #64]	; 0x40
    /* read sample from sourceB */
    inB1 = *pSrcB;
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* read sample from sourceA */
    inA2 = *(pSrcA + 1);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	63bb      	str	r3, [r7, #56]	; 0x38
    /* read sample from sourceB */
    inB2 = *(pSrcB + 1);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	637b      	str	r3, [r7, #52]	; 0x34

    /* out = sourceA * sourceB */
    out1 = inA1 * inB1;
 8005e06:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005e0a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e12:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    /* read sample from sourceA */
    inA3 = *(pSrcA + 2);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* read sample from sourceB */
    inB3 = *(pSrcB + 2);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	62bb      	str	r3, [r7, #40]	; 0x28

    /* out = sourceA * sourceB */
    out2 = inA2 * inB2;
 8005e22:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005e26:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e2e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* read sample from sourceA */
    inA4 = *(pSrcA + 3);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	623b      	str	r3, [r7, #32]

    /* store result to destination buffer */
    *pDst = out1;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e3c:	601a      	str	r2, [r3, #0]

    /* read sample from sourceB */
    inB4 = *(pSrcB + 3);
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	61fb      	str	r3, [r7, #28]

    /* out = sourceA * sourceB */
    out3 = inA3 * inB3;
 8005e44:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005e48:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e50:	edc7 7a06 	vstr	s15, [r7, #24]

    /* store result to destination buffer */
    *(pDst + 1) = out2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3304      	adds	r3, #4
 8005e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5a:	601a      	str	r2, [r3, #0]

    /* out = sourceA * sourceB */
    out4 = inA4 * inB4;
 8005e5c:	ed97 7a08 	vldr	s14, [r7, #32]
 8005e60:	edd7 7a07 	vldr	s15, [r7, #28]
 8005e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e68:	edc7 7a05 	vstr	s15, [r7, #20]
    /* store result to destination buffer */
    *(pDst + 2) = out3;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3308      	adds	r3, #8
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	601a      	str	r2, [r3, #0]
    /* store result to destination buffer */
    *(pDst + 3) = out4;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	330c      	adds	r3, #12
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	601a      	str	r2, [r3, #0]


    /* update pointers to process next samples */
    pSrcA += 4U;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	3310      	adds	r3, #16
 8005e80:	60fb      	str	r3, [r7, #12]
    pSrcB += 4U;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	3310      	adds	r3, #16
 8005e86:	60bb      	str	r3, [r7, #8]
    pDst += 4U;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3310      	adds	r3, #16
 8005e8c:	607b      	str	r3, [r7, #4]

    /* Decrement the blockSize loop counter */
    blkCnt--;
 8005e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e90:	3b01      	subs	r3, #1
 8005e92:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 8005e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1a9      	bne.n	8005dee <arm_mult_f32+0x16>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	f003 0303 	and.w	r3, r3, #3
 8005ea0:	647b      	str	r3, [r7, #68]	; 0x44
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8005ea2:	e013      	b.n	8005ecc <arm_mult_f32+0xf4>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	1d1a      	adds	r2, r3, #4
 8005ea8:	60fa      	str	r2, [r7, #12]
 8005eaa:	ed93 7a00 	vldr	s14, [r3]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	1d1a      	adds	r2, r3, #4
 8005eb2:	60ba      	str	r2, [r7, #8]
 8005eb4:	edd3 7a00 	vldr	s15, [r3]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	1d1a      	adds	r2, r3, #4
 8005ebc:	607a      	str	r2, [r7, #4]
 8005ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec2:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the blockSize loop counter */
    blkCnt--;
 8005ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	647b      	str	r3, [r7, #68]	; 0x44
  while (blkCnt > 0U)
 8005ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e8      	bne.n	8005ea4 <arm_mult_f32+0xcc>
  }
}
 8005ed2:	bf00      	nop
 8005ed4:	bf00      	nop
 8005ed6:	374c      	adds	r7, #76	; 0x4c
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <arm_cos_f32>:
 * @return cos(x).
 */

float32_t arm_cos_f32(
  float32_t x)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b08b      	sub	sp, #44	; 0x2c
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8005eea:	edd7 7a01 	vldr	s15, [r7, #4]
 8005eee:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8005fcc <arm_cos_f32+0xec>
 8005ef2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ef6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8005efa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005efe:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8005f02:	edd7 7a08 	vldr	s15, [r7, #32]
 8005f06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f0a:	ee17 3a90 	vmov	r3, s15
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8005f10:	edd7 7a08 	vldr	s15, [r7, #32]
 8005f14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f1c:	d502      	bpl.n	8005f24 <arm_cos_f32+0x44>
  {
    n--;
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	3b01      	subs	r3, #1
 8005f22:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f2e:	ed97 7a08 	vldr	s14, [r7, #32]
 8005f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f36:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8005f3a:	edd7 7a08 	vldr	s15, [r7, #32]
 8005f3e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8005fd0 <arm_cos_f32+0xf0>
 8005f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f46:	edc7 7a07 	vstr	s15, [r7, #28]
  index = ((uint16_t)findex) & 0x1ff;
 8005f4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8005f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f52:	ee17 3a90 	vmov	r3, s15
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5c:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8005f5e:	8b7b      	ldrh	r3, [r7, #26]
 8005f60:	ee07 3a90 	vmov	s15, r3
 8005f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f68:	ed97 7a07 	vldr	s14, [r7, #28]
 8005f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f70:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8005f74:	8b7b      	ldrh	r3, [r7, #26]
 8005f76:	4a17      	ldr	r2, [pc, #92]	; (8005fd4 <arm_cos_f32+0xf4>)
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8005f80:	8b7b      	ldrh	r3, [r7, #26]
 8005f82:	3301      	adds	r3, #1
 8005f84:	4a13      	ldr	r2, [pc, #76]	; (8005fd4 <arm_cos_f32+0xf4>)
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f-fract)*a + fract*b;
 8005f8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f92:	edd7 7a05 	vldr	s15, [r7, #20]
 8005f96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fa2:	edd7 6a05 	vldr	s13, [r7, #20]
 8005fa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005faa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fb2:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (cosVal);
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	ee07 3a90 	vmov	s15, r3
}
 8005fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8005fc0:	372c      	adds	r7, #44	; 0x2c
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	3e22f983 	.word	0x3e22f983
 8005fd0:	44000000 	.word	0x44000000
 8005fd4:	0800e4c8 	.word	0x0800e4c8

08005fd8 <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b08b      	sub	sp, #44	; 0x2c
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 8005fe2:	edd7 7a01 	vldr	s15, [r7, #4]
 8005fe6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fee:	d50a      	bpl.n	8006006 <arm_sin_f32+0x2e>
 8005ff0:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ff4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80060e0 <arm_sin_f32+0x108>
 8005ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006000:	db01      	blt.n	8006006 <arm_sin_f32+0x2e>
     return x;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	e062      	b.n	80060cc <arm_sin_f32+0xf4>
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8006006:	edd7 7a01 	vldr	s15, [r7, #4]
 800600a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80060e4 <arm_sin_f32+0x10c>
 800600e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006012:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8006016:	edd7 7a08 	vldr	s15, [r7, #32]
 800601a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800601e:	ee17 3a90 	vmov	r3, s15
 8006022:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 8006024:	edd7 7a01 	vldr	s15, [r7, #4]
 8006028:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800602c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006030:	d502      	bpl.n	8006038 <arm_sin_f32+0x60>
  {
    n--;
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	3b01      	subs	r3, #1
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	ee07 3a90 	vmov	s15, r3
 800603e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006042:	ed97 7a08 	vldr	s14, [r7, #32]
 8006046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800604a:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 800604e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006052:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80060e8 <arm_sin_f32+0x110>
 8006056:	ee67 7a87 	vmul.f32	s15, s15, s14
 800605a:	edc7 7a07 	vstr	s15, [r7, #28]

  index = ((uint16_t)findex) & 0x1ff;
 800605e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006066:	ee17 3a90 	vmov	r3, s15
 800606a:	b29b      	uxth	r3, r3
 800606c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006070:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8006072:	8b7b      	ldrh	r3, [r7, #26]
 8006074:	ee07 3a90 	vmov	s15, r3
 8006078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607c:	ed97 7a07 	vldr	s14, [r7, #28]
 8006080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006084:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8006088:	8b7b      	ldrh	r3, [r7, #26]
 800608a:	4a18      	ldr	r2, [pc, #96]	; (80060ec <arm_sin_f32+0x114>)
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8006094:	8b7b      	ldrh	r3, [r7, #26]
 8006096:	3301      	adds	r3, #1
 8006098:	4a14      	ldr	r2, [pc, #80]	; (80060ec <arm_sin_f32+0x114>)
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 80060a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80060aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80060b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060b6:	edd7 6a05 	vldr	s13, [r7, #20]
 80060ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80060be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060c6:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 80060ca:	68bb      	ldr	r3, [r7, #8]
}
 80060cc:	ee07 3a90 	vmov	s15, r3
 80060d0:	eeb0 0a67 	vmov.f32	s0, s15
 80060d4:	372c      	adds	r7, #44	; 0x2c
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	b44c02cd 	.word	0xb44c02cd
 80060e4:	3e22f983 	.word	0x3e22f983
 80060e8:	44000000 	.word	0x44000000
 80060ec:	0800e4c8 	.word	0x0800e4c8

080060f0 <arm_fir_f32>:
void arm_fir_f32(
const arm_fir_instance_f32 * S,
float32_t * pSrc,
float32_t * pDst,
uint32_t blockSize)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b09f      	sub	sp, #124	; 0x7c
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
   float32_t *pState = S->pState;                 /* State pointer */
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	677b      	str	r3, [r7, #116]	; 0x74
   float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	61fb      	str	r3, [r7, #28]
   float32_t *pStateCurnt;                        /* Points to the current sample of the state */
   float32_t *px, *pb;                            /* Temporary pointers for state and coefficient buffers */
   float32_t acc0, acc1, acc2, acc3, acc4, acc5, acc6, acc7;     /* Accumulators */
   float32_t x0, x1, x2, x3, x4, x5, x6, x7, c0;  /* Temporary variables to hold state and coefficient values */
   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	61bb      	str	r3, [r7, #24]
   uint32_t i, tapCnt, blkCnt;                    /* Loop counters */

   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
   /* pStateCurnt points to the location where the new input data should be written */
   pStateCurnt = &(S->pState[(numTaps - 1U)]);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	69b9      	ldr	r1, [r7, #24]
 8006116:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800611a:	440b      	add	r3, r1
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	673b      	str	r3, [r7, #112]	; 0x70
    *    acc0 =  b[numTaps-1] * x[n-numTaps-1] + b[numTaps-2] * x[n-numTaps-2] + b[numTaps-3] * x[n-numTaps-3] +...+ b[0] * x[0]
    *    acc1 =  b[numTaps-1] * x[n-numTaps] +   b[numTaps-2] * x[n-numTaps-1] + b[numTaps-3] * x[n-numTaps-2] +...+ b[0] * x[1]
    *    acc2 =  b[numTaps-1] * x[n-numTaps+1] + b[numTaps-2] * x[n-numTaps] +   b[numTaps-3] * x[n-numTaps-1] +...+ b[0] * x[2]
    *    acc3 =  b[numTaps-1] * x[n-numTaps+2] + b[numTaps-2] * x[n-numTaps+1] + b[numTaps-3] * x[n-numTaps]   +...+ b[0] * x[3]
    */
   blkCnt = blockSize >> 3;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	08db      	lsrs	r3, r3, #3
 8006126:	623b      	str	r3, [r7, #32]

   /* First part of the processing with loop unrolling.  Compute 8 outputs at a time.
   ** a second loop below computes the remaining 1 to 7 samples. */
   while (blkCnt > 0U)
 8006128:	f000 bc8b 	b.w	8006a42 <arm_fir_f32+0x952>
   {
      /* Copy four new input samples into the state buffer */
      *pStateCurnt++ = *pSrc++;
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	1d13      	adds	r3, r2, #4
 8006130:	60bb      	str	r3, [r7, #8]
 8006132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006134:	1d19      	adds	r1, r3, #4
 8006136:	6739      	str	r1, [r7, #112]	; 0x70
 8006138:	6812      	ldr	r2, [r2, #0]
 800613a:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	1d13      	adds	r3, r2, #4
 8006140:	60bb      	str	r3, [r7, #8]
 8006142:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006144:	1d19      	adds	r1, r3, #4
 8006146:	6739      	str	r1, [r7, #112]	; 0x70
 8006148:	6812      	ldr	r2, [r2, #0]
 800614a:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	1d13      	adds	r3, r2, #4
 8006150:	60bb      	str	r3, [r7, #8]
 8006152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006154:	1d19      	adds	r1, r3, #4
 8006156:	6739      	str	r1, [r7, #112]	; 0x70
 8006158:	6812      	ldr	r2, [r2, #0]
 800615a:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	1d13      	adds	r3, r2, #4
 8006160:	60bb      	str	r3, [r7, #8]
 8006162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006164:	1d19      	adds	r1, r3, #4
 8006166:	6739      	str	r1, [r7, #112]	; 0x70
 8006168:	6812      	ldr	r2, [r2, #0]
 800616a:	601a      	str	r2, [r3, #0]

      /* Set all accumulators to zero */
      acc0 = 0.0f;
 800616c:	f04f 0300 	mov.w	r3, #0
 8006170:	667b      	str	r3, [r7, #100]	; 0x64
      acc1 = 0.0f;
 8006172:	f04f 0300 	mov.w	r3, #0
 8006176:	663b      	str	r3, [r7, #96]	; 0x60
      acc2 = 0.0f;
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	65fb      	str	r3, [r7, #92]	; 0x5c
      acc3 = 0.0f;
 800617e:	f04f 0300 	mov.w	r3, #0
 8006182:	65bb      	str	r3, [r7, #88]	; 0x58
      acc4 = 0.0f;
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	657b      	str	r3, [r7, #84]	; 0x54
      acc5 = 0.0f;
 800618a:	f04f 0300 	mov.w	r3, #0
 800618e:	653b      	str	r3, [r7, #80]	; 0x50
      acc6 = 0.0f;
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	64fb      	str	r3, [r7, #76]	; 0x4c
      acc7 = 0.0f;
 8006196:	f04f 0300 	mov.w	r3, #0
 800619a:	64bb      	str	r3, [r7, #72]	; 0x48

      /* Initialize state pointer */
      px = pState;
 800619c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800619e:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* Initialize coeff pointer */
      pb = (pCoeffs);
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	66bb      	str	r3, [r7, #104]	; 0x68

      /* This is separated from the others to avoid
       * a call to __aeabi_memmove which would be slower
       */
      *pStateCurnt++ = *pSrc++;
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	1d13      	adds	r3, r2, #4
 80061a8:	60bb      	str	r3, [r7, #8]
 80061aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061ac:	1d19      	adds	r1, r3, #4
 80061ae:	6739      	str	r1, [r7, #112]	; 0x70
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	1d13      	adds	r3, r2, #4
 80061b8:	60bb      	str	r3, [r7, #8]
 80061ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061bc:	1d19      	adds	r1, r3, #4
 80061be:	6739      	str	r1, [r7, #112]	; 0x70
 80061c0:	6812      	ldr	r2, [r2, #0]
 80061c2:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	1d13      	adds	r3, r2, #4
 80061c8:	60bb      	str	r3, [r7, #8]
 80061ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061cc:	1d19      	adds	r1, r3, #4
 80061ce:	6739      	str	r1, [r7, #112]	; 0x70
 80061d0:	6812      	ldr	r2, [r2, #0]
 80061d2:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pSrc++;
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	1d13      	adds	r3, r2, #4
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061dc:	1d19      	adds	r1, r3, #4
 80061de:	6739      	str	r1, [r7, #112]	; 0x70
 80061e0:	6812      	ldr	r2, [r2, #0]
 80061e2:	601a      	str	r2, [r3, #0]

      /* Read the first seven samples from the state buffer:  x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2] */
      x0 = *px++;
 80061e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e6:	1d1a      	adds	r2, r3, #4
 80061e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	647b      	str	r3, [r7, #68]	; 0x44
      x1 = *px++;
 80061ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f0:	1d1a      	adds	r2, r3, #4
 80061f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	643b      	str	r3, [r7, #64]	; 0x40
      x2 = *px++;
 80061f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061fa:	1d1a      	adds	r2, r3, #4
 80061fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	63fb      	str	r3, [r7, #60]	; 0x3c
      x3 = *px++;
 8006202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006204:	1d1a      	adds	r2, r3, #4
 8006206:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	63bb      	str	r3, [r7, #56]	; 0x38
      x4 = *px++;
 800620c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620e:	1d1a      	adds	r2, r3, #4
 8006210:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	637b      	str	r3, [r7, #52]	; 0x34
      x5 = *px++;
 8006216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006218:	1d1a      	adds	r2, r3, #4
 800621a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	633b      	str	r3, [r7, #48]	; 0x30
      x6 = *px++;
 8006220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006222:	1d1a      	adds	r2, r3, #4
 8006224:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Loop unrolling.  Process 8 taps at a time. */
      tapCnt = numTaps >> 3U;
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	08db      	lsrs	r3, r3, #3
 800622e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Loop over the number of taps.  Unroll by a factor of 8.
       ** Repeat until we've computed numTaps-8 coefficients. */
      while (tapCnt > 0U)
 8006230:	e352      	b.n	80068d8 <arm_fir_f32+0x7e8>
      {
         /* Read the b[numTaps-1] coefficient */
         c0 = *(pb++);
 8006232:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006234:	1d1a      	adds	r2, r3, #4
 8006236:	66ba      	str	r2, [r7, #104]	; 0x68
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-3] sample */
         x7 = *(px++);
 800623c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800623e:	1d1a      	adds	r2, r3, #4
 8006240:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	613b      	str	r3, [r7, #16]

         /* acc0 +=  b[numTaps-1] * x[n-numTaps] */
         acc0 += x0 * c0;
 8006246:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800624a:	edd7 7a05 	vldr	s15, [r7, #20]
 800624e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006252:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8006256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800625a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-1] */
         acc1 += x1 * c0;
 800625e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006262:	edd7 7a05 	vldr	s15, [r7, #20]
 8006266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800626a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800626e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006272:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-2] */
         acc2 += x2 * c0;
 8006276:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800627a:	edd7 7a05 	vldr	s15, [r7, #20]
 800627e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006282:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800628a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-3] */
         acc3 += x3 * c0;
 800628e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006292:	edd7 7a05 	vldr	s15, [r7, #20]
 8006296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800629e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062a2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

         /* acc4 +=  b[numTaps-1] * x[n-numTaps-4] */
         acc4 += x4 * c0;
 80062a6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80062aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80062ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80062b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062ba:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

         /* acc1 +=  b[numTaps-1] * x[n-numTaps-5] */
         acc5 += x5 * c0;
 80062be:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80062c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80062c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ca:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80062ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062d2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

         /* acc2 +=  b[numTaps-1] * x[n-numTaps-6] */
         acc6 += x6 * c0;
 80062d6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80062da:	edd7 7a05 	vldr	s15, [r7, #20]
 80062de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80062e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062ea:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

         /* acc3 +=  b[numTaps-1] * x[n-numTaps-7] */
         acc7 += x7 * c0;
 80062ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80062f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80062f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062fa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80062fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006302:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-2] coefficient */
         c0 = *(pb++);
 8006306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006308:	1d1a      	adds	r2, r3, #4
 800630a:	66ba      	str	r2, [r7, #104]	; 0x68
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-4] sample */
         x0 = *(px++);
 8006310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006312:	1d1a      	adds	r2, r3, #4
 8006314:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	647b      	str	r3, [r7, #68]	; 0x44

         /* Perform the multiply-accumulate */
         acc0 += x1 * c0;
 800631a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800631e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006326:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800632a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800632e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x2 * c0;
 8006332:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006336:	edd7 7a05 	vldr	s15, [r7, #20]
 800633a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8006342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006346:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x3 * c0;
 800634a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800634e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006356:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800635a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800635e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x4 * c0;
 8006362:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8006366:	edd7 7a05 	vldr	s15, [r7, #20]
 800636a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8006372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006376:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x5 * c0;
 800637a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800637e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006386:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800638a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800638e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x6 * c0;
 8006392:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006396:	edd7 7a05 	vldr	s15, [r7, #20]
 800639a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80063a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063a6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x7 * c0;
 80063aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80063ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80063b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80063ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063be:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x0 * c0;
 80063c2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80063c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80063ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ce:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80063d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063d6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-3] coefficient */
         c0 = *(pb++);
 80063da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063dc:	1d1a      	adds	r2, r3, #4
 80063de:	66ba      	str	r2, [r7, #104]	; 0x68
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-5] sample */
         x1 = *(px++);
 80063e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e6:	1d1a      	adds	r2, r3, #4
 80063e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	643b      	str	r3, [r7, #64]	; 0x40

         /* Perform the multiply-accumulates */
         acc0 += x2 * c0;
 80063ee:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80063f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80063f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fa:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80063fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006402:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x3 * c0;
 8006406:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800640a:	edd7 7a05 	vldr	s15, [r7, #20]
 800640e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006412:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8006416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800641a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x4 * c0;
 800641e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8006422:	edd7 7a05 	vldr	s15, [r7, #20]
 8006426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800642a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800642e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006432:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x5 * c0;
 8006436:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800643a:	edd7 7a05 	vldr	s15, [r7, #20]
 800643e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006442:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8006446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800644a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x6 * c0;
 800644e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006452:	edd7 7a05 	vldr	s15, [r7, #20]
 8006456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800645e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006462:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x7 * c0;
 8006466:	ed97 7a04 	vldr	s14, [r7, #16]
 800646a:	edd7 7a05 	vldr	s15, [r7, #20]
 800646e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006472:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800647a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x0 * c0;
 800647e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8006482:	edd7 7a05 	vldr	s15, [r7, #20]
 8006486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800648a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800648e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006492:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x1 * c0;
 8006496:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800649a:	edd7 7a05 	vldr	s15, [r7, #20]
 800649e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80064a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064aa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 80064ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064b0:	1d1a      	adds	r2, r3, #4
 80064b2:	66ba      	str	r2, [r7, #104]	; 0x68
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x2 = *(px++);
 80064b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ba:	1d1a      	adds	r2, r3, #4
 80064bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	63fb      	str	r3, [r7, #60]	; 0x3c

         /* Perform the multiply-accumulates */
         acc0 += x3 * c0;
 80064c2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80064c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80064ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ce:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80064d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064d6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x4 * c0;
 80064da:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80064de:	edd7 7a05 	vldr	s15, [r7, #20]
 80064e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80064ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064ee:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x5 * c0;
 80064f2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80064f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80064fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064fe:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006506:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x6 * c0;
 800650a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800650e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006516:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800651a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800651e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x7 * c0;
 8006522:	ed97 7a04 	vldr	s14, [r7, #16]
 8006526:	edd7 7a05 	vldr	s15, [r7, #20]
 800652a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800652e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006536:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x0 * c0;
 800653a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800653e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006546:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800654a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800654e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x1 * c0;
 8006552:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006556:	edd7 7a05 	vldr	s15, [r7, #20]
 800655a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006566:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x2 * c0;
 800656a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800656e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006576:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800657a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800657e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8006582:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006584:	1d1a      	adds	r2, r3, #4
 8006586:	66ba      	str	r2, [r7, #104]	; 0x68
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x3 = *(px++);
 800658c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800658e:	1d1a      	adds	r2, r3, #4
 8006590:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	63bb      	str	r3, [r7, #56]	; 0x38
         /* Perform the multiply-accumulates */
         acc0 += x4 * c0;
 8006596:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800659a:	edd7 7a05 	vldr	s15, [r7, #20]
 800659e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a2:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80065a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065aa:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x5 * c0;
 80065ae:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80065b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80065b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ba:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80065be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065c2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x6 * c0;
 80065c6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80065ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80065ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065d2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80065d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065da:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x7 * c0;
 80065de:	ed97 7a04 	vldr	s14, [r7, #16]
 80065e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80065e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ea:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80065ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065f2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x0 * c0;
 80065f6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80065fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80065fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006602:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800660a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x1 * c0;
 800660e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006612:	edd7 7a05 	vldr	s15, [r7, #20]
 8006616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800661a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800661e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006622:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x2 * c0;
 8006626:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800662a:	edd7 7a05 	vldr	s15, [r7, #20]
 800662e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006632:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800663a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x3 * c0;
 800663e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006642:	edd7 7a05 	vldr	s15, [r7, #20]
 8006646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800664a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800664e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006652:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 8006656:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006658:	1d1a      	adds	r2, r3, #4
 800665a:	66ba      	str	r2, [r7, #104]	; 0x68
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x4 = *(px++);
 8006660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006662:	1d1a      	adds	r2, r3, #4
 8006664:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	637b      	str	r3, [r7, #52]	; 0x34

         /* Perform the multiply-accumulates */
         acc0 += x5 * c0;
 800666a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800666e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006676:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800667a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800667e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x6 * c0;
 8006682:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006686:	edd7 7a05 	vldr	s15, [r7, #20]
 800668a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800668e:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8006692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006696:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x7 * c0;
 800669a:	ed97 7a04 	vldr	s14, [r7, #16]
 800669e:	edd7 7a05 	vldr	s15, [r7, #20]
 80066a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80066aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066ae:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x0 * c0;
 80066b2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80066b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80066ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066be:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80066c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066c6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x1 * c0;
 80066ca:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80066ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80066d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80066da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066de:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x2 * c0;
 80066e2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80066e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80066ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ee:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80066f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066f6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x3 * c0;
 80066fa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80066fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8006702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006706:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800670a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800670e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x4 * c0;
 8006712:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8006716:	edd7 7a05 	vldr	s15, [r7, #20]
 800671a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800671e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8006722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006726:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 800672a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800672c:	1d1a      	adds	r2, r3, #4
 800672e:	66ba      	str	r2, [r7, #104]	; 0x68
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x5 = *(px++);
 8006734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006736:	1d1a      	adds	r2, r3, #4
 8006738:	66fa      	str	r2, [r7, #108]	; 0x6c
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	633b      	str	r3, [r7, #48]	; 0x30

         /* Perform the multiply-accumulates */
         acc0 += x6 * c0;
 800673e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006742:	edd7 7a05 	vldr	s15, [r7, #20]
 8006746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800674e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006752:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x7 * c0;
 8006756:	ed97 7a04 	vldr	s14, [r7, #16]
 800675a:	edd7 7a05 	vldr	s15, [r7, #20]
 800675e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006762:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8006766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800676a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x0 * c0;
 800676e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8006772:	edd7 7a05 	vldr	s15, [r7, #20]
 8006776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800677a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800677e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006782:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x1 * c0;
 8006786:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800678a:	edd7 7a05 	vldr	s15, [r7, #20]
 800678e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006792:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8006796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800679a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x2 * c0;
 800679e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80067a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80067a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067aa:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80067ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067b2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x3 * c0;
 80067b6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80067ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80067be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80067c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067ca:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x4 * c0;
 80067ce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80067d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80067d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067da:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80067de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067e2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x5 * c0;
 80067e6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80067ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80067ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80067f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067fa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Read the b[numTaps-4] coefficient */
         c0 = *(pb++);
 80067fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006800:	1d1a      	adds	r2, r3, #4
 8006802:	66ba      	str	r2, [r7, #104]	; 0x68
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	617b      	str	r3, [r7, #20]

         /* Read x[n-numTaps-6] sample */
         x6 = *(px++);
 8006808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800680a:	1d1a      	adds	r2, r3, #4
 800680c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	62fb      	str	r3, [r7, #44]	; 0x2c

         /* Perform the multiply-accumulates */
         acc0 += x7 * c0;
 8006812:	ed97 7a04 	vldr	s14, [r7, #16]
 8006816:	edd7 7a05 	vldr	s15, [r7, #20]
 800681a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800681e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8006822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006826:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x0 * c0;
 800682a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800682e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006836:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800683a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800683e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x1 * c0;
 8006842:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006846:	edd7 7a05 	vldr	s15, [r7, #20]
 800684a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006856:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x2 * c0;
 800685a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800685e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006866:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800686a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800686e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x3 * c0;
 8006872:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8006876:	edd7 7a05 	vldr	s15, [r7, #20]
 800687a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800687e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006886:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x4 * c0;
 800688a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800688e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006896:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800689a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800689e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x5 * c0;
 80068a2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80068a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80068aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80068b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068b6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x6 * c0;
 80068ba:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80068be:	edd7 7a05 	vldr	s15, [r7, #20]
 80068c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80068ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068ce:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         tapCnt--;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	3b01      	subs	r3, #1
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
      while (tapCnt > 0U)
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f47f aca9 	bne.w	8006232 <arm_fir_f32+0x142>
      }

      /* If the filter length is not a multiple of 8, compute the remaining filter taps */
      tapCnt = numTaps % 0x8U;
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24

      while (tapCnt > 0U)
 80068e8:	e07a      	b.n	80069e0 <arm_fir_f32+0x8f0>
      {
         /* Read coefficients */
         c0 = *(pb++);
 80068ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068ec:	1d1a      	adds	r2, r3, #4
 80068ee:	66ba      	str	r2, [r7, #104]	; 0x68
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	617b      	str	r3, [r7, #20]

         /* Fetch 1 state variable */
         x7 = *(px++);
 80068f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f6:	1d1a      	adds	r2, r3, #4
 80068f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	613b      	str	r3, [r7, #16]

         /* Perform the multiply-accumulates */
         acc0 += x0 * c0;
 80068fe:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8006902:	edd7 7a05 	vldr	s15, [r7, #20]
 8006906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800690a:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800690e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006912:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         acc1 += x1 * c0;
 8006916:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800691a:	edd7 7a05 	vldr	s15, [r7, #20]
 800691e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006922:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8006926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800692a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
         acc2 += x2 * c0;
 800692e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006932:	edd7 7a05 	vldr	s15, [r7, #20]
 8006936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800693a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800693e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006942:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
         acc3 += x3 * c0;
 8006946:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800694a:	edd7 7a05 	vldr	s15, [r7, #20]
 800694e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006952:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8006956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800695a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
         acc4 += x4 * c0;
 800695e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8006962:	edd7 7a05 	vldr	s15, [r7, #20]
 8006966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800696a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800696e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006972:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
         acc5 += x5 * c0;
 8006976:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800697a:	edd7 7a05 	vldr	s15, [r7, #20]
 800697e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006982:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8006986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800698a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
         acc6 += x6 * c0;
 800698e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006992:	edd7 7a05 	vldr	s15, [r7, #20]
 8006996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800699a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800699e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069a2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
         acc7 += x7 * c0;
 80069a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80069aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80069ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069b2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80069b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069ba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

         /* Reuse the present sample states for next sample */
         x0 = x1;
 80069be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c0:	647b      	str	r3, [r7, #68]	; 0x44
         x1 = x2;
 80069c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c4:	643b      	str	r3, [r7, #64]	; 0x40
         x2 = x3;
 80069c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         x3 = x4;
 80069ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069cc:	63bb      	str	r3, [r7, #56]	; 0x38
         x4 = x5;
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	637b      	str	r3, [r7, #52]	; 0x34
         x5 = x6;
 80069d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d4:	633b      	str	r3, [r7, #48]	; 0x30
         x6 = x7;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	62fb      	str	r3, [r7, #44]	; 0x2c

         /* Decrement the loop counter */
         tapCnt--;
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	3b01      	subs	r3, #1
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
      while (tapCnt > 0U)
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d181      	bne.n	80068ea <arm_fir_f32+0x7fa>
      }

      /* Advance the state pointer by 8 to process the next group of 8 samples */
      pState = pState + 8;
 80069e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069e8:	3320      	adds	r3, #32
 80069ea:	677b      	str	r3, [r7, #116]	; 0x74

      /* The results in the 8 accumulators, store in the destination buffer. */
      *pDst++ = acc0;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	1d1a      	adds	r2, r3, #4
 80069f0:	607a      	str	r2, [r7, #4]
 80069f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80069f4:	601a      	str	r2, [r3, #0]
      *pDst++ = acc1;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	1d1a      	adds	r2, r3, #4
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069fe:	601a      	str	r2, [r3, #0]
      *pDst++ = acc2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	1d1a      	adds	r2, r3, #4
 8006a04:	607a      	str	r2, [r7, #4]
 8006a06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a08:	601a      	str	r2, [r3, #0]
      *pDst++ = acc3;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	1d1a      	adds	r2, r3, #4
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a12:	601a      	str	r2, [r3, #0]
      *pDst++ = acc4;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	1d1a      	adds	r2, r3, #4
 8006a18:	607a      	str	r2, [r7, #4]
 8006a1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a1c:	601a      	str	r2, [r3, #0]
      *pDst++ = acc5;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	1d1a      	adds	r2, r3, #4
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a26:	601a      	str	r2, [r3, #0]
      *pDst++ = acc6;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	1d1a      	adds	r2, r3, #4
 8006a2c:	607a      	str	r2, [r7, #4]
 8006a2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a30:	601a      	str	r2, [r3, #0]
      *pDst++ = acc7;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	1d1a      	adds	r2, r3, #4
 8006a36:	607a      	str	r2, [r7, #4]
 8006a38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a3a:	601a      	str	r2, [r3, #0]

      blkCnt--;
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	623b      	str	r3, [r7, #32]
   while (blkCnt > 0U)
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f47f ab71 	bne.w	800612c <arm_fir_f32+0x3c>
   }

   /* If the blockSize is not a multiple of 8, compute any remaining output samples here.
   ** No loop unrolling is used. */
   blkCnt = blockSize % 0x8U;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	623b      	str	r3, [r7, #32]

   while (blkCnt > 0U)
 8006a52:	e033      	b.n	8006abc <arm_fir_f32+0x9cc>
   {
      /* Copy one sample at a time into state buffer */
      *pStateCurnt++ = *pSrc++;
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	1d13      	adds	r3, r2, #4
 8006a58:	60bb      	str	r3, [r7, #8]
 8006a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a5c:	1d19      	adds	r1, r3, #4
 8006a5e:	6739      	str	r1, [r7, #112]	; 0x70
 8006a60:	6812      	ldr	r2, [r2, #0]
 8006a62:	601a      	str	r2, [r3, #0]

      /* Set the accumulator to zero */
      acc0 = 0.0f;
 8006a64:	f04f 0300 	mov.w	r3, #0
 8006a68:	667b      	str	r3, [r7, #100]	; 0x64

      /* Initialize state pointer */
      px = pState;
 8006a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a6c:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* Initialize Coefficient pointer */
      pb = (pCoeffs);
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	66bb      	str	r3, [r7, #104]	; 0x68

      i = numTaps;
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Perform the multiply-accumulates */
      do
      {
         acc0 += *px++ * *pb++;
 8006a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a78:	1d1a      	adds	r2, r3, #4
 8006a7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a7c:	ed93 7a00 	vldr	s14, [r3]
 8006a80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a82:	1d1a      	adds	r2, r3, #4
 8006a84:	66ba      	str	r2, [r7, #104]	; 0x68
 8006a86:	edd3 7a00 	vldr	s15, [r3]
 8006a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a8e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8006a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a96:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
         i--;
 8006a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	62bb      	str	r3, [r7, #40]	; 0x28

      } while (i > 0U);
 8006aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1e7      	bne.n	8006a76 <arm_fir_f32+0x986>

      /* The result is store in the destination buffer. */
      *pDst++ = acc0;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	1d1a      	adds	r2, r3, #4
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006aae:	601a      	str	r2, [r3, #0]

      /* Advance state pointer by 1 for the next sample */
      pState = pState + 1;
 8006ab0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	677b      	str	r3, [r7, #116]	; 0x74

      blkCnt--;
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	623b      	str	r3, [r7, #32]
   while (blkCnt > 0U)
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1c8      	bne.n	8006a54 <arm_fir_f32+0x964>
   /* Processing is complete.
   ** Now copy the last numTaps - 1 samples to the start of the state buffer.
   ** This prepares the state buffer for the next function call. */

   /* Points to the start of the state buffer */
   pStateCurnt = S->pState;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	673b      	str	r3, [r7, #112]	; 0x70

   tapCnt = (numTaps - 1U) >> 2U;
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	089b      	lsrs	r3, r3, #2
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24

   /* copy data */
   while (tapCnt > 0U)
 8006ad0:	e022      	b.n	8006b18 <arm_fir_f32+0xa28>
   {
      *pStateCurnt++ = *pState++;
 8006ad2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006ad4:	1d13      	adds	r3, r2, #4
 8006ad6:	677b      	str	r3, [r7, #116]	; 0x74
 8006ad8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ada:	1d19      	adds	r1, r3, #4
 8006adc:	6739      	str	r1, [r7, #112]	; 0x70
 8006ade:	6812      	ldr	r2, [r2, #0]
 8006ae0:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8006ae2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006ae4:	1d13      	adds	r3, r2, #4
 8006ae6:	677b      	str	r3, [r7, #116]	; 0x74
 8006ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aea:	1d19      	adds	r1, r3, #4
 8006aec:	6739      	str	r1, [r7, #112]	; 0x70
 8006aee:	6812      	ldr	r2, [r2, #0]
 8006af0:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8006af2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006af4:	1d13      	adds	r3, r2, #4
 8006af6:	677b      	str	r3, [r7, #116]	; 0x74
 8006af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006afa:	1d19      	adds	r1, r3, #4
 8006afc:	6739      	str	r1, [r7, #112]	; 0x70
 8006afe:	6812      	ldr	r2, [r2, #0]
 8006b00:	601a      	str	r2, [r3, #0]
      *pStateCurnt++ = *pState++;
 8006b02:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006b04:	1d13      	adds	r3, r2, #4
 8006b06:	677b      	str	r3, [r7, #116]	; 0x74
 8006b08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b0a:	1d19      	adds	r1, r3, #4
 8006b0c:	6739      	str	r1, [r7, #112]	; 0x70
 8006b0e:	6812      	ldr	r2, [r2, #0]
 8006b10:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	3b01      	subs	r3, #1
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
   while (tapCnt > 0U)
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1d9      	bne.n	8006ad2 <arm_fir_f32+0x9e2>
   }

   /* Calculate remaining number of copies */
   tapCnt = (numTaps - 1U) % 0x4U;
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	f003 0303 	and.w	r3, r3, #3
 8006b26:	627b      	str	r3, [r7, #36]	; 0x24

   /* Copy the remaining q31_t data */
   while (tapCnt > 0U)
 8006b28:	e00a      	b.n	8006b40 <arm_fir_f32+0xa50>
   {
      *pStateCurnt++ = *pState++;
 8006b2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006b2c:	1d13      	adds	r3, r2, #4
 8006b2e:	677b      	str	r3, [r7, #116]	; 0x74
 8006b30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b32:	1d19      	adds	r1, r3, #4
 8006b34:	6739      	str	r1, [r7, #112]	; 0x70
 8006b36:	6812      	ldr	r2, [r2, #0]
 8006b38:	601a      	str	r2, [r3, #0]

      /* Decrement the loop counter */
      tapCnt--;
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
   while (tapCnt > 0U)
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1f1      	bne.n	8006b2a <arm_fir_f32+0xa3a>
   }
}
 8006b46:	bf00      	nop
 8006b48:	bf00      	nop
 8006b4a:	377c      	adds	r7, #124	; 0x7c
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <arm_fir_init_f32>:
  arm_fir_instance_f32 * S,
  uint16_t numTaps,
  float32_t * pCoeffs,
  float32_t * pState,
  uint32_t blockSize)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	607a      	str	r2, [r7, #4]
 8006b5e:	603b      	str	r3, [r7, #0]
 8006b60:	460b      	mov	r3, r1
 8006b62:	817b      	strh	r3, [r7, #10]
  /* Assign filter taps */
  S->numTaps = numTaps;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	897a      	ldrh	r2, [r7, #10]
 8006b68:	801a      	strh	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and the size of state buffer is (blockSize + numTaps - 1) */
  memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8006b70:	897a      	ldrh	r2, [r7, #10]
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	4413      	add	r3, r2
 8006b76:	3b01      	subs	r3, #1
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	6838      	ldr	r0, [r7, #0]
 8006b80:	f005 fe4c 	bl	800c81c <memset>

  /* Assign state pointer */
  S->pState = pState;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	605a      	str	r2, [r3, #4]

}
 8006b8a:	bf00      	nop
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8006b98:	4b08      	ldr	r3, [pc, #32]	; (8006bbc <HAL_Init+0x28>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a07      	ldr	r2, [pc, #28]	; (8006bbc <HAL_Init+0x28>)
 8006b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ba2:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ba4:	2003      	movs	r0, #3
 8006ba6:	f000 f973 	bl	8006e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006baa:	200f      	movs	r0, #15
 8006bac:	f000 f808 	bl	8006bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006bb0:	f7fa fdea 	bl	8001788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	40023c00 	.word	0x40023c00

08006bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006bc8:	4b12      	ldr	r3, [pc, #72]	; (8006c14 <HAL_InitTick+0x54>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	4b12      	ldr	r3, [pc, #72]	; (8006c18 <HAL_InitTick+0x58>)
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 f999 	bl	8006f16 <HAL_SYSTICK_Config>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e00e      	b.n	8006c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b0f      	cmp	r3, #15
 8006bf2:	d80a      	bhi.n	8006c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	6879      	ldr	r1, [r7, #4]
 8006bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfc:	f000 f953 	bl	8006ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c00:	4a06      	ldr	r2, [pc, #24]	; (8006c1c <HAL_InitTick+0x5c>)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	e000      	b.n	8006c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	20000254 	.word	0x20000254
 8006c18:	200002d0 	.word	0x200002d0
 8006c1c:	200002cc 	.word	0x200002cc

08006c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c20:	b480      	push	{r7}
 8006c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c24:	4b06      	ldr	r3, [pc, #24]	; (8006c40 <HAL_IncTick+0x20>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	4b06      	ldr	r3, [pc, #24]	; (8006c44 <HAL_IncTick+0x24>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4413      	add	r3, r2
 8006c30:	4a04      	ldr	r2, [pc, #16]	; (8006c44 <HAL_IncTick+0x24>)
 8006c32:	6013      	str	r3, [r2, #0]
}
 8006c34:	bf00      	nop
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	200002d0 	.word	0x200002d0
 8006c44:	200151ec 	.word	0x200151ec

08006c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8006c4c:	4b03      	ldr	r3, [pc, #12]	; (8006c5c <HAL_GetTick+0x14>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	200151ec 	.word	0x200151ec

08006c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c68:	f7ff ffee 	bl	8006c48 <HAL_GetTick>
 8006c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c78:	d005      	beq.n	8006c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ca4 <HAL_Delay+0x44>)
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006c86:	bf00      	nop
 8006c88:	f7ff ffde 	bl	8006c48 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d8f7      	bhi.n	8006c88 <HAL_Delay+0x28>
  {
  }
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	200002d0 	.word	0x200002d0

08006ca8 <__NVIC_SetPriorityGrouping>:
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f003 0307 	and.w	r3, r3, #7
 8006cb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006cb8:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006cd0:	4b06      	ldr	r3, [pc, #24]	; (8006cec <__NVIC_SetPriorityGrouping+0x44>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006cd6:	4a04      	ldr	r2, [pc, #16]	; (8006ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	60d3      	str	r3, [r2, #12]
}
 8006cdc:	bf00      	nop
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	e000ed00 	.word	0xe000ed00
 8006cec:	05fa0000 	.word	0x05fa0000

08006cf0 <__NVIC_GetPriorityGrouping>:
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cf4:	4b04      	ldr	r3, [pc, #16]	; (8006d08 <__NVIC_GetPriorityGrouping+0x18>)
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	0a1b      	lsrs	r3, r3, #8
 8006cfa:	f003 0307 	and.w	r3, r3, #7
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	e000ed00 	.word	0xe000ed00

08006d0c <__NVIC_EnableIRQ>:
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	4603      	mov	r3, r0
 8006d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	db0b      	blt.n	8006d36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d1e:	79fb      	ldrb	r3, [r7, #7]
 8006d20:	f003 021f 	and.w	r2, r3, #31
 8006d24:	4907      	ldr	r1, [pc, #28]	; (8006d44 <__NVIC_EnableIRQ+0x38>)
 8006d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d2a:	095b      	lsrs	r3, r3, #5
 8006d2c:	2001      	movs	r0, #1
 8006d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8006d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006d36:	bf00      	nop
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	e000e100 	.word	0xe000e100

08006d48 <__NVIC_DisableIRQ>:
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	db12      	blt.n	8006d80 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d5a:	79fb      	ldrb	r3, [r7, #7]
 8006d5c:	f003 021f 	and.w	r2, r3, #31
 8006d60:	490a      	ldr	r1, [pc, #40]	; (8006d8c <__NVIC_DisableIRQ+0x44>)
 8006d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d66:	095b      	lsrs	r3, r3, #5
 8006d68:	2001      	movs	r0, #1
 8006d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8006d6e:	3320      	adds	r3, #32
 8006d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006d74:	f3bf 8f4f 	dsb	sy
}
 8006d78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006d7a:	f3bf 8f6f 	isb	sy
}
 8006d7e:	bf00      	nop
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	e000e100 	.word	0xe000e100

08006d90 <__NVIC_SetPriority>:
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	4603      	mov	r3, r0
 8006d98:	6039      	str	r1, [r7, #0]
 8006d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	db0a      	blt.n	8006dba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	490c      	ldr	r1, [pc, #48]	; (8006ddc <__NVIC_SetPriority+0x4c>)
 8006daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dae:	0112      	lsls	r2, r2, #4
 8006db0:	b2d2      	uxtb	r2, r2
 8006db2:	440b      	add	r3, r1
 8006db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006db8:	e00a      	b.n	8006dd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	4908      	ldr	r1, [pc, #32]	; (8006de0 <__NVIC_SetPriority+0x50>)
 8006dc0:	79fb      	ldrb	r3, [r7, #7]
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	3b04      	subs	r3, #4
 8006dc8:	0112      	lsls	r2, r2, #4
 8006dca:	b2d2      	uxtb	r2, r2
 8006dcc:	440b      	add	r3, r1
 8006dce:	761a      	strb	r2, [r3, #24]
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	e000e100 	.word	0xe000e100
 8006de0:	e000ed00 	.word	0xe000ed00

08006de4 <NVIC_EncodePriority>:
{
 8006de4:	b480      	push	{r7}
 8006de6:	b089      	sub	sp, #36	; 0x24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	f1c3 0307 	rsb	r3, r3, #7
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	bf28      	it	cs
 8006e02:	2304      	movcs	r3, #4
 8006e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	2b06      	cmp	r3, #6
 8006e0c:	d902      	bls.n	8006e14 <NVIC_EncodePriority+0x30>
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	3b03      	subs	r3, #3
 8006e12:	e000      	b.n	8006e16 <NVIC_EncodePriority+0x32>
 8006e14:	2300      	movs	r3, #0
 8006e16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e18:	f04f 32ff 	mov.w	r2, #4294967295
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e22:	43da      	mvns	r2, r3
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	401a      	ands	r2, r3
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	fa01 f303 	lsl.w	r3, r1, r3
 8006e36:	43d9      	mvns	r1, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e3c:	4313      	orrs	r3, r2
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3724      	adds	r7, #36	; 0x24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
	...

08006e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e5c:	d301      	bcc.n	8006e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e00f      	b.n	8006e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e62:	4a0a      	ldr	r2, [pc, #40]	; (8006e8c <SysTick_Config+0x40>)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e6a:	210f      	movs	r1, #15
 8006e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e70:	f7ff ff8e 	bl	8006d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e74:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <SysTick_Config+0x40>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e7a:	4b04      	ldr	r3, [pc, #16]	; (8006e8c <SysTick_Config+0x40>)
 8006e7c:	2207      	movs	r2, #7
 8006e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3708      	adds	r7, #8
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	e000e010 	.word	0xe000e010

08006e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7ff ff05 	bl	8006ca8 <__NVIC_SetPriorityGrouping>
}
 8006e9e:	bf00      	nop
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b086      	sub	sp, #24
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	4603      	mov	r3, r0
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	607a      	str	r2, [r7, #4]
 8006eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006eb8:	f7ff ff1a 	bl	8006cf0 <__NVIC_GetPriorityGrouping>
 8006ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	68b9      	ldr	r1, [r7, #8]
 8006ec2:	6978      	ldr	r0, [r7, #20]
 8006ec4:	f7ff ff8e 	bl	8006de4 <NVIC_EncodePriority>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ece:	4611      	mov	r1, r2
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff ff5d 	bl	8006d90 <__NVIC_SetPriority>
}
 8006ed6:	bf00      	nop
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b082      	sub	sp, #8
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7ff ff0d 	bl	8006d0c <__NVIC_EnableIRQ>
}
 8006ef2:	bf00      	nop
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b082      	sub	sp, #8
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	4603      	mov	r3, r0
 8006f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff ff1d 	bl	8006d48 <__NVIC_DisableIRQ>
}
 8006f0e:	bf00      	nop
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b082      	sub	sp, #8
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7ff ff94 	bl	8006e4c <SysTick_Config>
 8006f24:	4603      	mov	r3, r0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006f30:	b480      	push	{r7}
 8006f32:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006f34:	f3bf 8f5f 	dmb	sy
}
 8006f38:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006f3a:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <HAL_MPU_Disable+0x28>)
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	4a06      	ldr	r2, [pc, #24]	; (8006f58 <HAL_MPU_Disable+0x28>)
 8006f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f44:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006f46:	4b05      	ldr	r3, [pc, #20]	; (8006f5c <HAL_MPU_Disable+0x2c>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	605a      	str	r2, [r3, #4]
}
 8006f4c:	bf00      	nop
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	e000ed00 	.word	0xe000ed00
 8006f5c:	e000ed90 	.word	0xe000ed90

08006f60 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006f68:	4a0b      	ldr	r2, [pc, #44]	; (8006f98 <HAL_MPU_Enable+0x38>)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f043 0301 	orr.w	r3, r3, #1
 8006f70:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006f72:	4b0a      	ldr	r3, [pc, #40]	; (8006f9c <HAL_MPU_Enable+0x3c>)
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	4a09      	ldr	r2, [pc, #36]	; (8006f9c <HAL_MPU_Enable+0x3c>)
 8006f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f7c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006f7e:	f3bf 8f4f 	dsb	sy
}
 8006f82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006f84:	f3bf 8f6f 	isb	sy
}
 8006f88:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006f8a:	bf00      	nop
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	e000ed90 	.word	0xe000ed90
 8006f9c:	e000ed00 	.word	0xe000ed00

08006fa0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	785a      	ldrb	r2, [r3, #1]
 8006fac:	4b1d      	ldr	r3, [pc, #116]	; (8007024 <HAL_MPU_ConfigRegion+0x84>)
 8006fae:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d029      	beq.n	800700c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8006fb8:	4a1a      	ldr	r2, [pc, #104]	; (8007024 <HAL_MPU_ConfigRegion+0x84>)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	7b1b      	ldrb	r3, [r3, #12]
 8006fc4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	7adb      	ldrb	r3, [r3, #11]
 8006fca:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006fcc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	7a9b      	ldrb	r3, [r3, #10]
 8006fd2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006fd4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	7b5b      	ldrb	r3, [r3, #13]
 8006fda:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006fdc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	7b9b      	ldrb	r3, [r3, #14]
 8006fe2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006fe4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	7bdb      	ldrb	r3, [r3, #15]
 8006fea:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006fec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	7a5b      	ldrb	r3, [r3, #9]
 8006ff2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006ff4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	7a1b      	ldrb	r3, [r3, #8]
 8006ffa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006ffc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	7812      	ldrb	r2, [r2, #0]
 8007002:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007004:	4a07      	ldr	r2, [pc, #28]	; (8007024 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007006:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007008:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800700a:	e005      	b.n	8007018 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800700c:	4b05      	ldr	r3, [pc, #20]	; (8007024 <HAL_MPU_ConfigRegion+0x84>)
 800700e:	2200      	movs	r2, #0
 8007010:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8007012:	4b04      	ldr	r3, [pc, #16]	; (8007024 <HAL_MPU_ConfigRegion+0x84>)
 8007014:	2200      	movs	r2, #0
 8007016:	611a      	str	r2, [r3, #16]
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	e000ed90 	.word	0xe000ed90

08007028 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800702c:	f000 f802 	bl	8007034 <HAL_SYSTICK_Callback>
}
 8007030:	bf00      	nop
 8007032:	bd80      	pop	{r7, pc}

08007034 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8007034:	b480      	push	{r7}
 8007036:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8007038:	bf00      	nop
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
	...

08007044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007050:	f7ff fdfa 	bl	8006c48 <HAL_GetTick>
 8007054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e099      	b.n	8007194 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 0201 	bic.w	r2, r2, #1
 800707e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007080:	e00f      	b.n	80070a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007082:	f7ff fde1 	bl	8006c48 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	2b05      	cmp	r3, #5
 800708e:	d908      	bls.n	80070a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2220      	movs	r2, #32
 8007094:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2203      	movs	r2, #3
 800709a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e078      	b.n	8007194 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1e8      	bne.n	8007082 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	4b38      	ldr	r3, [pc, #224]	; (800719c <HAL_DMA_Init+0x158>)
 80070bc:	4013      	ands	r3, r2
 80070be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f8:	2b04      	cmp	r3, #4
 80070fa:	d107      	bne.n	800710c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007104:	4313      	orrs	r3, r2
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	4313      	orrs	r3, r2
 800710a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f023 0307 	bic.w	r3, r3, #7
 8007122:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	4313      	orrs	r3, r2
 800712c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007132:	2b04      	cmp	r3, #4
 8007134:	d117      	bne.n	8007166 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	4313      	orrs	r3, r2
 800713e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00e      	beq.n	8007166 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fb67 	bl	800781c <DMA_CheckFifoParam>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d008      	beq.n	8007166 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2240      	movs	r2, #64	; 0x40
 8007158:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007162:	2301      	movs	r3, #1
 8007164:	e016      	b.n	8007194 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fb1e 	bl	80077b0 <DMA_CalcBaseAndBitshift>
 8007174:	4603      	mov	r3, r0
 8007176:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800717c:	223f      	movs	r2, #63	; 0x3f
 800717e:	409a      	lsls	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	f010803f 	.word	0xf010803f

080071a0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e050      	b.n	8007254 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d101      	bne.n	80071c2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80071be:	2302      	movs	r3, #2
 80071c0:	e048      	b.n	8007254 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 0201 	bic.w	r2, r2, #1
 80071d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2200      	movs	r2, #0
 80071d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2200      	movs	r2, #0
 80071e0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2200      	movs	r2, #0
 80071e8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2200      	movs	r2, #0
 80071f0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2200      	movs	r2, #0
 80071f8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2221      	movs	r2, #33	; 0x21
 8007200:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fad4 	bl	80077b0 <DMA_CalcBaseAndBitshift>
 8007208:	4603      	mov	r3, r0
 800720a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007210:	223f      	movs	r2, #63	; 0x3f
 8007212:	409a      	lsls	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
 8007268:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007272:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800727a:	2b01      	cmp	r3, #1
 800727c:	d101      	bne.n	8007282 <HAL_DMA_Start_IT+0x26>
 800727e:	2302      	movs	r3, #2
 8007280:	e048      	b.n	8007314 <HAL_DMA_Start_IT+0xb8>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b01      	cmp	r3, #1
 8007294:	d137      	bne.n	8007306 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2202      	movs	r2, #2
 800729a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	68b9      	ldr	r1, [r7, #8]
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 fa52 	bl	8007754 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b4:	223f      	movs	r2, #63	; 0x3f
 80072b6:	409a      	lsls	r2, r3
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0216 	orr.w	r2, r2, #22
 80072ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	695a      	ldr	r2, [r3, #20]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072da:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d007      	beq.n	80072f4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f042 0208 	orr.w	r2, r2, #8
 80072f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f042 0201 	orr.w	r2, r2, #1
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	e005      	b.n	8007312 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800730e:	2302      	movs	r3, #2
 8007310:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007312:	7dfb      	ldrb	r3, [r7, #23]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007328:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800732a:	f7ff fc8d 	bl	8006c48 <HAL_GetTick>
 800732e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b02      	cmp	r3, #2
 800733a:	d008      	beq.n	800734e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2280      	movs	r2, #128	; 0x80
 8007340:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e052      	b.n	80073f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0216 	bic.w	r2, r2, #22
 800735c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	695a      	ldr	r2, [r3, #20]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800736c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	2b00      	cmp	r3, #0
 8007374:	d103      	bne.n	800737e <HAL_DMA_Abort+0x62>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800737a:	2b00      	cmp	r3, #0
 800737c:	d007      	beq.n	800738e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0208 	bic.w	r2, r2, #8
 800738c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f022 0201 	bic.w	r2, r2, #1
 800739c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800739e:	e013      	b.n	80073c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80073a0:	f7ff fc52 	bl	8006c48 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b05      	cmp	r3, #5
 80073ac:	d90c      	bls.n	80073c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2220      	movs	r2, #32
 80073b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2203      	movs	r2, #3
 80073b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e015      	b.n	80073f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e4      	bne.n	80073a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073da:	223f      	movs	r2, #63	; 0x3f
 80073dc:	409a      	lsls	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b02      	cmp	r3, #2
 800740e:	d004      	beq.n	800741a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2280      	movs	r2, #128	; 0x80
 8007414:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e00c      	b.n	8007434 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2205      	movs	r2, #5
 800741e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 0201 	bic.w	r2, r2, #1
 8007430:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800744c:	4b8e      	ldr	r3, [pc, #568]	; (8007688 <HAL_DMA_IRQHandler+0x248>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a8e      	ldr	r2, [pc, #568]	; (800768c <HAL_DMA_IRQHandler+0x24c>)
 8007452:	fba2 2303 	umull	r2, r3, r2, r3
 8007456:	0a9b      	lsrs	r3, r3, #10
 8007458:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800745e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800746a:	2208      	movs	r2, #8
 800746c:	409a      	lsls	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	4013      	ands	r3, r2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d01a      	beq.n	80074ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0304 	and.w	r3, r3, #4
 8007480:	2b00      	cmp	r3, #0
 8007482:	d013      	beq.n	80074ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0204 	bic.w	r2, r2, #4
 8007492:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007498:	2208      	movs	r2, #8
 800749a:	409a      	lsls	r2, r3
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a4:	f043 0201 	orr.w	r2, r3, #1
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b0:	2201      	movs	r2, #1
 80074b2:	409a      	lsls	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4013      	ands	r3, r2
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d012      	beq.n	80074e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00b      	beq.n	80074e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ce:	2201      	movs	r2, #1
 80074d0:	409a      	lsls	r2, r3
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074da:	f043 0202 	orr.w	r2, r3, #2
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074e6:	2204      	movs	r2, #4
 80074e8:	409a      	lsls	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	4013      	ands	r3, r2
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d012      	beq.n	8007518 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0302 	and.w	r3, r3, #2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00b      	beq.n	8007518 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007504:	2204      	movs	r2, #4
 8007506:	409a      	lsls	r2, r3
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007510:	f043 0204 	orr.w	r2, r3, #4
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800751c:	2210      	movs	r2, #16
 800751e:	409a      	lsls	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	4013      	ands	r3, r2
 8007524:	2b00      	cmp	r3, #0
 8007526:	d043      	beq.n	80075b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0308 	and.w	r3, r3, #8
 8007532:	2b00      	cmp	r3, #0
 8007534:	d03c      	beq.n	80075b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800753a:	2210      	movs	r2, #16
 800753c:	409a      	lsls	r2, r3
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d018      	beq.n	8007582 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d108      	bne.n	8007570 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	2b00      	cmp	r3, #0
 8007564:	d024      	beq.n	80075b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	4798      	blx	r3
 800756e:	e01f      	b.n	80075b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007574:	2b00      	cmp	r3, #0
 8007576:	d01b      	beq.n	80075b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	4798      	blx	r3
 8007580:	e016      	b.n	80075b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800758c:	2b00      	cmp	r3, #0
 800758e:	d107      	bne.n	80075a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f022 0208 	bic.w	r2, r2, #8
 800759e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d003      	beq.n	80075b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b4:	2220      	movs	r2, #32
 80075b6:	409a      	lsls	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4013      	ands	r3, r2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 808f 	beq.w	80076e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0310 	and.w	r3, r3, #16
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 8087 	beq.w	80076e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d6:	2220      	movs	r2, #32
 80075d8:	409a      	lsls	r2, r3
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b05      	cmp	r3, #5
 80075e8:	d136      	bne.n	8007658 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0216 	bic.w	r2, r2, #22
 80075f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	695a      	ldr	r2, [r3, #20]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007608:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760e:	2b00      	cmp	r3, #0
 8007610:	d103      	bne.n	800761a <HAL_DMA_IRQHandler+0x1da>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007616:	2b00      	cmp	r3, #0
 8007618:	d007      	beq.n	800762a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f022 0208 	bic.w	r2, r2, #8
 8007628:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800762e:	223f      	movs	r2, #63	; 0x3f
 8007630:	409a      	lsls	r2, r3
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800764a:	2b00      	cmp	r3, #0
 800764c:	d07e      	beq.n	800774c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	4798      	blx	r3
        }
        return;
 8007656:	e079      	b.n	800774c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d01d      	beq.n	80076a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10d      	bne.n	8007690 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007678:	2b00      	cmp	r3, #0
 800767a:	d031      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	4798      	blx	r3
 8007684:	e02c      	b.n	80076e0 <HAL_DMA_IRQHandler+0x2a0>
 8007686:	bf00      	nop
 8007688:	20000254 	.word	0x20000254
 800768c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007694:	2b00      	cmp	r3, #0
 8007696:	d023      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	4798      	blx	r3
 80076a0:	e01e      	b.n	80076e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10f      	bne.n	80076d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 0210 	bic.w	r2, r2, #16
 80076be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d032      	beq.n	800774e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d022      	beq.n	800773a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2205      	movs	r2, #5
 80076f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 0201 	bic.w	r2, r2, #1
 800770a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	3301      	adds	r3, #1
 8007710:	60bb      	str	r3, [r7, #8]
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	429a      	cmp	r2, r3
 8007716:	d307      	bcc.n	8007728 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1f2      	bne.n	800770c <HAL_DMA_IRQHandler+0x2cc>
 8007726:	e000      	b.n	800772a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007728:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800773e:	2b00      	cmp	r3, #0
 8007740:	d005      	beq.n	800774e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	4798      	blx	r3
 800774a:	e000      	b.n	800774e <HAL_DMA_IRQHandler+0x30e>
        return;
 800774c:	bf00      	nop
    }
  }
}
 800774e:	3718      	adds	r7, #24
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
 8007760:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007770:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	683a      	ldr	r2, [r7, #0]
 8007778:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	2b40      	cmp	r3, #64	; 0x40
 8007780:	d108      	bne.n	8007794 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007792:	e007      	b.n	80077a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	60da      	str	r2, [r3, #12]
}
 80077a4:	bf00      	nop
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	3b10      	subs	r3, #16
 80077c0:	4a13      	ldr	r2, [pc, #76]	; (8007810 <DMA_CalcBaseAndBitshift+0x60>)
 80077c2:	fba2 2303 	umull	r2, r3, r2, r3
 80077c6:	091b      	lsrs	r3, r3, #4
 80077c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80077ca:	4a12      	ldr	r2, [pc, #72]	; (8007814 <DMA_CalcBaseAndBitshift+0x64>)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4413      	add	r3, r2
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d908      	bls.n	80077f0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	4b0c      	ldr	r3, [pc, #48]	; (8007818 <DMA_CalcBaseAndBitshift+0x68>)
 80077e6:	4013      	ands	r3, r2
 80077e8:	1d1a      	adds	r2, r3, #4
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	659a      	str	r2, [r3, #88]	; 0x58
 80077ee:	e006      	b.n	80077fe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	461a      	mov	r2, r3
 80077f6:	4b08      	ldr	r3, [pc, #32]	; (8007818 <DMA_CalcBaseAndBitshift+0x68>)
 80077f8:	4013      	ands	r3, r2
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007802:	4618      	mov	r0, r3
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	aaaaaaab 	.word	0xaaaaaaab
 8007814:	0800eccc 	.word	0x0800eccc
 8007818:	fffffc00 	.word	0xfffffc00

0800781c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d11f      	bne.n	8007876 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2b03      	cmp	r3, #3
 800783a:	d856      	bhi.n	80078ea <DMA_CheckFifoParam+0xce>
 800783c:	a201      	add	r2, pc, #4	; (adr r2, 8007844 <DMA_CheckFifoParam+0x28>)
 800783e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007842:	bf00      	nop
 8007844:	08007855 	.word	0x08007855
 8007848:	08007867 	.word	0x08007867
 800784c:	08007855 	.word	0x08007855
 8007850:	080078eb 	.word	0x080078eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d046      	beq.n	80078ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007864:	e043      	b.n	80078ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800786e:	d140      	bne.n	80078f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007874:	e03d      	b.n	80078f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800787e:	d121      	bne.n	80078c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2b03      	cmp	r3, #3
 8007884:	d837      	bhi.n	80078f6 <DMA_CheckFifoParam+0xda>
 8007886:	a201      	add	r2, pc, #4	; (adr r2, 800788c <DMA_CheckFifoParam+0x70>)
 8007888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788c:	0800789d 	.word	0x0800789d
 8007890:	080078a3 	.word	0x080078a3
 8007894:	0800789d 	.word	0x0800789d
 8007898:	080078b5 	.word	0x080078b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	73fb      	strb	r3, [r7, #15]
      break;
 80078a0:	e030      	b.n	8007904 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d025      	beq.n	80078fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078b2:	e022      	b.n	80078fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80078bc:	d11f      	bne.n	80078fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80078c2:	e01c      	b.n	80078fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d903      	bls.n	80078d2 <DMA_CheckFifoParam+0xb6>
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d003      	beq.n	80078d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80078d0:	e018      	b.n	8007904 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	73fb      	strb	r3, [r7, #15]
      break;
 80078d6:	e015      	b.n	8007904 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00e      	beq.n	8007902 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	73fb      	strb	r3, [r7, #15]
      break;
 80078e8:	e00b      	b.n	8007902 <DMA_CheckFifoParam+0xe6>
      break;
 80078ea:	bf00      	nop
 80078ec:	e00a      	b.n	8007904 <DMA_CheckFifoParam+0xe8>
      break;
 80078ee:	bf00      	nop
 80078f0:	e008      	b.n	8007904 <DMA_CheckFifoParam+0xe8>
      break;
 80078f2:	bf00      	nop
 80078f4:	e006      	b.n	8007904 <DMA_CheckFifoParam+0xe8>
      break;
 80078f6:	bf00      	nop
 80078f8:	e004      	b.n	8007904 <DMA_CheckFifoParam+0xe8>
      break;
 80078fa:	bf00      	nop
 80078fc:	e002      	b.n	8007904 <DMA_CheckFifoParam+0xe8>
      break;   
 80078fe:	bf00      	nop
 8007900:	e000      	b.n	8007904 <DMA_CheckFifoParam+0xe8>
      break;
 8007902:	bf00      	nop
    }
  } 
  
  return status; 
 8007904:	7bfb      	ldrb	r3, [r7, #15]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3714      	adds	r7, #20
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop

08007914 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e039      	b.n	800799a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	d106      	bne.n	8007940 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f834 	bl	80079a8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007964:	f023 0107 	bic.w	r1, r3, #7
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	689a      	ldr	r2, [r3, #8]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800797a:	4b0a      	ldr	r3, [pc, #40]	; (80079a4 <HAL_DMA2D_Init+0x90>)
 800797c:	4013      	ands	r3, r2
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	68d1      	ldr	r1, [r2, #12]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	6812      	ldr	r2, [r2, #0]
 8007986:	430b      	orrs	r3, r1
 8007988:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	ffffc000 	.word	0xffffc000

080079a8 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af02      	add	r7, sp, #8
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d101      	bne.n	80079d8 <HAL_DMA2D_Start+0x1c>
 80079d4:	2302      	movs	r3, #2
 80079d6:	e018      	b.n	8007a0a <HAL_DMA2D_Start+0x4e>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2202      	movs	r2, #2
 80079e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	68b9      	ldr	r1, [r7, #8]
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 f988 	bl	8007d08 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0201 	orr.w	r2, r2, #1
 8007a06:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b086      	sub	sp, #24
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d056      	beq.n	8007adc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a2e:	f7ff f90b 	bl	8006c48 <HAL_GetTick>
 8007a32:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007a34:	e04b      	b.n	8007ace <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d023      	beq.n	8007a90 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f003 0320 	and.w	r3, r3, #32
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d005      	beq.n	8007a5e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a56:	f043 0202 	orr.w	r2, r3, #2
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d005      	beq.n	8007a74 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6c:	f043 0201 	orr.w	r2, r3, #1
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2221      	movs	r2, #33	; 0x21
 8007a7a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2204      	movs	r2, #4
 8007a80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e0a5      	b.n	8007bdc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a96:	d01a      	beq.n	8007ace <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a98:	f7ff f8d6 	bl	8006c48 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d302      	bcc.n	8007aae <HAL_DMA2D_PollForTransfer+0x9c>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10f      	bne.n	8007ace <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab2:	f043 0220 	orr.w	r2, r3, #32
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2203      	movs	r2, #3
 8007abe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e086      	b.n	8007bdc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d0ac      	beq.n	8007a36 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	f003 0320 	and.w	r3, r3, #32
 8007ae6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d061      	beq.n	8007bc2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007afe:	f7ff f8a3 	bl	8006c48 <HAL_GetTick>
 8007b02:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007b04:	e056      	b.n	8007bb4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d02e      	beq.n	8007b76 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f003 0308 	and.w	r3, r3, #8
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d005      	beq.n	8007b2e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b26:	f043 0204 	orr.w	r2, r3, #4
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f003 0320 	and.w	r3, r3, #32
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d005      	beq.n	8007b44 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3c:	f043 0202 	orr.w	r2, r3, #2
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b52:	f043 0201 	orr.w	r2, r3, #1
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2229      	movs	r2, #41	; 0x29
 8007b60:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2204      	movs	r2, #4
 8007b66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e032      	b.n	8007bdc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7c:	d01a      	beq.n	8007bb4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b7e:	f7ff f863 	bl	8006c48 <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d302      	bcc.n	8007b94 <HAL_DMA2D_PollForTransfer+0x182>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10f      	bne.n	8007bb4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b98:	f043 0220 	orr.w	r2, r3, #32
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2203      	movs	r2, #3
 8007ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e013      	b.n	8007bdc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f003 0310 	and.w	r3, r3, #16
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d0a1      	beq.n	8007b06 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2212      	movs	r2, #18
 8007bc8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d101      	bne.n	8007c04 <HAL_DMA2D_ConfigLayer+0x20>
 8007c00:	2302      	movs	r3, #2
 8007c02:	e079      	b.n	8007cf8 <HAL_DMA2D_ConfigLayer+0x114>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	011b      	lsls	r3, r3, #4
 8007c18:	3318      	adds	r3, #24
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	041b      	lsls	r3, r3, #16
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007c2e:	4b35      	ldr	r3, [pc, #212]	; (8007d04 <HAL_DMA2D_ConfigLayer+0x120>)
 8007c30:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	2b0a      	cmp	r3, #10
 8007c38:	d003      	beq.n	8007c42 <HAL_DMA2D_ConfigLayer+0x5e>
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	2b09      	cmp	r3, #9
 8007c40:	d107      	bne.n	8007c52 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	e005      	b.n	8007c5e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	061b      	lsls	r3, r3, #24
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d120      	bne.n	8007ca6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	43db      	mvns	r3, r3
 8007c6e:	ea02 0103 	and.w	r1, r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	430a      	orrs	r2, r1
 8007c7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	6812      	ldr	r2, [r2, #0]
 8007c84:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2b0a      	cmp	r3, #10
 8007c8c:	d003      	beq.n	8007c96 <HAL_DMA2D_ConfigLayer+0xb2>
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	2b09      	cmp	r3, #9
 8007c94:	d127      	bne.n	8007ce6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007ca2:	629a      	str	r2, [r3, #40]	; 0x28
 8007ca4:	e01f      	b.n	8007ce6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69da      	ldr	r2, [r3, #28]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	43db      	mvns	r3, r3
 8007cb0:	ea02 0103 	and.w	r1, r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	6812      	ldr	r2, [r2, #0]
 8007cc6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	2b0a      	cmp	r3, #10
 8007cce:	d003      	beq.n	8007cd8 <HAL_DMA2D_ConfigLayer+0xf4>
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	2b09      	cmp	r3, #9
 8007cd6:	d106      	bne.n	8007ce6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	68da      	ldr	r2, [r3, #12]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007ce4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	371c      	adds	r7, #28
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	ff03000f 	.word	0xff03000f

08007d08 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b08b      	sub	sp, #44	; 0x2c
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d1c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	041a      	lsls	r2, r3, #16
 8007d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d26:	431a      	orrs	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d40:	d174      	bne.n	8007e2c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007d48:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d50:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d58:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d108      	bne.n	8007d7a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	627b      	str	r3, [r7, #36]	; 0x24
 8007d78:	e053      	b.n	8007e22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d106      	bne.n	8007d90 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007d82:	69ba      	ldr	r2, [r7, #24]
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d8e:	e048      	b.n	8007e22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d111      	bne.n	8007dbc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	0cdb      	lsrs	r3, r3, #19
 8007d9c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	0a9b      	lsrs	r3, r3, #10
 8007da2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	08db      	lsrs	r3, r3, #3
 8007da8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	02db      	lsls	r3, r3, #11
 8007db2:	4313      	orrs	r3, r2
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	627b      	str	r3, [r7, #36]	; 0x24
 8007dba:	e032      	b.n	8007e22 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d117      	bne.n	8007df4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	0fdb      	lsrs	r3, r3, #31
 8007dc8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	0cdb      	lsrs	r3, r3, #19
 8007dce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	0adb      	lsrs	r3, r3, #11
 8007dd4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	08db      	lsrs	r3, r3, #3
 8007dda:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	015a      	lsls	r2, r3, #5
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	029b      	lsls	r3, r3, #10
 8007de4:	431a      	orrs	r2, r3
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	03db      	lsls	r3, r3, #15
 8007dea:	4313      	orrs	r3, r2
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	627b      	str	r3, [r7, #36]	; 0x24
 8007df2:	e016      	b.n	8007e22 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	0f1b      	lsrs	r3, r3, #28
 8007df8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	0d1b      	lsrs	r3, r3, #20
 8007dfe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	0b1b      	lsrs	r3, r3, #12
 8007e04:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	091b      	lsrs	r3, r3, #4
 8007e0a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	011a      	lsls	r2, r3, #4
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	021b      	lsls	r3, r3, #8
 8007e14:	431a      	orrs	r2, r3
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	031b      	lsls	r3, r3, #12
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e28:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007e2a:	e003      	b.n	8007e34 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	60da      	str	r2, [r3, #12]
}
 8007e34:	bf00      	nop
 8007e36:	372c      	adds	r7, #44	; 0x2c
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b089      	sub	sp, #36	; 0x24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007e52:	2300      	movs	r3, #0
 8007e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007e56:	2300      	movs	r3, #0
 8007e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	61fb      	str	r3, [r7, #28]
 8007e5e:	e175      	b.n	800814c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007e60:	2201      	movs	r2, #1
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	fa02 f303 	lsl.w	r3, r2, r3
 8007e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	4013      	ands	r3, r2
 8007e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007e74:	693a      	ldr	r2, [r7, #16]
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	f040 8164 	bne.w	8008146 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f003 0303 	and.w	r3, r3, #3
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d005      	beq.n	8007e96 <HAL_GPIO_Init+0x56>
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d130      	bne.n	8007ef8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	005b      	lsls	r3, r3, #1
 8007ea0:	2203      	movs	r2, #3
 8007ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea6:	43db      	mvns	r3, r3
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007ecc:	2201      	movs	r2, #1
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed4:	43db      	mvns	r3, r3
 8007ed6:	69ba      	ldr	r2, [r7, #24]
 8007ed8:	4013      	ands	r3, r2
 8007eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	091b      	lsrs	r3, r3, #4
 8007ee2:	f003 0201 	and.w	r2, r3, #1
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f003 0303 	and.w	r3, r3, #3
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d017      	beq.n	8007f34 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	2203      	movs	r2, #3
 8007f10:	fa02 f303 	lsl.w	r3, r2, r3
 8007f14:	43db      	mvns	r3, r3
 8007f16:	69ba      	ldr	r2, [r7, #24]
 8007f18:	4013      	ands	r3, r2
 8007f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	689a      	ldr	r2, [r3, #8]
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	005b      	lsls	r3, r3, #1
 8007f24:	fa02 f303 	lsl.w	r3, r2, r3
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f003 0303 	and.w	r3, r3, #3
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d123      	bne.n	8007f88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	08da      	lsrs	r2, r3, #3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3208      	adds	r2, #8
 8007f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	f003 0307 	and.w	r3, r3, #7
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	220f      	movs	r2, #15
 8007f58:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5c:	43db      	mvns	r3, r3
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	4013      	ands	r3, r2
 8007f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	fa02 f303 	lsl.w	r3, r2, r3
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	08da      	lsrs	r2, r3, #3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	3208      	adds	r2, #8
 8007f82:	69b9      	ldr	r1, [r7, #24]
 8007f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	005b      	lsls	r3, r3, #1
 8007f92:	2203      	movs	r2, #3
 8007f94:	fa02 f303 	lsl.w	r3, r2, r3
 8007f98:	43db      	mvns	r3, r3
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f003 0203 	and.w	r2, r3, #3
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	005b      	lsls	r3, r3, #1
 8007fac:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb0:	69ba      	ldr	r2, [r7, #24]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	69ba      	ldr	r2, [r7, #24]
 8007fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 80be 	beq.w	8008146 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fca:	4b66      	ldr	r3, [pc, #408]	; (8008164 <HAL_GPIO_Init+0x324>)
 8007fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fce:	4a65      	ldr	r2, [pc, #404]	; (8008164 <HAL_GPIO_Init+0x324>)
 8007fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8007fd6:	4b63      	ldr	r3, [pc, #396]	; (8008164 <HAL_GPIO_Init+0x324>)
 8007fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007fe2:	4a61      	ldr	r2, [pc, #388]	; (8008168 <HAL_GPIO_Init+0x328>)
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	089b      	lsrs	r3, r3, #2
 8007fe8:	3302      	adds	r3, #2
 8007fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	f003 0303 	and.w	r3, r3, #3
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	220f      	movs	r2, #15
 8007ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffe:	43db      	mvns	r3, r3
 8008000:	69ba      	ldr	r2, [r7, #24]
 8008002:	4013      	ands	r3, r2
 8008004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a58      	ldr	r2, [pc, #352]	; (800816c <HAL_GPIO_Init+0x32c>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d037      	beq.n	800807e <HAL_GPIO_Init+0x23e>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a57      	ldr	r2, [pc, #348]	; (8008170 <HAL_GPIO_Init+0x330>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d031      	beq.n	800807a <HAL_GPIO_Init+0x23a>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a56      	ldr	r2, [pc, #344]	; (8008174 <HAL_GPIO_Init+0x334>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d02b      	beq.n	8008076 <HAL_GPIO_Init+0x236>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a55      	ldr	r2, [pc, #340]	; (8008178 <HAL_GPIO_Init+0x338>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d025      	beq.n	8008072 <HAL_GPIO_Init+0x232>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a54      	ldr	r2, [pc, #336]	; (800817c <HAL_GPIO_Init+0x33c>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d01f      	beq.n	800806e <HAL_GPIO_Init+0x22e>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a53      	ldr	r2, [pc, #332]	; (8008180 <HAL_GPIO_Init+0x340>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d019      	beq.n	800806a <HAL_GPIO_Init+0x22a>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a52      	ldr	r2, [pc, #328]	; (8008184 <HAL_GPIO_Init+0x344>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d013      	beq.n	8008066 <HAL_GPIO_Init+0x226>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a51      	ldr	r2, [pc, #324]	; (8008188 <HAL_GPIO_Init+0x348>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d00d      	beq.n	8008062 <HAL_GPIO_Init+0x222>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a50      	ldr	r2, [pc, #320]	; (800818c <HAL_GPIO_Init+0x34c>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d007      	beq.n	800805e <HAL_GPIO_Init+0x21e>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a4f      	ldr	r2, [pc, #316]	; (8008190 <HAL_GPIO_Init+0x350>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d101      	bne.n	800805a <HAL_GPIO_Init+0x21a>
 8008056:	2309      	movs	r3, #9
 8008058:	e012      	b.n	8008080 <HAL_GPIO_Init+0x240>
 800805a:	230a      	movs	r3, #10
 800805c:	e010      	b.n	8008080 <HAL_GPIO_Init+0x240>
 800805e:	2308      	movs	r3, #8
 8008060:	e00e      	b.n	8008080 <HAL_GPIO_Init+0x240>
 8008062:	2307      	movs	r3, #7
 8008064:	e00c      	b.n	8008080 <HAL_GPIO_Init+0x240>
 8008066:	2306      	movs	r3, #6
 8008068:	e00a      	b.n	8008080 <HAL_GPIO_Init+0x240>
 800806a:	2305      	movs	r3, #5
 800806c:	e008      	b.n	8008080 <HAL_GPIO_Init+0x240>
 800806e:	2304      	movs	r3, #4
 8008070:	e006      	b.n	8008080 <HAL_GPIO_Init+0x240>
 8008072:	2303      	movs	r3, #3
 8008074:	e004      	b.n	8008080 <HAL_GPIO_Init+0x240>
 8008076:	2302      	movs	r3, #2
 8008078:	e002      	b.n	8008080 <HAL_GPIO_Init+0x240>
 800807a:	2301      	movs	r3, #1
 800807c:	e000      	b.n	8008080 <HAL_GPIO_Init+0x240>
 800807e:	2300      	movs	r3, #0
 8008080:	69fa      	ldr	r2, [r7, #28]
 8008082:	f002 0203 	and.w	r2, r2, #3
 8008086:	0092      	lsls	r2, r2, #2
 8008088:	4093      	lsls	r3, r2
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	4313      	orrs	r3, r2
 800808e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008090:	4935      	ldr	r1, [pc, #212]	; (8008168 <HAL_GPIO_Init+0x328>)
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	089b      	lsrs	r3, r3, #2
 8008096:	3302      	adds	r3, #2
 8008098:	69ba      	ldr	r2, [r7, #24]
 800809a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800809e:	4b3d      	ldr	r3, [pc, #244]	; (8008194 <HAL_GPIO_Init+0x354>)
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	43db      	mvns	r3, r3
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	4013      	ands	r3, r2
 80080ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	4313      	orrs	r3, r2
 80080c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80080c2:	4a34      	ldr	r2, [pc, #208]	; (8008194 <HAL_GPIO_Init+0x354>)
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80080c8:	4b32      	ldr	r3, [pc, #200]	; (8008194 <HAL_GPIO_Init+0x354>)
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	43db      	mvns	r3, r3
 80080d2:	69ba      	ldr	r2, [r7, #24]
 80080d4:	4013      	ands	r3, r2
 80080d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d003      	beq.n	80080ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80080ec:	4a29      	ldr	r2, [pc, #164]	; (8008194 <HAL_GPIO_Init+0x354>)
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80080f2:	4b28      	ldr	r3, [pc, #160]	; (8008194 <HAL_GPIO_Init+0x354>)
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	43db      	mvns	r3, r3
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	4013      	ands	r3, r2
 8008100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	4313      	orrs	r3, r2
 8008114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008116:	4a1f      	ldr	r2, [pc, #124]	; (8008194 <HAL_GPIO_Init+0x354>)
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800811c:	4b1d      	ldr	r3, [pc, #116]	; (8008194 <HAL_GPIO_Init+0x354>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	43db      	mvns	r3, r3
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	4013      	ands	r3, r2
 800812a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d003      	beq.n	8008140 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	4313      	orrs	r3, r2
 800813e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008140:	4a14      	ldr	r2, [pc, #80]	; (8008194 <HAL_GPIO_Init+0x354>)
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	3301      	adds	r3, #1
 800814a:	61fb      	str	r3, [r7, #28]
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	2b0f      	cmp	r3, #15
 8008150:	f67f ae86 	bls.w	8007e60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008154:	bf00      	nop
 8008156:	bf00      	nop
 8008158:	3724      	adds	r7, #36	; 0x24
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	40023800 	.word	0x40023800
 8008168:	40013800 	.word	0x40013800
 800816c:	40020000 	.word	0x40020000
 8008170:	40020400 	.word	0x40020400
 8008174:	40020800 	.word	0x40020800
 8008178:	40020c00 	.word	0x40020c00
 800817c:	40021000 	.word	0x40021000
 8008180:	40021400 	.word	0x40021400
 8008184:	40021800 	.word	0x40021800
 8008188:	40021c00 	.word	0x40021c00
 800818c:	40022000 	.word	0x40022000
 8008190:	40022400 	.word	0x40022400
 8008194:	40013c00 	.word	0x40013c00

08008198 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008198:	b480      	push	{r7}
 800819a:	b087      	sub	sp, #28
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80081a2:	2300      	movs	r3, #0
 80081a4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80081a6:	2300      	movs	r3, #0
 80081a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80081aa:	2300      	movs	r3, #0
 80081ac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80081ae:	2300      	movs	r3, #0
 80081b0:	617b      	str	r3, [r7, #20]
 80081b2:	e0d9      	b.n	8008368 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80081b4:	2201      	movs	r2, #1
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	fa02 f303 	lsl.w	r3, r2, r3
 80081bc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80081be:	683a      	ldr	r2, [r7, #0]
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	4013      	ands	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	f040 80c9 	bne.w	8008362 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80081d0:	4a6b      	ldr	r2, [pc, #428]	; (8008380 <HAL_GPIO_DeInit+0x1e8>)
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	089b      	lsrs	r3, r3, #2
 80081d6:	3302      	adds	r3, #2
 80081d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081dc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f003 0303 	and.w	r3, r3, #3
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	220f      	movs	r2, #15
 80081e8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	4013      	ands	r3, r2
 80081f0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a63      	ldr	r2, [pc, #396]	; (8008384 <HAL_GPIO_DeInit+0x1ec>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d037      	beq.n	800826a <HAL_GPIO_DeInit+0xd2>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a62      	ldr	r2, [pc, #392]	; (8008388 <HAL_GPIO_DeInit+0x1f0>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d031      	beq.n	8008266 <HAL_GPIO_DeInit+0xce>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a61      	ldr	r2, [pc, #388]	; (800838c <HAL_GPIO_DeInit+0x1f4>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d02b      	beq.n	8008262 <HAL_GPIO_DeInit+0xca>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a60      	ldr	r2, [pc, #384]	; (8008390 <HAL_GPIO_DeInit+0x1f8>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d025      	beq.n	800825e <HAL_GPIO_DeInit+0xc6>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a5f      	ldr	r2, [pc, #380]	; (8008394 <HAL_GPIO_DeInit+0x1fc>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d01f      	beq.n	800825a <HAL_GPIO_DeInit+0xc2>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a5e      	ldr	r2, [pc, #376]	; (8008398 <HAL_GPIO_DeInit+0x200>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d019      	beq.n	8008256 <HAL_GPIO_DeInit+0xbe>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a5d      	ldr	r2, [pc, #372]	; (800839c <HAL_GPIO_DeInit+0x204>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d013      	beq.n	8008252 <HAL_GPIO_DeInit+0xba>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a5c      	ldr	r2, [pc, #368]	; (80083a0 <HAL_GPIO_DeInit+0x208>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d00d      	beq.n	800824e <HAL_GPIO_DeInit+0xb6>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a5b      	ldr	r2, [pc, #364]	; (80083a4 <HAL_GPIO_DeInit+0x20c>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d007      	beq.n	800824a <HAL_GPIO_DeInit+0xb2>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a5a      	ldr	r2, [pc, #360]	; (80083a8 <HAL_GPIO_DeInit+0x210>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d101      	bne.n	8008246 <HAL_GPIO_DeInit+0xae>
 8008242:	2309      	movs	r3, #9
 8008244:	e012      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 8008246:	230a      	movs	r3, #10
 8008248:	e010      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 800824a:	2308      	movs	r3, #8
 800824c:	e00e      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 800824e:	2307      	movs	r3, #7
 8008250:	e00c      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 8008252:	2306      	movs	r3, #6
 8008254:	e00a      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 8008256:	2305      	movs	r3, #5
 8008258:	e008      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 800825a:	2304      	movs	r3, #4
 800825c:	e006      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 800825e:	2303      	movs	r3, #3
 8008260:	e004      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 8008262:	2302      	movs	r3, #2
 8008264:	e002      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 8008266:	2301      	movs	r3, #1
 8008268:	e000      	b.n	800826c <HAL_GPIO_DeInit+0xd4>
 800826a:	2300      	movs	r3, #0
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	f002 0203 	and.w	r2, r2, #3
 8008272:	0092      	lsls	r2, r2, #2
 8008274:	4093      	lsls	r3, r2
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	429a      	cmp	r2, r3
 800827a:	d132      	bne.n	80082e2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800827c:	4b4b      	ldr	r3, [pc, #300]	; (80083ac <HAL_GPIO_DeInit+0x214>)
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	43db      	mvns	r3, r3
 8008284:	4949      	ldr	r1, [pc, #292]	; (80083ac <HAL_GPIO_DeInit+0x214>)
 8008286:	4013      	ands	r3, r2
 8008288:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800828a:	4b48      	ldr	r3, [pc, #288]	; (80083ac <HAL_GPIO_DeInit+0x214>)
 800828c:	685a      	ldr	r2, [r3, #4]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	43db      	mvns	r3, r3
 8008292:	4946      	ldr	r1, [pc, #280]	; (80083ac <HAL_GPIO_DeInit+0x214>)
 8008294:	4013      	ands	r3, r2
 8008296:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008298:	4b44      	ldr	r3, [pc, #272]	; (80083ac <HAL_GPIO_DeInit+0x214>)
 800829a:	68da      	ldr	r2, [r3, #12]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	43db      	mvns	r3, r3
 80082a0:	4942      	ldr	r1, [pc, #264]	; (80083ac <HAL_GPIO_DeInit+0x214>)
 80082a2:	4013      	ands	r3, r2
 80082a4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80082a6:	4b41      	ldr	r3, [pc, #260]	; (80083ac <HAL_GPIO_DeInit+0x214>)
 80082a8:	689a      	ldr	r2, [r3, #8]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	43db      	mvns	r3, r3
 80082ae:	493f      	ldr	r1, [pc, #252]	; (80083ac <HAL_GPIO_DeInit+0x214>)
 80082b0:	4013      	ands	r3, r2
 80082b2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	f003 0303 	and.w	r3, r3, #3
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	220f      	movs	r2, #15
 80082be:	fa02 f303 	lsl.w	r3, r2, r3
 80082c2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80082c4:	4a2e      	ldr	r2, [pc, #184]	; (8008380 <HAL_GPIO_DeInit+0x1e8>)
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	089b      	lsrs	r3, r3, #2
 80082ca:	3302      	adds	r3, #2
 80082cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	43da      	mvns	r2, r3
 80082d4:	482a      	ldr	r0, [pc, #168]	; (8008380 <HAL_GPIO_DeInit+0x1e8>)
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	089b      	lsrs	r3, r3, #2
 80082da:	400a      	ands	r2, r1
 80082dc:	3302      	adds	r3, #2
 80082de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	2103      	movs	r1, #3
 80082ec:	fa01 f303 	lsl.w	r3, r1, r3
 80082f0:	43db      	mvns	r3, r3
 80082f2:	401a      	ands	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	08da      	lsrs	r2, r3, #3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	3208      	adds	r2, #8
 8008300:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	f003 0307 	and.w	r3, r3, #7
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	220f      	movs	r2, #15
 800830e:	fa02 f303 	lsl.w	r3, r2, r3
 8008312:	43db      	mvns	r3, r3
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	08d2      	lsrs	r2, r2, #3
 8008318:	4019      	ands	r1, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	3208      	adds	r2, #8
 800831e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68da      	ldr	r2, [r3, #12]
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	2103      	movs	r1, #3
 800832c:	fa01 f303 	lsl.w	r3, r1, r3
 8008330:	43db      	mvns	r3, r3
 8008332:	401a      	ands	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	2101      	movs	r1, #1
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	fa01 f303 	lsl.w	r3, r1, r3
 8008344:	43db      	mvns	r3, r3
 8008346:	401a      	ands	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689a      	ldr	r2, [r3, #8]
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	2103      	movs	r1, #3
 8008356:	fa01 f303 	lsl.w	r3, r1, r3
 800835a:	43db      	mvns	r3, r3
 800835c:	401a      	ands	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	3301      	adds	r3, #1
 8008366:	617b      	str	r3, [r7, #20]
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	2b0f      	cmp	r3, #15
 800836c:	f67f af22 	bls.w	80081b4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008370:	bf00      	nop
 8008372:	bf00      	nop
 8008374:	371c      	adds	r7, #28
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	40013800 	.word	0x40013800
 8008384:	40020000 	.word	0x40020000
 8008388:	40020400 	.word	0x40020400
 800838c:	40020800 	.word	0x40020800
 8008390:	40020c00 	.word	0x40020c00
 8008394:	40021000 	.word	0x40021000
 8008398:	40021400 	.word	0x40021400
 800839c:	40021800 	.word	0x40021800
 80083a0:	40021c00 	.word	0x40021c00
 80083a4:	40022000 	.word	0x40022000
 80083a8:	40022400 	.word	0x40022400
 80083ac:	40013c00 	.word	0x40013c00

080083b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	691a      	ldr	r2, [r3, #16]
 80083c0:	887b      	ldrh	r3, [r7, #2]
 80083c2:	4013      	ands	r3, r2
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d002      	beq.n	80083ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80083c8:	2301      	movs	r3, #1
 80083ca:	73fb      	strb	r3, [r7, #15]
 80083cc:	e001      	b.n	80083d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80083ce:	2300      	movs	r3, #0
 80083d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	460b      	mov	r3, r1
 80083ea:	807b      	strh	r3, [r7, #2]
 80083ec:	4613      	mov	r3, r2
 80083ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80083f0:	787b      	ldrb	r3, [r7, #1]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80083f6:	887a      	ldrh	r2, [r7, #2]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80083fc:	e003      	b.n	8008406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80083fe:	887b      	ldrh	r3, [r7, #2]
 8008400:	041a      	lsls	r2, r3, #16
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	619a      	str	r2, [r3, #24]
}
 8008406:	bf00      	nop
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008412:	b480      	push	{r7}
 8008414:	b085      	sub	sp, #20
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	460b      	mov	r3, r1
 800841c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008424:	887a      	ldrh	r2, [r7, #2]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	4013      	ands	r3, r2
 800842a:	041a      	lsls	r2, r3, #16
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	43d9      	mvns	r1, r3
 8008430:	887b      	ldrh	r3, [r7, #2]
 8008432:	400b      	ands	r3, r1
 8008434:	431a      	orrs	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	619a      	str	r2, [r3, #24]
}
 800843a:	bf00      	nop
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
	...

08008448 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	4603      	mov	r3, r0
 8008450:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008452:	4b08      	ldr	r3, [pc, #32]	; (8008474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008454:	695a      	ldr	r2, [r3, #20]
 8008456:	88fb      	ldrh	r3, [r7, #6]
 8008458:	4013      	ands	r3, r2
 800845a:	2b00      	cmp	r3, #0
 800845c:	d006      	beq.n	800846c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800845e:	4a05      	ldr	r2, [pc, #20]	; (8008474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008460:	88fb      	ldrh	r3, [r7, #6]
 8008462:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008464:	88fb      	ldrh	r3, [r7, #6]
 8008466:	4618      	mov	r0, r3
 8008468:	f000 f806 	bl	8008478 <HAL_GPIO_EXTI_Callback>
  }
}
 800846c:	bf00      	nop
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	40013c00 	.word	0x40013c00

08008478 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
	...

08008490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e07f      	b.n	80085a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d106      	bne.n	80084bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f8a9 	bl	800860e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2224      	movs	r2, #36	; 0x24
 80084c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f022 0201 	bic.w	r2, r2, #1
 80084d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685a      	ldr	r2, [r3, #4]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80084e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689a      	ldr	r2, [r3, #8]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d107      	bne.n	800850a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	689a      	ldr	r2, [r3, #8]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008506:	609a      	str	r2, [r3, #8]
 8008508:	e006      	b.n	8008518 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	689a      	ldr	r2, [r3, #8]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008516:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	2b02      	cmp	r3, #2
 800851e:	d104      	bne.n	800852a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008528:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	6859      	ldr	r1, [r3, #4]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	4b1d      	ldr	r3, [pc, #116]	; (80085ac <HAL_I2C_Init+0x11c>)
 8008536:	430b      	orrs	r3, r1
 8008538:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68da      	ldr	r2, [r3, #12]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008548:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	691a      	ldr	r2, [r3, #16]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	430a      	orrs	r2, r1
 8008562:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	69d9      	ldr	r1, [r3, #28]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a1a      	ldr	r2, [r3, #32]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	430a      	orrs	r2, r1
 8008572:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f042 0201 	orr.w	r2, r2, #1
 8008582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2220      	movs	r2, #32
 800858e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	02008000 	.word	0x02008000

080085b0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e021      	b.n	8008606 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2224      	movs	r2, #36	; 0x24
 80085c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f022 0201 	bic.w	r2, r2, #1
 80085d8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f821 	bl	8008622 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800860e:	b480      	push	{r7}
 8008610:	b083      	sub	sp, #12
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800862a:	bf00      	nop
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
	...

08008638 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b088      	sub	sp, #32
 800863c:	af02      	add	r7, sp, #8
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	4608      	mov	r0, r1
 8008642:	4611      	mov	r1, r2
 8008644:	461a      	mov	r2, r3
 8008646:	4603      	mov	r3, r0
 8008648:	817b      	strh	r3, [r7, #10]
 800864a:	460b      	mov	r3, r1
 800864c:	813b      	strh	r3, [r7, #8]
 800864e:	4613      	mov	r3, r2
 8008650:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b20      	cmp	r3, #32
 800865c:	f040 80f9 	bne.w	8008852 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008660:	6a3b      	ldr	r3, [r7, #32]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d002      	beq.n	800866c <HAL_I2C_Mem_Write+0x34>
 8008666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008668:	2b00      	cmp	r3, #0
 800866a:	d105      	bne.n	8008678 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008672:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e0ed      	b.n	8008854 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800867e:	2b01      	cmp	r3, #1
 8008680:	d101      	bne.n	8008686 <HAL_I2C_Mem_Write+0x4e>
 8008682:	2302      	movs	r3, #2
 8008684:	e0e6      	b.n	8008854 <HAL_I2C_Mem_Write+0x21c>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800868e:	f7fe fadb 	bl	8006c48 <HAL_GetTick>
 8008692:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	2319      	movs	r3, #25
 800869a:	2201      	movs	r2, #1
 800869c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 fad1 	bl	8008c48 <I2C_WaitOnFlagUntilTimeout>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e0d1      	b.n	8008854 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2221      	movs	r2, #33	; 0x21
 80086b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2240      	movs	r2, #64	; 0x40
 80086bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6a3a      	ldr	r2, [r7, #32]
 80086ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80086d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80086d8:	88f8      	ldrh	r0, [r7, #6]
 80086da:	893a      	ldrh	r2, [r7, #8]
 80086dc:	8979      	ldrh	r1, [r7, #10]
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	9301      	str	r3, [sp, #4]
 80086e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	4603      	mov	r3, r0
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f000 f9e1 	bl	8008ab0 <I2C_RequestMemoryWrite>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d005      	beq.n	8008700 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e0a9      	b.n	8008854 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008704:	b29b      	uxth	r3, r3
 8008706:	2bff      	cmp	r3, #255	; 0xff
 8008708:	d90e      	bls.n	8008728 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	22ff      	movs	r2, #255	; 0xff
 800870e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008714:	b2da      	uxtb	r2, r3
 8008716:	8979      	ldrh	r1, [r7, #10]
 8008718:	2300      	movs	r3, #0
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f000 fc2d 	bl	8008f80 <I2C_TransferConfig>
 8008726:	e00f      	b.n	8008748 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800872c:	b29a      	uxth	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008736:	b2da      	uxtb	r2, r3
 8008738:	8979      	ldrh	r1, [r7, #10]
 800873a:	2300      	movs	r3, #0
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f000 fc1c 	bl	8008f80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 fabb 	bl	8008cc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d001      	beq.n	800875c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e07b      	b.n	8008854 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008760:	781a      	ldrb	r2, [r3, #0]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008776:	b29b      	uxth	r3, r3
 8008778:	3b01      	subs	r3, #1
 800877a:	b29a      	uxth	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008784:	3b01      	subs	r3, #1
 8008786:	b29a      	uxth	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008790:	b29b      	uxth	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d034      	beq.n	8008800 <HAL_I2C_Mem_Write+0x1c8>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800879a:	2b00      	cmp	r3, #0
 800879c:	d130      	bne.n	8008800 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	9300      	str	r3, [sp, #0]
 80087a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a4:	2200      	movs	r2, #0
 80087a6:	2180      	movs	r1, #128	; 0x80
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f000 fa4d 	bl	8008c48 <I2C_WaitOnFlagUntilTimeout>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e04d      	b.n	8008854 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087bc:	b29b      	uxth	r3, r3
 80087be:	2bff      	cmp	r3, #255	; 0xff
 80087c0:	d90e      	bls.n	80087e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	22ff      	movs	r2, #255	; 0xff
 80087c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	8979      	ldrh	r1, [r7, #10]
 80087d0:	2300      	movs	r3, #0
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f000 fbd1 	bl	8008f80 <I2C_TransferConfig>
 80087de:	e00f      	b.n	8008800 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087ee:	b2da      	uxtb	r2, r3
 80087f0:	8979      	ldrh	r1, [r7, #10]
 80087f2:	2300      	movs	r3, #0
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f000 fbc0 	bl	8008f80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008804:	b29b      	uxth	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d19e      	bne.n	8008748 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f000 fa9a 	bl	8008d48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e01a      	b.n	8008854 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2220      	movs	r2, #32
 8008824:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	6859      	ldr	r1, [r3, #4]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	4b0a      	ldr	r3, [pc, #40]	; (800885c <HAL_I2C_Mem_Write+0x224>)
 8008832:	400b      	ands	r3, r1
 8008834:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2220      	movs	r2, #32
 800883a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	e000      	b.n	8008854 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008852:	2302      	movs	r3, #2
  }
}
 8008854:	4618      	mov	r0, r3
 8008856:	3718      	adds	r7, #24
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	fe00e800 	.word	0xfe00e800

08008860 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b088      	sub	sp, #32
 8008864:	af02      	add	r7, sp, #8
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	4608      	mov	r0, r1
 800886a:	4611      	mov	r1, r2
 800886c:	461a      	mov	r2, r3
 800886e:	4603      	mov	r3, r0
 8008870:	817b      	strh	r3, [r7, #10]
 8008872:	460b      	mov	r3, r1
 8008874:	813b      	strh	r3, [r7, #8]
 8008876:	4613      	mov	r3, r2
 8008878:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b20      	cmp	r3, #32
 8008884:	f040 80fd 	bne.w	8008a82 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d002      	beq.n	8008894 <HAL_I2C_Mem_Read+0x34>
 800888e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008890:	2b00      	cmp	r3, #0
 8008892:	d105      	bne.n	80088a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800889a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e0f1      	b.n	8008a84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d101      	bne.n	80088ae <HAL_I2C_Mem_Read+0x4e>
 80088aa:	2302      	movs	r3, #2
 80088ac:	e0ea      	b.n	8008a84 <HAL_I2C_Mem_Read+0x224>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80088b6:	f7fe f9c7 	bl	8006c48 <HAL_GetTick>
 80088ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	2319      	movs	r3, #25
 80088c2:	2201      	movs	r2, #1
 80088c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 f9bd 	bl	8008c48 <I2C_WaitOnFlagUntilTimeout>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d001      	beq.n	80088d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e0d5      	b.n	8008a84 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2222      	movs	r2, #34	; 0x22
 80088dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2240      	movs	r2, #64	; 0x40
 80088e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6a3a      	ldr	r2, [r7, #32]
 80088f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80088f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008900:	88f8      	ldrh	r0, [r7, #6]
 8008902:	893a      	ldrh	r2, [r7, #8]
 8008904:	8979      	ldrh	r1, [r7, #10]
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	9301      	str	r3, [sp, #4]
 800890a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	4603      	mov	r3, r0
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 f921 	bl	8008b58 <I2C_RequestMemoryRead>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d005      	beq.n	8008928 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e0ad      	b.n	8008a84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800892c:	b29b      	uxth	r3, r3
 800892e:	2bff      	cmp	r3, #255	; 0xff
 8008930:	d90e      	bls.n	8008950 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	22ff      	movs	r2, #255	; 0xff
 8008936:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800893c:	b2da      	uxtb	r2, r3
 800893e:	8979      	ldrh	r1, [r7, #10]
 8008940:	4b52      	ldr	r3, [pc, #328]	; (8008a8c <HAL_I2C_Mem_Read+0x22c>)
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f000 fb19 	bl	8008f80 <I2C_TransferConfig>
 800894e:	e00f      	b.n	8008970 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008954:	b29a      	uxth	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800895e:	b2da      	uxtb	r2, r3
 8008960:	8979      	ldrh	r1, [r7, #10]
 8008962:	4b4a      	ldr	r3, [pc, #296]	; (8008a8c <HAL_I2C_Mem_Read+0x22c>)
 8008964:	9300      	str	r3, [sp, #0]
 8008966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f000 fb08 	bl	8008f80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008976:	2200      	movs	r2, #0
 8008978:	2104      	movs	r1, #4
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f000 f964 	bl	8008c48 <I2C_WaitOnFlagUntilTimeout>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e07c      	b.n	8008a84 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	b2d2      	uxtb	r2, r2
 8008996:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089a6:	3b01      	subs	r3, #1
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	3b01      	subs	r3, #1
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d034      	beq.n	8008a30 <HAL_I2C_Mem_Read+0x1d0>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d130      	bne.n	8008a30 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d4:	2200      	movs	r2, #0
 80089d6:	2180      	movs	r1, #128	; 0x80
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f000 f935 	bl	8008c48 <I2C_WaitOnFlagUntilTimeout>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d001      	beq.n	80089e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e04d      	b.n	8008a84 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	2bff      	cmp	r3, #255	; 0xff
 80089f0:	d90e      	bls.n	8008a10 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	22ff      	movs	r2, #255	; 0xff
 80089f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	8979      	ldrh	r1, [r7, #10]
 8008a00:	2300      	movs	r3, #0
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 fab9 	bl	8008f80 <I2C_TransferConfig>
 8008a0e:	e00f      	b.n	8008a30 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	8979      	ldrh	r1, [r7, #10]
 8008a22:	2300      	movs	r3, #0
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f000 faa8 	bl	8008f80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d19a      	bne.n	8008970 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a3a:	697a      	ldr	r2, [r7, #20]
 8008a3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f000 f982 	bl	8008d48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e01a      	b.n	8008a84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2220      	movs	r2, #32
 8008a54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6859      	ldr	r1, [r3, #4]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	4b0b      	ldr	r3, [pc, #44]	; (8008a90 <HAL_I2C_Mem_Read+0x230>)
 8008a62:	400b      	ands	r3, r1
 8008a64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2220      	movs	r2, #32
 8008a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	e000      	b.n	8008a84 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008a82:	2302      	movs	r3, #2
  }
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	80002400 	.word	0x80002400
 8008a90:	fe00e800 	.word	0xfe00e800

08008a94 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008aa2:	b2db      	uxtb	r3, r3
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af02      	add	r7, sp, #8
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	4608      	mov	r0, r1
 8008aba:	4611      	mov	r1, r2
 8008abc:	461a      	mov	r2, r3
 8008abe:	4603      	mov	r3, r0
 8008ac0:	817b      	strh	r3, [r7, #10]
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	813b      	strh	r3, [r7, #8]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008aca:	88fb      	ldrh	r3, [r7, #6]
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	8979      	ldrh	r1, [r7, #10]
 8008ad0:	4b20      	ldr	r3, [pc, #128]	; (8008b54 <I2C_RequestMemoryWrite+0xa4>)
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 fa51 	bl	8008f80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ade:	69fa      	ldr	r2, [r7, #28]
 8008ae0:	69b9      	ldr	r1, [r7, #24]
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f000 f8f0 	bl	8008cc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d001      	beq.n	8008af2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e02c      	b.n	8008b4c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008af2:	88fb      	ldrh	r3, [r7, #6]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d105      	bne.n	8008b04 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008af8:	893b      	ldrh	r3, [r7, #8]
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	629a      	str	r2, [r3, #40]	; 0x28
 8008b02:	e015      	b.n	8008b30 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008b04:	893b      	ldrh	r3, [r7, #8]
 8008b06:	0a1b      	lsrs	r3, r3, #8
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	b2da      	uxtb	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b12:	69fa      	ldr	r2, [r7, #28]
 8008b14:	69b9      	ldr	r1, [r7, #24]
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f000 f8d6 	bl	8008cc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e012      	b.n	8008b4c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b26:	893b      	ldrh	r3, [r7, #8]
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	2200      	movs	r2, #0
 8008b38:	2180      	movs	r1, #128	; 0x80
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f000 f884 	bl	8008c48 <I2C_WaitOnFlagUntilTimeout>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e000      	b.n	8008b4c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	80002000 	.word	0x80002000

08008b58 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b086      	sub	sp, #24
 8008b5c:	af02      	add	r7, sp, #8
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	4608      	mov	r0, r1
 8008b62:	4611      	mov	r1, r2
 8008b64:	461a      	mov	r2, r3
 8008b66:	4603      	mov	r3, r0
 8008b68:	817b      	strh	r3, [r7, #10]
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	813b      	strh	r3, [r7, #8]
 8008b6e:	4613      	mov	r3, r2
 8008b70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008b72:	88fb      	ldrh	r3, [r7, #6]
 8008b74:	b2da      	uxtb	r2, r3
 8008b76:	8979      	ldrh	r1, [r7, #10]
 8008b78:	4b20      	ldr	r3, [pc, #128]	; (8008bfc <I2C_RequestMemoryRead+0xa4>)
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 f9fe 	bl	8008f80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b84:	69fa      	ldr	r2, [r7, #28]
 8008b86:	69b9      	ldr	r1, [r7, #24]
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f000 f89d 	bl	8008cc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e02c      	b.n	8008bf2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b98:	88fb      	ldrh	r3, [r7, #6]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d105      	bne.n	8008baa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b9e:	893b      	ldrh	r3, [r7, #8]
 8008ba0:	b2da      	uxtb	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	629a      	str	r2, [r3, #40]	; 0x28
 8008ba8:	e015      	b.n	8008bd6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008baa:	893b      	ldrh	r3, [r7, #8]
 8008bac:	0a1b      	lsrs	r3, r3, #8
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bb8:	69fa      	ldr	r2, [r7, #28]
 8008bba:	69b9      	ldr	r1, [r7, #24]
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f000 f883 	bl	8008cc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e012      	b.n	8008bf2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008bcc:	893b      	ldrh	r3, [r7, #8]
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	9300      	str	r3, [sp, #0]
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	2140      	movs	r1, #64	; 0x40
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 f831 	bl	8008c48 <I2C_WaitOnFlagUntilTimeout>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e000      	b.n	8008bf2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	80002000 	.word	0x80002000

08008c00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	699b      	ldr	r3, [r3, #24]
 8008c0e:	f003 0302 	and.w	r3, r3, #2
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d103      	bne.n	8008c1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	f003 0301 	and.w	r3, r3, #1
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d007      	beq.n	8008c3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	699a      	ldr	r2, [r3, #24]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f042 0201 	orr.w	r2, r2, #1
 8008c3a:	619a      	str	r2, [r3, #24]
  }
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	603b      	str	r3, [r7, #0]
 8008c54:	4613      	mov	r3, r2
 8008c56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c58:	e022      	b.n	8008ca0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c60:	d01e      	beq.n	8008ca0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c62:	f7fd fff1 	bl	8006c48 <HAL_GetTick>
 8008c66:	4602      	mov	r2, r0
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d302      	bcc.n	8008c78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d113      	bne.n	8008ca0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c7c:	f043 0220 	orr.w	r2, r3, #32
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2220      	movs	r2, #32
 8008c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e00f      	b.n	8008cc0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	699a      	ldr	r2, [r3, #24]
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	4013      	ands	r3, r2
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	bf0c      	ite	eq
 8008cb0:	2301      	moveq	r3, #1
 8008cb2:	2300      	movne	r3, #0
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	79fb      	ldrb	r3, [r7, #7]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d0cd      	beq.n	8008c5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008cd4:	e02c      	b.n	8008d30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	68b9      	ldr	r1, [r7, #8]
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 f870 	bl	8008dc0 <I2C_IsErrorOccurred>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e02a      	b.n	8008d40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf0:	d01e      	beq.n	8008d30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cf2:	f7fd ffa9 	bl	8006c48 <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d302      	bcc.n	8008d08 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d113      	bne.n	8008d30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d0c:	f043 0220 	orr.w	r2, r3, #32
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2220      	movs	r2, #32
 8008d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e007      	b.n	8008d40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d1cb      	bne.n	8008cd6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d54:	e028      	b.n	8008da8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	68b9      	ldr	r1, [r7, #8]
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f000 f830 	bl	8008dc0 <I2C_IsErrorOccurred>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e026      	b.n	8008db8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d6a:	f7fd ff6d 	bl	8006c48 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d302      	bcc.n	8008d80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d113      	bne.n	8008da8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d84:	f043 0220 	orr.w	r2, r3, #32
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e007      	b.n	8008db8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	f003 0320 	and.w	r3, r3, #32
 8008db2:	2b20      	cmp	r3, #32
 8008db4:	d1cf      	bne.n	8008d56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b08a      	sub	sp, #40	; 0x28
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	f003 0310 	and.w	r3, r3, #16
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d068      	beq.n	8008ebe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2210      	movs	r2, #16
 8008df2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008df4:	e049      	b.n	8008e8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfc:	d045      	beq.n	8008e8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008dfe:	f7fd ff23 	bl	8006c48 <HAL_GetTick>
 8008e02:	4602      	mov	r2, r0
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d302      	bcc.n	8008e14 <I2C_IsErrorOccurred+0x54>
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d13a      	bne.n	8008e8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	699b      	ldr	r3, [r3, #24]
 8008e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e36:	d121      	bne.n	8008e7c <I2C_IsErrorOccurred+0xbc>
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e3e:	d01d      	beq.n	8008e7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008e40:	7cfb      	ldrb	r3, [r7, #19]
 8008e42:	2b20      	cmp	r3, #32
 8008e44:	d01a      	beq.n	8008e7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008e56:	f7fd fef7 	bl	8006c48 <HAL_GetTick>
 8008e5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e5c:	e00e      	b.n	8008e7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008e5e:	f7fd fef3 	bl	8006c48 <HAL_GetTick>
 8008e62:	4602      	mov	r2, r0
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	2b19      	cmp	r3, #25
 8008e6a:	d907      	bls.n	8008e7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8008e6c:	6a3b      	ldr	r3, [r7, #32]
 8008e6e:	f043 0320 	orr.w	r3, r3, #32
 8008e72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008e7a:	e006      	b.n	8008e8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	f003 0320 	and.w	r3, r3, #32
 8008e86:	2b20      	cmp	r3, #32
 8008e88:	d1e9      	bne.n	8008e5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	f003 0320 	and.w	r3, r3, #32
 8008e94:	2b20      	cmp	r3, #32
 8008e96:	d003      	beq.n	8008ea0 <I2C_IsErrorOccurred+0xe0>
 8008e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d0aa      	beq.n	8008df6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d103      	bne.n	8008eb0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2220      	movs	r2, #32
 8008eae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	f043 0304 	orr.w	r3, r3, #4
 8008eb6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00b      	beq.n	8008ee8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	f043 0301 	orr.w	r3, r3, #1
 8008ed6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ee0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00b      	beq.n	8008f0a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	f043 0308 	orr.w	r3, r3, #8
 8008ef8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00b      	beq.n	8008f2c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	f043 0302 	orr.w	r3, r3, #2
 8008f1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d01c      	beq.n	8008f6e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f7ff fe63 	bl	8008c00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6859      	ldr	r1, [r3, #4]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	4b0d      	ldr	r3, [pc, #52]	; (8008f7c <I2C_IsErrorOccurred+0x1bc>)
 8008f46:	400b      	ands	r3, r1
 8008f48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f4e:	6a3b      	ldr	r3, [r7, #32]
 8008f50:	431a      	orrs	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3728      	adds	r7, #40	; 0x28
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	fe00e800 	.word	0xfe00e800

08008f80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b087      	sub	sp, #28
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	607b      	str	r3, [r7, #4]
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	817b      	strh	r3, [r7, #10]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f92:	897b      	ldrh	r3, [r7, #10]
 8008f94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008f98:	7a7b      	ldrb	r3, [r7, #9]
 8008f9a:	041b      	lsls	r3, r3, #16
 8008f9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008fa0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008fa6:	6a3b      	ldr	r3, [r7, #32]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	685a      	ldr	r2, [r3, #4]
 8008fb6:	6a3b      	ldr	r3, [r7, #32]
 8008fb8:	0d5b      	lsrs	r3, r3, #21
 8008fba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008fbe:	4b08      	ldr	r3, [pc, #32]	; (8008fe0 <I2C_TransferConfig+0x60>)
 8008fc0:	430b      	orrs	r3, r1
 8008fc2:	43db      	mvns	r3, r3
 8008fc4:	ea02 0103 	and.w	r1, r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	430a      	orrs	r2, r1
 8008fd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008fd2:	bf00      	nop
 8008fd4:	371c      	adds	r7, #28
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	03ff63ff 	.word	0x03ff63ff

08008fe4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d101      	bne.n	8008ff6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e0bf      	b.n	8009176 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d106      	bne.n	8009010 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f8ba 	bl	8009184 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2202      	movs	r2, #2
 8009014:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	699a      	ldr	r2, [r3, #24]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009026:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6999      	ldr	r1, [r3, #24]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685a      	ldr	r2, [r3, #4]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800903c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	430a      	orrs	r2, r1
 800904a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6899      	ldr	r1, [r3, #8]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	4b4a      	ldr	r3, [pc, #296]	; (8009180 <HAL_LTDC_Init+0x19c>)
 8009058:	400b      	ands	r3, r1
 800905a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	695b      	ldr	r3, [r3, #20]
 8009060:	041b      	lsls	r3, r3, #16
 8009062:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6899      	ldr	r1, [r3, #8]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	699a      	ldr	r2, [r3, #24]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	431a      	orrs	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68d9      	ldr	r1, [r3, #12]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	4b3e      	ldr	r3, [pc, #248]	; (8009180 <HAL_LTDC_Init+0x19c>)
 8009086:	400b      	ands	r3, r1
 8009088:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	69db      	ldr	r3, [r3, #28]
 800908e:	041b      	lsls	r3, r3, #16
 8009090:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68d9      	ldr	r1, [r3, #12]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6a1a      	ldr	r2, [r3, #32]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	431a      	orrs	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	430a      	orrs	r2, r1
 80090a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6919      	ldr	r1, [r3, #16]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	4b33      	ldr	r3, [pc, #204]	; (8009180 <HAL_LTDC_Init+0x19c>)
 80090b4:	400b      	ands	r3, r1
 80090b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090bc:	041b      	lsls	r3, r3, #16
 80090be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6919      	ldr	r1, [r3, #16]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	431a      	orrs	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	430a      	orrs	r2, r1
 80090d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	6959      	ldr	r1, [r3, #20]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	4b27      	ldr	r3, [pc, #156]	; (8009180 <HAL_LTDC_Init+0x19c>)
 80090e2:	400b      	ands	r3, r1
 80090e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ea:	041b      	lsls	r3, r3, #16
 80090ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	6959      	ldr	r1, [r3, #20]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	431a      	orrs	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	430a      	orrs	r2, r1
 8009102:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800910a:	021b      	lsls	r3, r3, #8
 800910c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009114:	041b      	lsls	r3, r3, #16
 8009116:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009126:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800912e:	68ba      	ldr	r2, [r7, #8]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4313      	orrs	r3, r2
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800913a:	431a      	orrs	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	430a      	orrs	r2, r1
 8009142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f042 0206 	orr.w	r2, r2, #6
 8009152:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	699a      	ldr	r2, [r3, #24]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f042 0201 	orr.w	r2, r2, #1
 8009162:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	f000f800 	.word	0xf000f800

08009184 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009198:	b5b0      	push	{r4, r5, r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d101      	bne.n	80091b2 <HAL_LTDC_ConfigLayer+0x1a>
 80091ae:	2302      	movs	r3, #2
 80091b0:	e02c      	b.n	800920c <HAL_LTDC_ConfigLayer+0x74>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2202      	movs	r2, #2
 80091be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2134      	movs	r1, #52	; 0x34
 80091c8:	fb01 f303 	mul.w	r3, r1, r3
 80091cc:	4413      	add	r3, r2
 80091ce:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	4614      	mov	r4, r2
 80091d6:	461d      	mov	r5, r3
 80091d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091e4:	682b      	ldr	r3, [r5, #0]
 80091e6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	68b9      	ldr	r1, [r7, #8]
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f000 f81f 	bl	8009230 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2201      	movs	r2, #1
 80091f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bdb0      	pop	{r4, r5, r7, pc}

08009214 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009222:	b2db      	uxtb	r3, r3
}
 8009224:	4618      	mov	r0, r3
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009230:	b480      	push	{r7}
 8009232:	b089      	sub	sp, #36	; 0x24
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	0c1b      	lsrs	r3, r3, #16
 8009248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800924c:	4413      	add	r3, r2
 800924e:	041b      	lsls	r3, r3, #16
 8009250:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	01db      	lsls	r3, r3, #7
 800925c:	4413      	add	r3, r2
 800925e:	3384      	adds	r3, #132	; 0x84
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	6812      	ldr	r2, [r2, #0]
 8009266:	4611      	mov	r1, r2
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	01d2      	lsls	r2, r2, #7
 800926c:	440a      	add	r2, r1
 800926e:	3284      	adds	r2, #132	; 0x84
 8009270:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009274:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	0c1b      	lsrs	r3, r3, #16
 8009282:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009286:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009288:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4619      	mov	r1, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	01db      	lsls	r3, r3, #7
 8009294:	440b      	add	r3, r1
 8009296:	3384      	adds	r3, #132	; 0x84
 8009298:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800929e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	68da      	ldr	r2, [r3, #12]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092ae:	4413      	add	r3, r2
 80092b0:	041b      	lsls	r3, r3, #16
 80092b2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	461a      	mov	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	01db      	lsls	r3, r3, #7
 80092be:	4413      	add	r3, r2
 80092c0:	3384      	adds	r3, #132	; 0x84
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	6812      	ldr	r2, [r2, #0]
 80092c8:	4611      	mov	r1, r2
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	01d2      	lsls	r2, r2, #7
 80092ce:	440a      	add	r2, r1
 80092d0:	3284      	adds	r2, #132	; 0x84
 80092d2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80092d6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	689a      	ldr	r2, [r3, #8]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092e6:	4413      	add	r3, r2
 80092e8:	1c5a      	adds	r2, r3, #1
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4619      	mov	r1, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	01db      	lsls	r3, r3, #7
 80092f4:	440b      	add	r3, r1
 80092f6:	3384      	adds	r3, #132	; 0x84
 80092f8:	4619      	mov	r1, r3
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	461a      	mov	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	01db      	lsls	r3, r3, #7
 800930a:	4413      	add	r3, r2
 800930c:	3384      	adds	r3, #132	; 0x84
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	6812      	ldr	r2, [r2, #0]
 8009314:	4611      	mov	r1, r2
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	01d2      	lsls	r2, r2, #7
 800931a:	440a      	add	r2, r1
 800931c:	3284      	adds	r2, #132	; 0x84
 800931e:	f023 0307 	bic.w	r3, r3, #7
 8009322:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	461a      	mov	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	01db      	lsls	r3, r3, #7
 800932e:	4413      	add	r3, r2
 8009330:	3384      	adds	r3, #132	; 0x84
 8009332:	461a      	mov	r2, r3
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009340:	021b      	lsls	r3, r3, #8
 8009342:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800934a:	041b      	lsls	r3, r3, #16
 800934c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	061b      	lsls	r3, r3, #24
 8009354:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	461a      	mov	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	01db      	lsls	r3, r3, #7
 8009360:	4413      	add	r3, r2
 8009362:	3384      	adds	r3, #132	; 0x84
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	461a      	mov	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	01db      	lsls	r3, r3, #7
 8009370:	4413      	add	r3, r2
 8009372:	3384      	adds	r3, #132	; 0x84
 8009374:	461a      	mov	r2, r3
 8009376:	2300      	movs	r3, #0
 8009378:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009380:	461a      	mov	r2, r3
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	431a      	orrs	r2, r3
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	431a      	orrs	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4619      	mov	r1, r3
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	01db      	lsls	r3, r3, #7
 8009394:	440b      	add	r3, r1
 8009396:	3384      	adds	r3, #132	; 0x84
 8009398:	4619      	mov	r1, r3
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	4313      	orrs	r3, r2
 800939e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	461a      	mov	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	01db      	lsls	r3, r3, #7
 80093aa:	4413      	add	r3, r2
 80093ac:	3384      	adds	r3, #132	; 0x84
 80093ae:	695b      	ldr	r3, [r3, #20]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	6812      	ldr	r2, [r2, #0]
 80093b4:	4611      	mov	r1, r2
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	01d2      	lsls	r2, r2, #7
 80093ba:	440a      	add	r2, r1
 80093bc:	3284      	adds	r2, #132	; 0x84
 80093be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80093c2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	461a      	mov	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	01db      	lsls	r3, r3, #7
 80093ce:	4413      	add	r3, r2
 80093d0:	3384      	adds	r3, #132	; 0x84
 80093d2:	461a      	mov	r2, r3
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	461a      	mov	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	01db      	lsls	r3, r3, #7
 80093e4:	4413      	add	r3, r2
 80093e6:	3384      	adds	r3, #132	; 0x84
 80093e8:	69da      	ldr	r2, [r3, #28]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4619      	mov	r1, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	01db      	lsls	r3, r3, #7
 80093f4:	440b      	add	r3, r1
 80093f6:	3384      	adds	r3, #132	; 0x84
 80093f8:	4619      	mov	r1, r3
 80093fa:	4b58      	ldr	r3, [pc, #352]	; (800955c <LTDC_SetConfig+0x32c>)
 80093fc:	4013      	ands	r3, r2
 80093fe:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	69da      	ldr	r2, [r3, #28]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	6a1b      	ldr	r3, [r3, #32]
 8009408:	68f9      	ldr	r1, [r7, #12]
 800940a:	6809      	ldr	r1, [r1, #0]
 800940c:	4608      	mov	r0, r1
 800940e:	6879      	ldr	r1, [r7, #4]
 8009410:	01c9      	lsls	r1, r1, #7
 8009412:	4401      	add	r1, r0
 8009414:	3184      	adds	r1, #132	; 0x84
 8009416:	4313      	orrs	r3, r2
 8009418:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	461a      	mov	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	01db      	lsls	r3, r3, #7
 8009424:	4413      	add	r3, r2
 8009426:	3384      	adds	r3, #132	; 0x84
 8009428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	461a      	mov	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	01db      	lsls	r3, r3, #7
 8009434:	4413      	add	r3, r2
 8009436:	3384      	adds	r3, #132	; 0x84
 8009438:	461a      	mov	r2, r3
 800943a:	2300      	movs	r3, #0
 800943c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	461a      	mov	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	01db      	lsls	r3, r3, #7
 8009448:	4413      	add	r3, r2
 800944a:	3384      	adds	r3, #132	; 0x84
 800944c:	461a      	mov	r2, r3
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009452:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d102      	bne.n	8009462 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800945c:	2304      	movs	r3, #4
 800945e:	61fb      	str	r3, [r7, #28]
 8009460:	e01b      	b.n	800949a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d102      	bne.n	8009470 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800946a:	2303      	movs	r3, #3
 800946c:	61fb      	str	r3, [r7, #28]
 800946e:	e014      	b.n	800949a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	2b04      	cmp	r3, #4
 8009476:	d00b      	beq.n	8009490 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800947c:	2b02      	cmp	r3, #2
 800947e:	d007      	beq.n	8009490 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009484:	2b03      	cmp	r3, #3
 8009486:	d003      	beq.n	8009490 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800948c:	2b07      	cmp	r3, #7
 800948e:	d102      	bne.n	8009496 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8009490:	2302      	movs	r3, #2
 8009492:	61fb      	str	r3, [r7, #28]
 8009494:	e001      	b.n	800949a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8009496:	2301      	movs	r3, #1
 8009498:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	01db      	lsls	r3, r3, #7
 80094a4:	4413      	add	r3, r2
 80094a6:	3384      	adds	r3, #132	; 0x84
 80094a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	6812      	ldr	r2, [r2, #0]
 80094ae:	4611      	mov	r1, r2
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	01d2      	lsls	r2, r2, #7
 80094b4:	440a      	add	r2, r1
 80094b6:	3284      	adds	r2, #132	; 0x84
 80094b8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80094bc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c2:	69fa      	ldr	r2, [r7, #28]
 80094c4:	fb02 f303 	mul.w	r3, r2, r3
 80094c8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	6859      	ldr	r1, [r3, #4]
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	1acb      	subs	r3, r1, r3
 80094d4:	69f9      	ldr	r1, [r7, #28]
 80094d6:	fb01 f303 	mul.w	r3, r1, r3
 80094da:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80094dc:	68f9      	ldr	r1, [r7, #12]
 80094de:	6809      	ldr	r1, [r1, #0]
 80094e0:	4608      	mov	r0, r1
 80094e2:	6879      	ldr	r1, [r7, #4]
 80094e4:	01c9      	lsls	r1, r1, #7
 80094e6:	4401      	add	r1, r0
 80094e8:	3184      	adds	r1, #132	; 0x84
 80094ea:	4313      	orrs	r3, r2
 80094ec:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	461a      	mov	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	01db      	lsls	r3, r3, #7
 80094f8:	4413      	add	r3, r2
 80094fa:	3384      	adds	r3, #132	; 0x84
 80094fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4619      	mov	r1, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	01db      	lsls	r3, r3, #7
 8009508:	440b      	add	r3, r1
 800950a:	3384      	adds	r3, #132	; 0x84
 800950c:	4619      	mov	r1, r3
 800950e:	4b14      	ldr	r3, [pc, #80]	; (8009560 <LTDC_SetConfig+0x330>)
 8009510:	4013      	ands	r3, r2
 8009512:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	461a      	mov	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	01db      	lsls	r3, r3, #7
 800951e:	4413      	add	r3, r2
 8009520:	3384      	adds	r3, #132	; 0x84
 8009522:	461a      	mov	r2, r3
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009528:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	01db      	lsls	r3, r3, #7
 8009534:	4413      	add	r3, r2
 8009536:	3384      	adds	r3, #132	; 0x84
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	6812      	ldr	r2, [r2, #0]
 800953e:	4611      	mov	r1, r2
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	01d2      	lsls	r2, r2, #7
 8009544:	440a      	add	r2, r1
 8009546:	3284      	adds	r2, #132	; 0x84
 8009548:	f043 0301 	orr.w	r3, r3, #1
 800954c:	6013      	str	r3, [r2, #0]
}
 800954e:	bf00      	nop
 8009550:	3724      	adds	r7, #36	; 0x24
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	fffff8f8 	.word	0xfffff8f8
 8009560:	fffff800 	.word	0xfffff800

08009564 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800956a:	2300      	movs	r3, #0
 800956c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800956e:	4b23      	ldr	r3, [pc, #140]	; (80095fc <HAL_PWREx_EnableOverDrive+0x98>)
 8009570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009572:	4a22      	ldr	r2, [pc, #136]	; (80095fc <HAL_PWREx_EnableOverDrive+0x98>)
 8009574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009578:	6413      	str	r3, [r2, #64]	; 0x40
 800957a:	4b20      	ldr	r3, [pc, #128]	; (80095fc <HAL_PWREx_EnableOverDrive+0x98>)
 800957c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009582:	603b      	str	r3, [r7, #0]
 8009584:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009586:	4b1e      	ldr	r3, [pc, #120]	; (8009600 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a1d      	ldr	r2, [pc, #116]	; (8009600 <HAL_PWREx_EnableOverDrive+0x9c>)
 800958c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009590:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009592:	f7fd fb59 	bl	8006c48 <HAL_GetTick>
 8009596:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009598:	e009      	b.n	80095ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800959a:	f7fd fb55 	bl	8006c48 <HAL_GetTick>
 800959e:	4602      	mov	r2, r0
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095a8:	d901      	bls.n	80095ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80095aa:	2303      	movs	r3, #3
 80095ac:	e022      	b.n	80095f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80095ae:	4b14      	ldr	r3, [pc, #80]	; (8009600 <HAL_PWREx_EnableOverDrive+0x9c>)
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ba:	d1ee      	bne.n	800959a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80095bc:	4b10      	ldr	r3, [pc, #64]	; (8009600 <HAL_PWREx_EnableOverDrive+0x9c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a0f      	ldr	r2, [pc, #60]	; (8009600 <HAL_PWREx_EnableOverDrive+0x9c>)
 80095c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80095c8:	f7fd fb3e 	bl	8006c48 <HAL_GetTick>
 80095cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80095ce:	e009      	b.n	80095e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80095d0:	f7fd fb3a 	bl	8006c48 <HAL_GetTick>
 80095d4:	4602      	mov	r2, r0
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095de:	d901      	bls.n	80095e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80095e0:	2303      	movs	r3, #3
 80095e2:	e007      	b.n	80095f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80095e4:	4b06      	ldr	r3, [pc, #24]	; (8009600 <HAL_PWREx_EnableOverDrive+0x9c>)
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095f0:	d1ee      	bne.n	80095d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	40023800 	.word	0x40023800
 8009600:	40007000 	.word	0x40007000

08009604 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800960c:	2300      	movs	r3, #0
 800960e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d101      	bne.n	800961a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e291      	b.n	8009b3e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	2b00      	cmp	r3, #0
 8009624:	f000 8087 	beq.w	8009736 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009628:	4b96      	ldr	r3, [pc, #600]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f003 030c 	and.w	r3, r3, #12
 8009630:	2b04      	cmp	r3, #4
 8009632:	d00c      	beq.n	800964e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009634:	4b93      	ldr	r3, [pc, #588]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f003 030c 	and.w	r3, r3, #12
 800963c:	2b08      	cmp	r3, #8
 800963e:	d112      	bne.n	8009666 <HAL_RCC_OscConfig+0x62>
 8009640:	4b90      	ldr	r3, [pc, #576]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800964c:	d10b      	bne.n	8009666 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800964e:	4b8d      	ldr	r3, [pc, #564]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009656:	2b00      	cmp	r3, #0
 8009658:	d06c      	beq.n	8009734 <HAL_RCC_OscConfig+0x130>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d168      	bne.n	8009734 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e26b      	b.n	8009b3e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800966e:	d106      	bne.n	800967e <HAL_RCC_OscConfig+0x7a>
 8009670:	4b84      	ldr	r3, [pc, #528]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a83      	ldr	r2, [pc, #524]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 8009676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800967a:	6013      	str	r3, [r2, #0]
 800967c:	e02e      	b.n	80096dc <HAL_RCC_OscConfig+0xd8>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10c      	bne.n	80096a0 <HAL_RCC_OscConfig+0x9c>
 8009686:	4b7f      	ldr	r3, [pc, #508]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a7e      	ldr	r2, [pc, #504]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 800968c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009690:	6013      	str	r3, [r2, #0]
 8009692:	4b7c      	ldr	r3, [pc, #496]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a7b      	ldr	r2, [pc, #492]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 8009698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800969c:	6013      	str	r3, [r2, #0]
 800969e:	e01d      	b.n	80096dc <HAL_RCC_OscConfig+0xd8>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096a8:	d10c      	bne.n	80096c4 <HAL_RCC_OscConfig+0xc0>
 80096aa:	4b76      	ldr	r3, [pc, #472]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a75      	ldr	r2, [pc, #468]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 80096b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096b4:	6013      	str	r3, [r2, #0]
 80096b6:	4b73      	ldr	r3, [pc, #460]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a72      	ldr	r2, [pc, #456]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 80096bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096c0:	6013      	str	r3, [r2, #0]
 80096c2:	e00b      	b.n	80096dc <HAL_RCC_OscConfig+0xd8>
 80096c4:	4b6f      	ldr	r3, [pc, #444]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a6e      	ldr	r2, [pc, #440]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 80096ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	4b6c      	ldr	r3, [pc, #432]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a6b      	ldr	r2, [pc, #428]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 80096d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d013      	beq.n	800970c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096e4:	f7fd fab0 	bl	8006c48 <HAL_GetTick>
 80096e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096ea:	e008      	b.n	80096fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096ec:	f7fd faac 	bl	8006c48 <HAL_GetTick>
 80096f0:	4602      	mov	r2, r0
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	2b64      	cmp	r3, #100	; 0x64
 80096f8:	d901      	bls.n	80096fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80096fa:	2303      	movs	r3, #3
 80096fc:	e21f      	b.n	8009b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096fe:	4b61      	ldr	r3, [pc, #388]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009706:	2b00      	cmp	r3, #0
 8009708:	d0f0      	beq.n	80096ec <HAL_RCC_OscConfig+0xe8>
 800970a:	e014      	b.n	8009736 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800970c:	f7fd fa9c 	bl	8006c48 <HAL_GetTick>
 8009710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009712:	e008      	b.n	8009726 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009714:	f7fd fa98 	bl	8006c48 <HAL_GetTick>
 8009718:	4602      	mov	r2, r0
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	2b64      	cmp	r3, #100	; 0x64
 8009720:	d901      	bls.n	8009726 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	e20b      	b.n	8009b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009726:	4b57      	ldr	r3, [pc, #348]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1f0      	bne.n	8009714 <HAL_RCC_OscConfig+0x110>
 8009732:	e000      	b.n	8009736 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f003 0302 	and.w	r3, r3, #2
 800973e:	2b00      	cmp	r3, #0
 8009740:	d069      	beq.n	8009816 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009742:	4b50      	ldr	r3, [pc, #320]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f003 030c 	and.w	r3, r3, #12
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00b      	beq.n	8009766 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800974e:	4b4d      	ldr	r3, [pc, #308]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f003 030c 	and.w	r3, r3, #12
 8009756:	2b08      	cmp	r3, #8
 8009758:	d11c      	bne.n	8009794 <HAL_RCC_OscConfig+0x190>
 800975a:	4b4a      	ldr	r3, [pc, #296]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d116      	bne.n	8009794 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009766:	4b47      	ldr	r3, [pc, #284]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 0302 	and.w	r3, r3, #2
 800976e:	2b00      	cmp	r3, #0
 8009770:	d005      	beq.n	800977e <HAL_RCC_OscConfig+0x17a>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	2b01      	cmp	r3, #1
 8009778:	d001      	beq.n	800977e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	e1df      	b.n	8009b3e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800977e:	4b41      	ldr	r3, [pc, #260]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	00db      	lsls	r3, r3, #3
 800978c:	493d      	ldr	r1, [pc, #244]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 800978e:	4313      	orrs	r3, r2
 8009790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009792:	e040      	b.n	8009816 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d023      	beq.n	80097e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800979c:	4b39      	ldr	r3, [pc, #228]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a38      	ldr	r2, [pc, #224]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 80097a2:	f043 0301 	orr.w	r3, r3, #1
 80097a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097a8:	f7fd fa4e 	bl	8006c48 <HAL_GetTick>
 80097ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097ae:	e008      	b.n	80097c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097b0:	f7fd fa4a 	bl	8006c48 <HAL_GetTick>
 80097b4:	4602      	mov	r2, r0
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d901      	bls.n	80097c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80097be:	2303      	movs	r3, #3
 80097c0:	e1bd      	b.n	8009b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097c2:	4b30      	ldr	r3, [pc, #192]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 0302 	and.w	r3, r3, #2
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d0f0      	beq.n	80097b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097ce:	4b2d      	ldr	r3, [pc, #180]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	00db      	lsls	r3, r3, #3
 80097dc:	4929      	ldr	r1, [pc, #164]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 80097de:	4313      	orrs	r3, r2
 80097e0:	600b      	str	r3, [r1, #0]
 80097e2:	e018      	b.n	8009816 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097e4:	4b27      	ldr	r3, [pc, #156]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a26      	ldr	r2, [pc, #152]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 80097ea:	f023 0301 	bic.w	r3, r3, #1
 80097ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097f0:	f7fd fa2a 	bl	8006c48 <HAL_GetTick>
 80097f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80097f6:	e008      	b.n	800980a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097f8:	f7fd fa26 	bl	8006c48 <HAL_GetTick>
 80097fc:	4602      	mov	r2, r0
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	2b02      	cmp	r3, #2
 8009804:	d901      	bls.n	800980a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009806:	2303      	movs	r3, #3
 8009808:	e199      	b.n	8009b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800980a:	4b1e      	ldr	r3, [pc, #120]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f003 0302 	and.w	r3, r3, #2
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1f0      	bne.n	80097f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 0308 	and.w	r3, r3, #8
 800981e:	2b00      	cmp	r3, #0
 8009820:	d038      	beq.n	8009894 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	695b      	ldr	r3, [r3, #20]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d019      	beq.n	800985e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800982a:	4b16      	ldr	r3, [pc, #88]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 800982c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800982e:	4a15      	ldr	r2, [pc, #84]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 8009830:	f043 0301 	orr.w	r3, r3, #1
 8009834:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009836:	f7fd fa07 	bl	8006c48 <HAL_GetTick>
 800983a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800983c:	e008      	b.n	8009850 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800983e:	f7fd fa03 	bl	8006c48 <HAL_GetTick>
 8009842:	4602      	mov	r2, r0
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	1ad3      	subs	r3, r2, r3
 8009848:	2b02      	cmp	r3, #2
 800984a:	d901      	bls.n	8009850 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800984c:	2303      	movs	r3, #3
 800984e:	e176      	b.n	8009b3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009850:	4b0c      	ldr	r3, [pc, #48]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 8009852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009854:	f003 0302 	and.w	r3, r3, #2
 8009858:	2b00      	cmp	r3, #0
 800985a:	d0f0      	beq.n	800983e <HAL_RCC_OscConfig+0x23a>
 800985c:	e01a      	b.n	8009894 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800985e:	4b09      	ldr	r3, [pc, #36]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 8009860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009862:	4a08      	ldr	r2, [pc, #32]	; (8009884 <HAL_RCC_OscConfig+0x280>)
 8009864:	f023 0301 	bic.w	r3, r3, #1
 8009868:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800986a:	f7fd f9ed 	bl	8006c48 <HAL_GetTick>
 800986e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009870:	e00a      	b.n	8009888 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009872:	f7fd f9e9 	bl	8006c48 <HAL_GetTick>
 8009876:	4602      	mov	r2, r0
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	2b02      	cmp	r3, #2
 800987e:	d903      	bls.n	8009888 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	e15c      	b.n	8009b3e <HAL_RCC_OscConfig+0x53a>
 8009884:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009888:	4b91      	ldr	r3, [pc, #580]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 800988a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800988c:	f003 0302 	and.w	r3, r3, #2
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1ee      	bne.n	8009872 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 0304 	and.w	r3, r3, #4
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 80a4 	beq.w	80099ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098a2:	4b8b      	ldr	r3, [pc, #556]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 80098a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d10d      	bne.n	80098ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80098ae:	4b88      	ldr	r3, [pc, #544]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 80098b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b2:	4a87      	ldr	r2, [pc, #540]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 80098b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098b8:	6413      	str	r3, [r2, #64]	; 0x40
 80098ba:	4b85      	ldr	r3, [pc, #532]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 80098bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098c2:	60bb      	str	r3, [r7, #8]
 80098c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80098c6:	2301      	movs	r3, #1
 80098c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098ca:	4b82      	ldr	r3, [pc, #520]	; (8009ad4 <HAL_RCC_OscConfig+0x4d0>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d118      	bne.n	8009908 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80098d6:	4b7f      	ldr	r3, [pc, #508]	; (8009ad4 <HAL_RCC_OscConfig+0x4d0>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a7e      	ldr	r2, [pc, #504]	; (8009ad4 <HAL_RCC_OscConfig+0x4d0>)
 80098dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098e2:	f7fd f9b1 	bl	8006c48 <HAL_GetTick>
 80098e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098e8:	e008      	b.n	80098fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098ea:	f7fd f9ad 	bl	8006c48 <HAL_GetTick>
 80098ee:	4602      	mov	r2, r0
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	2b64      	cmp	r3, #100	; 0x64
 80098f6:	d901      	bls.n	80098fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e120      	b.n	8009b3e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098fc:	4b75      	ldr	r3, [pc, #468]	; (8009ad4 <HAL_RCC_OscConfig+0x4d0>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009904:	2b00      	cmp	r3, #0
 8009906:	d0f0      	beq.n	80098ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d106      	bne.n	800991e <HAL_RCC_OscConfig+0x31a>
 8009910:	4b6f      	ldr	r3, [pc, #444]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009914:	4a6e      	ldr	r2, [pc, #440]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009916:	f043 0301 	orr.w	r3, r3, #1
 800991a:	6713      	str	r3, [r2, #112]	; 0x70
 800991c:	e02d      	b.n	800997a <HAL_RCC_OscConfig+0x376>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10c      	bne.n	8009940 <HAL_RCC_OscConfig+0x33c>
 8009926:	4b6a      	ldr	r3, [pc, #424]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800992a:	4a69      	ldr	r2, [pc, #420]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 800992c:	f023 0301 	bic.w	r3, r3, #1
 8009930:	6713      	str	r3, [r2, #112]	; 0x70
 8009932:	4b67      	ldr	r3, [pc, #412]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009936:	4a66      	ldr	r2, [pc, #408]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009938:	f023 0304 	bic.w	r3, r3, #4
 800993c:	6713      	str	r3, [r2, #112]	; 0x70
 800993e:	e01c      	b.n	800997a <HAL_RCC_OscConfig+0x376>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	2b05      	cmp	r3, #5
 8009946:	d10c      	bne.n	8009962 <HAL_RCC_OscConfig+0x35e>
 8009948:	4b61      	ldr	r3, [pc, #388]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 800994a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800994c:	4a60      	ldr	r2, [pc, #384]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 800994e:	f043 0304 	orr.w	r3, r3, #4
 8009952:	6713      	str	r3, [r2, #112]	; 0x70
 8009954:	4b5e      	ldr	r3, [pc, #376]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009958:	4a5d      	ldr	r2, [pc, #372]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 800995a:	f043 0301 	orr.w	r3, r3, #1
 800995e:	6713      	str	r3, [r2, #112]	; 0x70
 8009960:	e00b      	b.n	800997a <HAL_RCC_OscConfig+0x376>
 8009962:	4b5b      	ldr	r3, [pc, #364]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009966:	4a5a      	ldr	r2, [pc, #360]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009968:	f023 0301 	bic.w	r3, r3, #1
 800996c:	6713      	str	r3, [r2, #112]	; 0x70
 800996e:	4b58      	ldr	r3, [pc, #352]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009972:	4a57      	ldr	r2, [pc, #348]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009974:	f023 0304 	bic.w	r3, r3, #4
 8009978:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d015      	beq.n	80099ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009982:	f7fd f961 	bl	8006c48 <HAL_GetTick>
 8009986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009988:	e00a      	b.n	80099a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800998a:	f7fd f95d 	bl	8006c48 <HAL_GetTick>
 800998e:	4602      	mov	r2, r0
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	1ad3      	subs	r3, r2, r3
 8009994:	f241 3288 	movw	r2, #5000	; 0x1388
 8009998:	4293      	cmp	r3, r2
 800999a:	d901      	bls.n	80099a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e0ce      	b.n	8009b3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099a0:	4b4b      	ldr	r3, [pc, #300]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 80099a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099a4:	f003 0302 	and.w	r3, r3, #2
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d0ee      	beq.n	800998a <HAL_RCC_OscConfig+0x386>
 80099ac:	e014      	b.n	80099d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099ae:	f7fd f94b 	bl	8006c48 <HAL_GetTick>
 80099b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099b4:	e00a      	b.n	80099cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099b6:	f7fd f947 	bl	8006c48 <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d901      	bls.n	80099cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80099c8:	2303      	movs	r3, #3
 80099ca:	e0b8      	b.n	8009b3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099cc:	4b40      	ldr	r3, [pc, #256]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 80099ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099d0:	f003 0302 	and.w	r3, r3, #2
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d1ee      	bne.n	80099b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80099d8:	7dfb      	ldrb	r3, [r7, #23]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d105      	bne.n	80099ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099de:	4b3c      	ldr	r3, [pc, #240]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 80099e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e2:	4a3b      	ldr	r2, [pc, #236]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 80099e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	699b      	ldr	r3, [r3, #24]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f000 80a4 	beq.w	8009b3c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80099f4:	4b36      	ldr	r3, [pc, #216]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	f003 030c 	and.w	r3, r3, #12
 80099fc:	2b08      	cmp	r3, #8
 80099fe:	d06b      	beq.n	8009ad8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d149      	bne.n	8009a9c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a08:	4b31      	ldr	r3, [pc, #196]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a30      	ldr	r2, [pc, #192]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009a0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a14:	f7fd f918 	bl	8006c48 <HAL_GetTick>
 8009a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a1a:	e008      	b.n	8009a2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a1c:	f7fd f914 	bl	8006c48 <HAL_GetTick>
 8009a20:	4602      	mov	r2, r0
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d901      	bls.n	8009a2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e087      	b.n	8009b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a2e:	4b28      	ldr	r3, [pc, #160]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1f0      	bne.n	8009a1c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	69da      	ldr	r2, [r3, #28]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	431a      	orrs	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a48:	019b      	lsls	r3, r3, #6
 8009a4a:	431a      	orrs	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a50:	085b      	lsrs	r3, r3, #1
 8009a52:	3b01      	subs	r3, #1
 8009a54:	041b      	lsls	r3, r3, #16
 8009a56:	431a      	orrs	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5c:	061b      	lsls	r3, r3, #24
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	4a1b      	ldr	r2, [pc, #108]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009a62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a66:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009a68:	4b19      	ldr	r3, [pc, #100]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a18      	ldr	r2, [pc, #96]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a74:	f7fd f8e8 	bl	8006c48 <HAL_GetTick>
 8009a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a7a:	e008      	b.n	8009a8e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009a7c:	f7fd f8e4 	bl	8006c48 <HAL_GetTick>
 8009a80:	4602      	mov	r2, r0
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d901      	bls.n	8009a8e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e057      	b.n	8009b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a8e:	4b10      	ldr	r3, [pc, #64]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d0f0      	beq.n	8009a7c <HAL_RCC_OscConfig+0x478>
 8009a9a:	e04f      	b.n	8009b3c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a9c:	4b0c      	ldr	r3, [pc, #48]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a0b      	ldr	r2, [pc, #44]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aa8:	f7fd f8ce 	bl	8006c48 <HAL_GetTick>
 8009aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009aae:	e008      	b.n	8009ac2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ab0:	f7fd f8ca 	bl	8006c48 <HAL_GetTick>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d901      	bls.n	8009ac2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e03d      	b.n	8009b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ac2:	4b03      	ldr	r3, [pc, #12]	; (8009ad0 <HAL_RCC_OscConfig+0x4cc>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1f0      	bne.n	8009ab0 <HAL_RCC_OscConfig+0x4ac>
 8009ace:	e035      	b.n	8009b3c <HAL_RCC_OscConfig+0x538>
 8009ad0:	40023800 	.word	0x40023800
 8009ad4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009ad8:	4b1b      	ldr	r3, [pc, #108]	; (8009b48 <HAL_RCC_OscConfig+0x544>)
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d028      	beq.n	8009b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d121      	bne.n	8009b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d11a      	bne.n	8009b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009b08:	4013      	ands	r3, r2
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009b0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d111      	bne.n	8009b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1e:	085b      	lsrs	r3, r3, #1
 8009b20:	3b01      	subs	r3, #1
 8009b22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d107      	bne.n	8009b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d001      	beq.n	8009b3c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e000      	b.n	8009b3e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3718      	adds	r7, #24
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	40023800 	.word	0x40023800

08009b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009b56:	2300      	movs	r3, #0
 8009b58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d101      	bne.n	8009b64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e0d0      	b.n	8009d06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009b64:	4b6a      	ldr	r3, [pc, #424]	; (8009d10 <HAL_RCC_ClockConfig+0x1c4>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 030f 	and.w	r3, r3, #15
 8009b6c:	683a      	ldr	r2, [r7, #0]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d910      	bls.n	8009b94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b72:	4b67      	ldr	r3, [pc, #412]	; (8009d10 <HAL_RCC_ClockConfig+0x1c4>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f023 020f 	bic.w	r2, r3, #15
 8009b7a:	4965      	ldr	r1, [pc, #404]	; (8009d10 <HAL_RCC_ClockConfig+0x1c4>)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b82:	4b63      	ldr	r3, [pc, #396]	; (8009d10 <HAL_RCC_ClockConfig+0x1c4>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 030f 	and.w	r3, r3, #15
 8009b8a:	683a      	ldr	r2, [r7, #0]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d001      	beq.n	8009b94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	e0b8      	b.n	8009d06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f003 0302 	and.w	r3, r3, #2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d020      	beq.n	8009be2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f003 0304 	and.w	r3, r3, #4
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d005      	beq.n	8009bb8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009bac:	4b59      	ldr	r3, [pc, #356]	; (8009d14 <HAL_RCC_ClockConfig+0x1c8>)
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	4a58      	ldr	r2, [pc, #352]	; (8009d14 <HAL_RCC_ClockConfig+0x1c8>)
 8009bb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009bb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 0308 	and.w	r3, r3, #8
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d005      	beq.n	8009bd0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009bc4:	4b53      	ldr	r3, [pc, #332]	; (8009d14 <HAL_RCC_ClockConfig+0x1c8>)
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	4a52      	ldr	r2, [pc, #328]	; (8009d14 <HAL_RCC_ClockConfig+0x1c8>)
 8009bca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009bce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bd0:	4b50      	ldr	r3, [pc, #320]	; (8009d14 <HAL_RCC_ClockConfig+0x1c8>)
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	494d      	ldr	r1, [pc, #308]	; (8009d14 <HAL_RCC_ClockConfig+0x1c8>)
 8009bde:	4313      	orrs	r3, r2
 8009be0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f003 0301 	and.w	r3, r3, #1
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d040      	beq.n	8009c70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d107      	bne.n	8009c06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009bf6:	4b47      	ldr	r3, [pc, #284]	; (8009d14 <HAL_RCC_ClockConfig+0x1c8>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d115      	bne.n	8009c2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e07f      	b.n	8009d06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d107      	bne.n	8009c1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c0e:	4b41      	ldr	r3, [pc, #260]	; (8009d14 <HAL_RCC_ClockConfig+0x1c8>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d109      	bne.n	8009c2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e073      	b.n	8009d06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c1e:	4b3d      	ldr	r3, [pc, #244]	; (8009d14 <HAL_RCC_ClockConfig+0x1c8>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f003 0302 	and.w	r3, r3, #2
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e06b      	b.n	8009d06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009c2e:	4b39      	ldr	r3, [pc, #228]	; (8009d14 <HAL_RCC_ClockConfig+0x1c8>)
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	f023 0203 	bic.w	r2, r3, #3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	4936      	ldr	r1, [pc, #216]	; (8009d14 <HAL_RCC_ClockConfig+0x1c8>)
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c40:	f7fd f802 	bl	8006c48 <HAL_GetTick>
 8009c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c46:	e00a      	b.n	8009c5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c48:	f7fc fffe 	bl	8006c48 <HAL_GetTick>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d901      	bls.n	8009c5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009c5a:	2303      	movs	r3, #3
 8009c5c:	e053      	b.n	8009d06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c5e:	4b2d      	ldr	r3, [pc, #180]	; (8009d14 <HAL_RCC_ClockConfig+0x1c8>)
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	f003 020c 	and.w	r2, r3, #12
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d1eb      	bne.n	8009c48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009c70:	4b27      	ldr	r3, [pc, #156]	; (8009d10 <HAL_RCC_ClockConfig+0x1c4>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 030f 	and.w	r3, r3, #15
 8009c78:	683a      	ldr	r2, [r7, #0]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d210      	bcs.n	8009ca0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c7e:	4b24      	ldr	r3, [pc, #144]	; (8009d10 <HAL_RCC_ClockConfig+0x1c4>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f023 020f 	bic.w	r2, r3, #15
 8009c86:	4922      	ldr	r1, [pc, #136]	; (8009d10 <HAL_RCC_ClockConfig+0x1c4>)
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c8e:	4b20      	ldr	r3, [pc, #128]	; (8009d10 <HAL_RCC_ClockConfig+0x1c4>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f003 030f 	and.w	r3, r3, #15
 8009c96:	683a      	ldr	r2, [r7, #0]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d001      	beq.n	8009ca0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e032      	b.n	8009d06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f003 0304 	and.w	r3, r3, #4
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d008      	beq.n	8009cbe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009cac:	4b19      	ldr	r3, [pc, #100]	; (8009d14 <HAL_RCC_ClockConfig+0x1c8>)
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	4916      	ldr	r1, [pc, #88]	; (8009d14 <HAL_RCC_ClockConfig+0x1c8>)
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0308 	and.w	r3, r3, #8
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d009      	beq.n	8009cde <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009cca:	4b12      	ldr	r3, [pc, #72]	; (8009d14 <HAL_RCC_ClockConfig+0x1c8>)
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	00db      	lsls	r3, r3, #3
 8009cd8:	490e      	ldr	r1, [pc, #56]	; (8009d14 <HAL_RCC_ClockConfig+0x1c8>)
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009cde:	f000 f821 	bl	8009d24 <HAL_RCC_GetSysClockFreq>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	4b0b      	ldr	r3, [pc, #44]	; (8009d14 <HAL_RCC_ClockConfig+0x1c8>)
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	091b      	lsrs	r3, r3, #4
 8009cea:	f003 030f 	and.w	r3, r3, #15
 8009cee:	490a      	ldr	r1, [pc, #40]	; (8009d18 <HAL_RCC_ClockConfig+0x1cc>)
 8009cf0:	5ccb      	ldrb	r3, [r1, r3]
 8009cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8009cf6:	4a09      	ldr	r2, [pc, #36]	; (8009d1c <HAL_RCC_ClockConfig+0x1d0>)
 8009cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009cfa:	4b09      	ldr	r3, [pc, #36]	; (8009d20 <HAL_RCC_ClockConfig+0x1d4>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fc ff5e 	bl	8006bc0 <HAL_InitTick>

  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	40023c00 	.word	0x40023c00
 8009d14:	40023800 	.word	0x40023800
 8009d18:	0800c9f0 	.word	0x0800c9f0
 8009d1c:	20000254 	.word	0x20000254
 8009d20:	200002cc 	.word	0x200002cc

08009d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d28:	b090      	sub	sp, #64	; 0x40
 8009d2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8009d30:	2300      	movs	r3, #0
 8009d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d34:	2300      	movs	r3, #0
 8009d36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d3c:	4b59      	ldr	r3, [pc, #356]	; (8009ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	f003 030c 	and.w	r3, r3, #12
 8009d44:	2b08      	cmp	r3, #8
 8009d46:	d00d      	beq.n	8009d64 <HAL_RCC_GetSysClockFreq+0x40>
 8009d48:	2b08      	cmp	r3, #8
 8009d4a:	f200 80a1 	bhi.w	8009e90 <HAL_RCC_GetSysClockFreq+0x16c>
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d002      	beq.n	8009d58 <HAL_RCC_GetSysClockFreq+0x34>
 8009d52:	2b04      	cmp	r3, #4
 8009d54:	d003      	beq.n	8009d5e <HAL_RCC_GetSysClockFreq+0x3a>
 8009d56:	e09b      	b.n	8009e90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009d58:	4b53      	ldr	r3, [pc, #332]	; (8009ea8 <HAL_RCC_GetSysClockFreq+0x184>)
 8009d5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009d5c:	e09b      	b.n	8009e96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009d5e:	4b53      	ldr	r3, [pc, #332]	; (8009eac <HAL_RCC_GetSysClockFreq+0x188>)
 8009d60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009d62:	e098      	b.n	8009e96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009d64:	4b4f      	ldr	r3, [pc, #316]	; (8009ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d6c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009d6e:	4b4d      	ldr	r3, [pc, #308]	; (8009ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d028      	beq.n	8009dcc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d7a:	4b4a      	ldr	r3, [pc, #296]	; (8009ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	099b      	lsrs	r3, r3, #6
 8009d80:	2200      	movs	r2, #0
 8009d82:	623b      	str	r3, [r7, #32]
 8009d84:	627a      	str	r2, [r7, #36]	; 0x24
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	4b47      	ldr	r3, [pc, #284]	; (8009eac <HAL_RCC_GetSysClockFreq+0x188>)
 8009d90:	fb03 f201 	mul.w	r2, r3, r1
 8009d94:	2300      	movs	r3, #0
 8009d96:	fb00 f303 	mul.w	r3, r0, r3
 8009d9a:	4413      	add	r3, r2
 8009d9c:	4a43      	ldr	r2, [pc, #268]	; (8009eac <HAL_RCC_GetSysClockFreq+0x188>)
 8009d9e:	fba0 1202 	umull	r1, r2, r0, r2
 8009da2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009da4:	460a      	mov	r2, r1
 8009da6:	62ba      	str	r2, [r7, #40]	; 0x28
 8009da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009daa:	4413      	add	r3, r2
 8009dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db0:	2200      	movs	r2, #0
 8009db2:	61bb      	str	r3, [r7, #24]
 8009db4:	61fa      	str	r2, [r7, #28]
 8009db6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009dba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009dbe:	f7f6 fa23 	bl	8000208 <__aeabi_uldivmod>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009dca:	e053      	b.n	8009e74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009dcc:	4b35      	ldr	r3, [pc, #212]	; (8009ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	099b      	lsrs	r3, r3, #6
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	613b      	str	r3, [r7, #16]
 8009dd6:	617a      	str	r2, [r7, #20]
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009dde:	f04f 0b00 	mov.w	fp, #0
 8009de2:	4652      	mov	r2, sl
 8009de4:	465b      	mov	r3, fp
 8009de6:	f04f 0000 	mov.w	r0, #0
 8009dea:	f04f 0100 	mov.w	r1, #0
 8009dee:	0159      	lsls	r1, r3, #5
 8009df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009df4:	0150      	lsls	r0, r2, #5
 8009df6:	4602      	mov	r2, r0
 8009df8:	460b      	mov	r3, r1
 8009dfa:	ebb2 080a 	subs.w	r8, r2, sl
 8009dfe:	eb63 090b 	sbc.w	r9, r3, fp
 8009e02:	f04f 0200 	mov.w	r2, #0
 8009e06:	f04f 0300 	mov.w	r3, #0
 8009e0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009e0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009e12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009e16:	ebb2 0408 	subs.w	r4, r2, r8
 8009e1a:	eb63 0509 	sbc.w	r5, r3, r9
 8009e1e:	f04f 0200 	mov.w	r2, #0
 8009e22:	f04f 0300 	mov.w	r3, #0
 8009e26:	00eb      	lsls	r3, r5, #3
 8009e28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e2c:	00e2      	lsls	r2, r4, #3
 8009e2e:	4614      	mov	r4, r2
 8009e30:	461d      	mov	r5, r3
 8009e32:	eb14 030a 	adds.w	r3, r4, sl
 8009e36:	603b      	str	r3, [r7, #0]
 8009e38:	eb45 030b 	adc.w	r3, r5, fp
 8009e3c:	607b      	str	r3, [r7, #4]
 8009e3e:	f04f 0200 	mov.w	r2, #0
 8009e42:	f04f 0300 	mov.w	r3, #0
 8009e46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009e4a:	4629      	mov	r1, r5
 8009e4c:	028b      	lsls	r3, r1, #10
 8009e4e:	4621      	mov	r1, r4
 8009e50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009e54:	4621      	mov	r1, r4
 8009e56:	028a      	lsls	r2, r1, #10
 8009e58:	4610      	mov	r0, r2
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e5e:	2200      	movs	r2, #0
 8009e60:	60bb      	str	r3, [r7, #8]
 8009e62:	60fa      	str	r2, [r7, #12]
 8009e64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e68:	f7f6 f9ce 	bl	8000208 <__aeabi_uldivmod>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	460b      	mov	r3, r1
 8009e70:	4613      	mov	r3, r2
 8009e72:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009e74:	4b0b      	ldr	r3, [pc, #44]	; (8009ea4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	0c1b      	lsrs	r3, r3, #16
 8009e7a:	f003 0303 	and.w	r3, r3, #3
 8009e7e:	3301      	adds	r3, #1
 8009e80:	005b      	lsls	r3, r3, #1
 8009e82:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8009e84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e8c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009e8e:	e002      	b.n	8009e96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009e90:	4b05      	ldr	r3, [pc, #20]	; (8009ea8 <HAL_RCC_GetSysClockFreq+0x184>)
 8009e92:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3740      	adds	r7, #64	; 0x40
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ea2:	bf00      	nop
 8009ea4:	40023800 	.word	0x40023800
 8009ea8:	00f42400 	.word	0x00f42400
 8009eac:	017d7840 	.word	0x017d7840

08009eb0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009eb4:	4b03      	ldr	r3, [pc, #12]	; (8009ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	20000254 	.word	0x20000254

08009ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009ecc:	f7ff fff0 	bl	8009eb0 <HAL_RCC_GetHCLKFreq>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	4b05      	ldr	r3, [pc, #20]	; (8009ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	0a9b      	lsrs	r3, r3, #10
 8009ed8:	f003 0307 	and.w	r3, r3, #7
 8009edc:	4903      	ldr	r1, [pc, #12]	; (8009eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ede:	5ccb      	ldrb	r3, [r1, r3]
 8009ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	40023800 	.word	0x40023800
 8009eec:	0800ca00 	.word	0x0800ca00

08009ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009ef4:	f7ff ffdc 	bl	8009eb0 <HAL_RCC_GetHCLKFreq>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	4b05      	ldr	r3, [pc, #20]	; (8009f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	0b5b      	lsrs	r3, r3, #13
 8009f00:	f003 0307 	and.w	r3, r3, #7
 8009f04:	4903      	ldr	r1, [pc, #12]	; (8009f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f06:	5ccb      	ldrb	r3, [r1, r3]
 8009f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	40023800 	.word	0x40023800
 8009f14:	0800ca00 	.word	0x0800ca00

08009f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b088      	sub	sp, #32
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009f20:	2300      	movs	r3, #0
 8009f22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009f24:	2300      	movs	r3, #0
 8009f26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009f30:	2300      	movs	r3, #0
 8009f32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 0301 	and.w	r3, r3, #1
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d012      	beq.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009f40:	4b69      	ldr	r3, [pc, #420]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	4a68      	ldr	r2, [pc, #416]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009f4a:	6093      	str	r3, [r2, #8]
 8009f4c:	4b66      	ldr	r3, [pc, #408]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f4e:	689a      	ldr	r2, [r3, #8]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f54:	4964      	ldr	r1, [pc, #400]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d101      	bne.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009f62:	2301      	movs	r3, #1
 8009f64:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d017      	beq.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009f72:	4b5d      	ldr	r3, [pc, #372]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f80:	4959      	ldr	r1, [pc, #356]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009f82:	4313      	orrs	r3, r2
 8009f84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f90:	d101      	bne.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009f92:	2301      	movs	r3, #1
 8009f94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d017      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009fae:	4b4e      	ldr	r3, [pc, #312]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fbc:	494a      	ldr	r1, [pc, #296]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fcc:	d101      	bne.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d101      	bne.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009fea:	2301      	movs	r3, #1
 8009fec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 0320 	and.w	r3, r3, #32
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f000 808b 	beq.w	800a112 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009ffc:	4b3a      	ldr	r3, [pc, #232]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a000:	4a39      	ldr	r2, [pc, #228]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a006:	6413      	str	r3, [r2, #64]	; 0x40
 800a008:	4b37      	ldr	r3, [pc, #220]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a00a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a010:	60bb      	str	r3, [r7, #8]
 800a012:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a014:	4b35      	ldr	r3, [pc, #212]	; (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a34      	ldr	r2, [pc, #208]	; (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a01a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a01e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a020:	f7fc fe12 	bl	8006c48 <HAL_GetTick>
 800a024:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a026:	e008      	b.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a028:	f7fc fe0e 	bl	8006c48 <HAL_GetTick>
 800a02c:	4602      	mov	r2, r0
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	2b64      	cmp	r3, #100	; 0x64
 800a034:	d901      	bls.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e357      	b.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a03a:	4b2c      	ldr	r3, [pc, #176]	; (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a042:	2b00      	cmp	r3, #0
 800a044:	d0f0      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a046:	4b28      	ldr	r3, [pc, #160]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a04a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a04e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d035      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a05e:	693a      	ldr	r2, [r7, #16]
 800a060:	429a      	cmp	r2, r3
 800a062:	d02e      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a064:	4b20      	ldr	r3, [pc, #128]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a06c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a06e:	4b1e      	ldr	r3, [pc, #120]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a072:	4a1d      	ldr	r2, [pc, #116]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a078:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a07a:	4b1b      	ldr	r3, [pc, #108]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a07c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a07e:	4a1a      	ldr	r2, [pc, #104]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a084:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a086:	4a18      	ldr	r2, [pc, #96]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a08c:	4b16      	ldr	r3, [pc, #88]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a08e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a090:	f003 0301 	and.w	r3, r3, #1
 800a094:	2b01      	cmp	r3, #1
 800a096:	d114      	bne.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a098:	f7fc fdd6 	bl	8006c48 <HAL_GetTick>
 800a09c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a09e:	e00a      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a0a0:	f7fc fdd2 	bl	8006c48 <HAL_GetTick>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d901      	bls.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	e319      	b.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0b6:	4b0c      	ldr	r3, [pc, #48]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a0b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ba:	f003 0302 	and.w	r3, r3, #2
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0ee      	beq.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0ce:	d111      	bne.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a0d0:	4b05      	ldr	r3, [pc, #20]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a0dc:	4b04      	ldr	r3, [pc, #16]	; (800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a0de:	400b      	ands	r3, r1
 800a0e0:	4901      	ldr	r1, [pc, #4]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	608b      	str	r3, [r1, #8]
 800a0e6:	e00b      	b.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a0e8:	40023800 	.word	0x40023800
 800a0ec:	40007000 	.word	0x40007000
 800a0f0:	0ffffcff 	.word	0x0ffffcff
 800a0f4:	4baa      	ldr	r3, [pc, #680]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	4aa9      	ldr	r2, [pc, #676]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a0fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a0fe:	6093      	str	r3, [r2, #8]
 800a100:	4ba7      	ldr	r3, [pc, #668]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a102:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a10c:	49a4      	ldr	r1, [pc, #656]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a10e:	4313      	orrs	r3, r2
 800a110:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 0310 	and.w	r3, r3, #16
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d010      	beq.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a11e:	4ba0      	ldr	r3, [pc, #640]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a124:	4a9e      	ldr	r2, [pc, #632]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a12a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a12e:	4b9c      	ldr	r3, [pc, #624]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a130:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a138:	4999      	ldr	r1, [pc, #612]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a13a:	4313      	orrs	r3, r2
 800a13c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00a      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a14c:	4b94      	ldr	r3, [pc, #592]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a14e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a152:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a15a:	4991      	ldr	r1, [pc, #580]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a15c:	4313      	orrs	r3, r2
 800a15e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00a      	beq.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a16e:	4b8c      	ldr	r3, [pc, #560]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a174:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a17c:	4988      	ldr	r1, [pc, #544]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a17e:	4313      	orrs	r3, r2
 800a180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00a      	beq.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a190:	4b83      	ldr	r3, [pc, #524]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a196:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a19e:	4980      	ldr	r1, [pc, #512]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00a      	beq.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a1b2:	4b7b      	ldr	r3, [pc, #492]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a1b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c0:	4977      	ldr	r1, [pc, #476]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00a      	beq.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a1d4:	4b72      	ldr	r3, [pc, #456]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a1d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1da:	f023 0203 	bic.w	r2, r3, #3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1e2:	496f      	ldr	r1, [pc, #444]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00a      	beq.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a1f6:	4b6a      	ldr	r3, [pc, #424]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1fc:	f023 020c 	bic.w	r2, r3, #12
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a204:	4966      	ldr	r1, [pc, #408]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a206:	4313      	orrs	r3, r2
 800a208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00a      	beq.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a218:	4b61      	ldr	r3, [pc, #388]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a21a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a21e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a226:	495e      	ldr	r1, [pc, #376]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a228:	4313      	orrs	r3, r2
 800a22a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00a      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a23a:	4b59      	ldr	r3, [pc, #356]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a23c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a240:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a248:	4955      	ldr	r1, [pc, #340]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a24a:	4313      	orrs	r3, r2
 800a24c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00a      	beq.n	800a272 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a25c:	4b50      	ldr	r3, [pc, #320]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a25e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a262:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a26a:	494d      	ldr	r1, [pc, #308]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a26c:	4313      	orrs	r3, r2
 800a26e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00a      	beq.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a27e:	4b48      	ldr	r3, [pc, #288]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a284:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a28c:	4944      	ldr	r1, [pc, #272]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a28e:	4313      	orrs	r3, r2
 800a290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00a      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a2a0:	4b3f      	ldr	r3, [pc, #252]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a2a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2ae:	493c      	ldr	r1, [pc, #240]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00a      	beq.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a2c2:	4b37      	ldr	r3, [pc, #220]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a2c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2d0:	4933      	ldr	r1, [pc, #204]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00a      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a2e4:	4b2e      	ldr	r3, [pc, #184]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a2e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2f2:	492b      	ldr	r1, [pc, #172]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a302:	2b00      	cmp	r3, #0
 800a304:	d011      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a306:	4b26      	ldr	r3, [pc, #152]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a30c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a314:	4922      	ldr	r1, [pc, #136]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a316:	4313      	orrs	r3, r2
 800a318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a324:	d101      	bne.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a326:	2301      	movs	r3, #1
 800a328:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 0308 	and.w	r3, r3, #8
 800a332:	2b00      	cmp	r3, #0
 800a334:	d001      	beq.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a336:	2301      	movs	r3, #1
 800a338:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a342:	2b00      	cmp	r3, #0
 800a344:	d00a      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a346:	4b16      	ldr	r3, [pc, #88]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a34c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a354:	4912      	ldr	r1, [pc, #72]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a356:	4313      	orrs	r3, r2
 800a358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00b      	beq.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a368:	4b0d      	ldr	r3, [pc, #52]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a36a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a36e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a378:	4909      	ldr	r1, [pc, #36]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a37a:	4313      	orrs	r3, r2
 800a37c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	2b01      	cmp	r3, #1
 800a384:	d006      	beq.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f000 80d9 	beq.w	800a546 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a394:	4b02      	ldr	r3, [pc, #8]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a01      	ldr	r2, [pc, #4]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a39a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a39e:	e001      	b.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800a3a0:	40023800 	.word	0x40023800
 800a3a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3a6:	f7fc fc4f 	bl	8006c48 <HAL_GetTick>
 800a3aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a3ac:	e008      	b.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a3ae:	f7fc fc4b 	bl	8006c48 <HAL_GetTick>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	1ad3      	subs	r3, r2, r3
 800a3b8:	2b64      	cmp	r3, #100	; 0x64
 800a3ba:	d901      	bls.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e194      	b.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a3c0:	4b6c      	ldr	r3, [pc, #432]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1f0      	bne.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f003 0301 	and.w	r3, r3, #1
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d021      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x504>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d11d      	bne.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a3e0:	4b64      	ldr	r3, [pc, #400]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3e6:	0c1b      	lsrs	r3, r3, #16
 800a3e8:	f003 0303 	and.w	r3, r3, #3
 800a3ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a3ee:	4b61      	ldr	r3, [pc, #388]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a3f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3f4:	0e1b      	lsrs	r3, r3, #24
 800a3f6:	f003 030f 	and.w	r3, r3, #15
 800a3fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	019a      	lsls	r2, r3, #6
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	041b      	lsls	r3, r3, #16
 800a406:	431a      	orrs	r2, r3
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	061b      	lsls	r3, r3, #24
 800a40c:	431a      	orrs	r2, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	071b      	lsls	r3, r3, #28
 800a414:	4957      	ldr	r1, [pc, #348]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a416:	4313      	orrs	r3, r2
 800a418:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d004      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a42c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a430:	d00a      	beq.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d02e      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a446:	d129      	bne.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a448:	4b4a      	ldr	r3, [pc, #296]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a44a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a44e:	0c1b      	lsrs	r3, r3, #16
 800a450:	f003 0303 	and.w	r3, r3, #3
 800a454:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a456:	4b47      	ldr	r3, [pc, #284]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a45c:	0f1b      	lsrs	r3, r3, #28
 800a45e:	f003 0307 	and.w	r3, r3, #7
 800a462:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	019a      	lsls	r2, r3, #6
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	041b      	lsls	r3, r3, #16
 800a46e:	431a      	orrs	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	061b      	lsls	r3, r3, #24
 800a476:	431a      	orrs	r2, r3
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	071b      	lsls	r3, r3, #28
 800a47c:	493d      	ldr	r1, [pc, #244]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a47e:	4313      	orrs	r3, r2
 800a480:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a484:	4b3b      	ldr	r3, [pc, #236]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a48a:	f023 021f 	bic.w	r2, r3, #31
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a492:	3b01      	subs	r3, #1
 800a494:	4937      	ldr	r1, [pc, #220]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a496:	4313      	orrs	r3, r2
 800a498:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d01d      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a4a8:	4b32      	ldr	r3, [pc, #200]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a4aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4ae:	0e1b      	lsrs	r3, r3, #24
 800a4b0:	f003 030f 	and.w	r3, r3, #15
 800a4b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a4b6:	4b2f      	ldr	r3, [pc, #188]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4bc:	0f1b      	lsrs	r3, r3, #28
 800a4be:	f003 0307 	and.w	r3, r3, #7
 800a4c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	019a      	lsls	r2, r3, #6
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	041b      	lsls	r3, r3, #16
 800a4d0:	431a      	orrs	r2, r3
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	061b      	lsls	r3, r3, #24
 800a4d6:	431a      	orrs	r2, r3
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	071b      	lsls	r3, r3, #28
 800a4dc:	4925      	ldr	r1, [pc, #148]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d011      	beq.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	019a      	lsls	r2, r3, #6
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	041b      	lsls	r3, r3, #16
 800a4fc:	431a      	orrs	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	061b      	lsls	r3, r3, #24
 800a504:	431a      	orrs	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	071b      	lsls	r3, r3, #28
 800a50c:	4919      	ldr	r1, [pc, #100]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a50e:	4313      	orrs	r3, r2
 800a510:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a514:	4b17      	ldr	r3, [pc, #92]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a16      	ldr	r2, [pc, #88]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a51a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a51e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a520:	f7fc fb92 	bl	8006c48 <HAL_GetTick>
 800a524:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a526:	e008      	b.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a528:	f7fc fb8e 	bl	8006c48 <HAL_GetTick>
 800a52c:	4602      	mov	r2, r0
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	2b64      	cmp	r3, #100	; 0x64
 800a534:	d901      	bls.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a536:	2303      	movs	r3, #3
 800a538:	e0d7      	b.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a53a:	4b0e      	ldr	r3, [pc, #56]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a542:	2b00      	cmp	r3, #0
 800a544:	d0f0      	beq.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	f040 80cd 	bne.w	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a54e:	4b09      	ldr	r3, [pc, #36]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a08      	ldr	r2, [pc, #32]	; (800a574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a558:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a55a:	f7fc fb75 	bl	8006c48 <HAL_GetTick>
 800a55e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a560:	e00a      	b.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a562:	f7fc fb71 	bl	8006c48 <HAL_GetTick>
 800a566:	4602      	mov	r2, r0
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	1ad3      	subs	r3, r2, r3
 800a56c:	2b64      	cmp	r3, #100	; 0x64
 800a56e:	d903      	bls.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a570:	2303      	movs	r3, #3
 800a572:	e0ba      	b.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a574:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a578:	4b5e      	ldr	r3, [pc, #376]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a584:	d0ed      	beq.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d003      	beq.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x682>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a596:	2b00      	cmp	r3, #0
 800a598:	d009      	beq.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d02e      	beq.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d12a      	bne.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a5ae:	4b51      	ldr	r3, [pc, #324]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a5b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b4:	0c1b      	lsrs	r3, r3, #16
 800a5b6:	f003 0303 	and.w	r3, r3, #3
 800a5ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a5bc:	4b4d      	ldr	r3, [pc, #308]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a5be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5c2:	0f1b      	lsrs	r3, r3, #28
 800a5c4:	f003 0307 	and.w	r3, r3, #7
 800a5c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	695b      	ldr	r3, [r3, #20]
 800a5ce:	019a      	lsls	r2, r3, #6
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	041b      	lsls	r3, r3, #16
 800a5d4:	431a      	orrs	r2, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	061b      	lsls	r3, r3, #24
 800a5dc:	431a      	orrs	r2, r3
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	071b      	lsls	r3, r3, #28
 800a5e2:	4944      	ldr	r1, [pc, #272]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a5ea:	4b42      	ldr	r3, [pc, #264]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a5ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	021b      	lsls	r3, r3, #8
 800a5fc:	493d      	ldr	r1, [pc, #244]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a5fe:	4313      	orrs	r3, r2
 800a600:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d022      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a618:	d11d      	bne.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a61a:	4b36      	ldr	r3, [pc, #216]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a61c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a620:	0e1b      	lsrs	r3, r3, #24
 800a622:	f003 030f 	and.w	r3, r3, #15
 800a626:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a628:	4b32      	ldr	r3, [pc, #200]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a62a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a62e:	0f1b      	lsrs	r3, r3, #28
 800a630:	f003 0307 	and.w	r3, r3, #7
 800a634:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	695b      	ldr	r3, [r3, #20]
 800a63a:	019a      	lsls	r2, r3, #6
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a1b      	ldr	r3, [r3, #32]
 800a640:	041b      	lsls	r3, r3, #16
 800a642:	431a      	orrs	r2, r3
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	061b      	lsls	r3, r3, #24
 800a648:	431a      	orrs	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	071b      	lsls	r3, r3, #28
 800a64e:	4929      	ldr	r1, [pc, #164]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a650:	4313      	orrs	r3, r2
 800a652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f003 0308 	and.w	r3, r3, #8
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d028      	beq.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a662:	4b24      	ldr	r3, [pc, #144]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a668:	0e1b      	lsrs	r3, r3, #24
 800a66a:	f003 030f 	and.w	r3, r3, #15
 800a66e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a670:	4b20      	ldr	r3, [pc, #128]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a676:	0c1b      	lsrs	r3, r3, #16
 800a678:	f003 0303 	and.w	r3, r3, #3
 800a67c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	695b      	ldr	r3, [r3, #20]
 800a682:	019a      	lsls	r2, r3, #6
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	041b      	lsls	r3, r3, #16
 800a688:	431a      	orrs	r2, r3
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	061b      	lsls	r3, r3, #24
 800a68e:	431a      	orrs	r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	69db      	ldr	r3, [r3, #28]
 800a694:	071b      	lsls	r3, r3, #28
 800a696:	4917      	ldr	r1, [pc, #92]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a698:	4313      	orrs	r3, r2
 800a69a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a69e:	4b15      	ldr	r3, [pc, #84]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a6a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ac:	4911      	ldr	r1, [pc, #68]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a6b4:	4b0f      	ldr	r3, [pc, #60]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a0e      	ldr	r2, [pc, #56]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a6ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6c0:	f7fc fac2 	bl	8006c48 <HAL_GetTick>
 800a6c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a6c6:	e008      	b.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a6c8:	f7fc fabe 	bl	8006c48 <HAL_GetTick>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	1ad3      	subs	r3, r2, r3
 800a6d2:	2b64      	cmp	r3, #100	; 0x64
 800a6d4:	d901      	bls.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a6d6:	2303      	movs	r3, #3
 800a6d8:	e007      	b.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a6da:	4b06      	ldr	r3, [pc, #24]	; (800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6e6:	d1ef      	bne.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3720      	adds	r7, #32
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	40023800 	.word	0x40023800

0800a6f8 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800a700:	2300      	movs	r3, #0
 800a702:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4a80      	ldr	r2, [pc, #512]	; (800a908 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800a708:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800a70a:	4b80      	ldr	r3, [pc, #512]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a70c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a710:	099b      	lsrs	r3, r3, #6
 800a712:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a71a:	4b7c      	ldr	r3, [pc, #496]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a71c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a720:	0c1b      	lsrs	r3, r3, #16
 800a722:	f003 0203 	and.w	r2, r3, #3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a72a:	4b78      	ldr	r3, [pc, #480]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a72c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a730:	0e1b      	lsrs	r3, r3, #24
 800a732:	f003 020f 	and.w	r2, r3, #15
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a73a:	4b74      	ldr	r3, [pc, #464]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a73c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a740:	0f1b      	lsrs	r3, r3, #28
 800a742:	f003 0207 	and.w	r2, r3, #7
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800a74a:	4b70      	ldr	r3, [pc, #448]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a74c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a750:	099b      	lsrs	r3, r3, #6
 800a752:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a75a:	4b6c      	ldr	r3, [pc, #432]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a75c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a760:	0c1b      	lsrs	r3, r3, #16
 800a762:	f003 0203 	and.w	r2, r3, #3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a76a:	4b68      	ldr	r3, [pc, #416]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a76c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a770:	0e1b      	lsrs	r3, r3, #24
 800a772:	f003 020f 	and.w	r2, r3, #15
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a77a:	4b64      	ldr	r3, [pc, #400]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a77c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a780:	0f1b      	lsrs	r3, r3, #28
 800a782:	f003 0207 	and.w	r2, r3, #7
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800a78a:	4b60      	ldr	r3, [pc, #384]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a78c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a790:	f003 021f 	and.w	r2, r3, #31
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800a798:	4b5c      	ldr	r3, [pc, #368]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a79a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a79e:	0a1b      	lsrs	r3, r3, #8
 800a7a0:	f003 021f 	and.w	r2, r3, #31
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800a7a8:	4b58      	ldr	r3, [pc, #352]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a7aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7ae:	0c1b      	lsrs	r3, r3, #16
 800a7b0:	f003 0203 	and.w	r2, r3, #3
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800a7b8:	4b54      	ldr	r3, [pc, #336]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a7ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7be:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800a7c6:	4b51      	ldr	r3, [pc, #324]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a7c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7cc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800a7d4:	4b4d      	ldr	r3, [pc, #308]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800a7e0:	4b4a      	ldr	r3, [pc, #296]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a7e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800a7ee:	4b47      	ldr	r3, [pc, #284]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a7f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7f4:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800a7fc:	4b43      	ldr	r3, [pc, #268]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a7fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a802:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800a80a:	4b40      	ldr	r3, [pc, #256]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a80c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a810:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800a818:	4b3c      	ldr	r3, [pc, #240]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a81a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a81e:	f003 0203 	and.w	r2, r3, #3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800a826:	4b39      	ldr	r3, [pc, #228]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a82c:	f003 020c 	and.w	r2, r3, #12
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800a834:	4b35      	ldr	r3, [pc, #212]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a83a:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800a842:	4b32      	ldr	r3, [pc, #200]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a848:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800a850:	4b2e      	ldr	r3, [pc, #184]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a856:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800a85e:	4b2b      	ldr	r3, [pc, #172]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a864:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800a86c:	4b27      	ldr	r3, [pc, #156]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a86e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a872:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800a87a:	4b24      	ldr	r3, [pc, #144]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a87c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a880:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a888:	4b20      	ldr	r3, [pc, #128]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a88a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a88e:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800a896:	4b1d      	ldr	r3, [pc, #116]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a89c:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800a8a4:	4b19      	ldr	r3, [pc, #100]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a8a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8aa:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800a8b2:	4b16      	ldr	r3, [pc, #88]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a8b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8b8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800a8c2:	4b12      	ldr	r3, [pc, #72]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a8ca:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800a8cc:	4b0f      	ldr	r3, [pc, #60]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a8ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8d0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	431a      	orrs	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800a8dc:	4b0b      	ldr	r3, [pc, #44]	; (800a90c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a8de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d103      	bne.n	800a8f2 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800a8f0:	e003      	b.n	800a8fa <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a8f8:	639a      	str	r2, [r3, #56]	; 0x38
}
 800a8fa:	bf00      	nop
 800a8fc:	3714      	adds	r7, #20
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	00fffff1 	.word	0x00fffff1
 800a90c:	40023800 	.word	0x40023800

0800a910 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a910:	b480      	push	{r7}
 800a912:	b087      	sub	sp, #28
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800a918:	2300      	movs	r3, #0
 800a91a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800a91c:	2300      	movs	r3, #0
 800a91e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800a920:	2300      	movs	r3, #0
 800a922:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a92e:	f040 808c 	bne.w	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800a932:	4b95      	ldr	r3, [pc, #596]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a938:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a940:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a948:	d07c      	beq.n	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a950:	d87d      	bhi.n	800aa4e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d004      	beq.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a95e:	d039      	beq.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800a960:	e075      	b.n	800aa4e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a962:	4b89      	ldr	r3, [pc, #548]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d108      	bne.n	800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a96e:	4b86      	ldr	r3, [pc, #536]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a976:	4a85      	ldr	r2, [pc, #532]	; (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a978:	fbb2 f3f3 	udiv	r3, r2, r3
 800a97c:	613b      	str	r3, [r7, #16]
 800a97e:	e007      	b.n	800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a980:	4b81      	ldr	r3, [pc, #516]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a988:	4a81      	ldr	r2, [pc, #516]	; (800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a98a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a98e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800a990:	4b7d      	ldr	r3, [pc, #500]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a996:	0e1b      	lsrs	r3, r3, #24
 800a998:	f003 030f 	and.w	r3, r3, #15
 800a99c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800a99e:	4b7a      	ldr	r3, [pc, #488]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a9a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9a4:	099b      	lsrs	r3, r3, #6
 800a9a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9aa:	693a      	ldr	r2, [r7, #16]
 800a9ac:	fb03 f202 	mul.w	r2, r3, r2
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9b6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800a9b8:	4b73      	ldr	r3, [pc, #460]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a9ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9be:	0a1b      	lsrs	r3, r3, #8
 800a9c0:	f003 031f 	and.w	r3, r3, #31
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a9c8:	697a      	ldr	r2, [r7, #20]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9d0:	617b      	str	r3, [r7, #20]
        break;
 800a9d2:	e03d      	b.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a9d4:	4b6c      	ldr	r3, [pc, #432]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d108      	bne.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a9e0:	4b69      	ldr	r3, [pc, #420]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9e8:	4a68      	ldr	r2, [pc, #416]	; (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a9ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ee:	613b      	str	r3, [r7, #16]
 800a9f0:	e007      	b.n	800aa02 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a9f2:	4b65      	ldr	r3, [pc, #404]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9fa:	4a65      	ldr	r2, [pc, #404]	; (800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a9fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa00:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800aa02:	4b61      	ldr	r3, [pc, #388]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa08:	0e1b      	lsrs	r3, r3, #24
 800aa0a:	f003 030f 	and.w	r3, r3, #15
 800aa0e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800aa10:	4b5d      	ldr	r3, [pc, #372]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa16:	099b      	lsrs	r3, r3, #6
 800aa18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa1c:	693a      	ldr	r2, [r7, #16]
 800aa1e:	fb03 f202 	mul.w	r2, r3, r2
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa28:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800aa2a:	4b57      	ldr	r3, [pc, #348]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa30:	f003 031f 	and.w	r3, r3, #31
 800aa34:	3301      	adds	r3, #1
 800aa36:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800aa38:	697a      	ldr	r2, [r7, #20]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa40:	617b      	str	r3, [r7, #20]
        break;
 800aa42:	e005      	b.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa44:	4b53      	ldr	r3, [pc, #332]	; (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800aa46:	617b      	str	r3, [r7, #20]
        break;
 800aa48:	e002      	b.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800aa4a:	bf00      	nop
 800aa4c:	e000      	b.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800aa4e:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa56:	f040 808c 	bne.w	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800aa5a:	4b4b      	ldr	r3, [pc, #300]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa60:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800aa68:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa70:	d07c      	beq.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa78:	d87d      	bhi.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d004      	beq.n	800aa8a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa86:	d039      	beq.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800aa88:	e075      	b.n	800ab76 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800aa8a:	4b3f      	ldr	r3, [pc, #252]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d108      	bne.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800aa96:	4b3c      	ldr	r3, [pc, #240]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa9e:	4a3b      	ldr	r2, [pc, #236]	; (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800aaa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaa4:	613b      	str	r3, [r7, #16]
 800aaa6:	e007      	b.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800aaa8:	4b37      	ldr	r3, [pc, #220]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aab0:	4a37      	ldr	r2, [pc, #220]	; (800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800aab2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aab6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800aab8:	4b33      	ldr	r3, [pc, #204]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aaba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aabe:	0e1b      	lsrs	r3, r3, #24
 800aac0:	f003 030f 	and.w	r3, r3, #15
 800aac4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800aac6:	4b30      	ldr	r3, [pc, #192]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aacc:	099b      	lsrs	r3, r3, #6
 800aace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aad2:	693a      	ldr	r2, [r7, #16]
 800aad4:	fb03 f202 	mul.w	r2, r3, r2
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	fbb2 f3f3 	udiv	r3, r2, r3
 800aade:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800aae0:	4b29      	ldr	r3, [pc, #164]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aae6:	0a1b      	lsrs	r3, r3, #8
 800aae8:	f003 031f 	and.w	r3, r3, #31
 800aaec:	3301      	adds	r3, #1
 800aaee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800aaf0:	697a      	ldr	r2, [r7, #20]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaf8:	617b      	str	r3, [r7, #20]
        break;
 800aafa:	e03d      	b.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800aafc:	4b22      	ldr	r3, [pc, #136]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d108      	bne.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ab08:	4b1f      	ldr	r3, [pc, #124]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab10:	4a1e      	ldr	r2, [pc, #120]	; (800ab8c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ab12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab16:	613b      	str	r3, [r7, #16]
 800ab18:	e007      	b.n	800ab2a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ab1a:	4b1b      	ldr	r3, [pc, #108]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab22:	4a1b      	ldr	r2, [pc, #108]	; (800ab90 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800ab24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab28:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800ab2a:	4b17      	ldr	r3, [pc, #92]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ab2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab30:	0e1b      	lsrs	r3, r3, #24
 800ab32:	f003 030f 	and.w	r3, r3, #15
 800ab36:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800ab38:	4b13      	ldr	r3, [pc, #76]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ab3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab3e:	099b      	lsrs	r3, r3, #6
 800ab40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab44:	693a      	ldr	r2, [r7, #16]
 800ab46:	fb03 f202 	mul.w	r2, r3, r2
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab50:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800ab52:	4b0d      	ldr	r3, [pc, #52]	; (800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ab54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab58:	f003 031f 	and.w	r3, r3, #31
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800ab60:	697a      	ldr	r2, [r7, #20]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab68:	617b      	str	r3, [r7, #20]
        break;
 800ab6a:	e005      	b.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab6c:	4b09      	ldr	r3, [pc, #36]	; (800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800ab6e:	617b      	str	r3, [r7, #20]
        break;
 800ab70:	e002      	b.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800ab72:	bf00      	nop
 800ab74:	e000      	b.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800ab76:	bf00      	nop

  return frequency;
 800ab78:	697b      	ldr	r3, [r7, #20]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	371c      	adds	r7, #28
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	40023800 	.word	0x40023800
 800ab8c:	00f42400 	.word	0x00f42400
 800ab90:	017d7840 	.word	0x017d7840
 800ab94:	00bb8000 	.word	0x00bb8000

0800ab98 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b088      	sub	sp, #32
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800aba0:	2300      	movs	r3, #0
 800aba2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800aba4:	2300      	movs	r3, #0
 800aba6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800aba8:	2300      	movs	r3, #0
 800abaa:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d101      	bne.n	800abb6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	e156      	b.n	800ae64 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d106      	bne.n	800abd0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 f997 	bl	800aefe <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2202      	movs	r2, #2
 800abd4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 fb99 	bl	800b310 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	2b02      	cmp	r3, #2
 800abe4:	d00c      	beq.n	800ac00 <HAL_SAI_Init+0x68>
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	d80d      	bhi.n	800ac06 <HAL_SAI_Init+0x6e>
 800abea:	2b00      	cmp	r3, #0
 800abec:	d002      	beq.n	800abf4 <HAL_SAI_Init+0x5c>
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d003      	beq.n	800abfa <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800abf2:	e008      	b.n	800ac06 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	61fb      	str	r3, [r7, #28]
      break;
 800abf8:	e006      	b.n	800ac08 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800abfa:	2310      	movs	r3, #16
 800abfc:	61fb      	str	r3, [r7, #28]
      break;
 800abfe:	e003      	b.n	800ac08 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800ac00:	2320      	movs	r3, #32
 800ac02:	61fb      	str	r3, [r7, #28]
      break;
 800ac04:	e000      	b.n	800ac08 <HAL_SAI_Init+0x70>
      break;
 800ac06:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	2b03      	cmp	r3, #3
 800ac0e:	d81e      	bhi.n	800ac4e <HAL_SAI_Init+0xb6>
 800ac10:	a201      	add	r2, pc, #4	; (adr r2, 800ac18 <HAL_SAI_Init+0x80>)
 800ac12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac16:	bf00      	nop
 800ac18:	0800ac29 	.word	0x0800ac29
 800ac1c:	0800ac2f 	.word	0x0800ac2f
 800ac20:	0800ac37 	.word	0x0800ac37
 800ac24:	0800ac3f 	.word	0x0800ac3f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	617b      	str	r3, [r7, #20]
    }
    break;
 800ac2c:	e010      	b.n	800ac50 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800ac2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac32:	617b      	str	r3, [r7, #20]
    }
    break;
 800ac34:	e00c      	b.n	800ac50 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ac36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac3a:	617b      	str	r3, [r7, #20]
    }
    break;
 800ac3c:	e008      	b.n	800ac50 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800ac3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ac42:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	f043 0301 	orr.w	r3, r3, #1
 800ac4a:	61fb      	str	r3, [r7, #28]
    }
    break;
 800ac4c:	e000      	b.n	800ac50 <HAL_SAI_Init+0xb8>
    default:
      break;
 800ac4e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a85      	ldr	r2, [pc, #532]	; (800ae6c <HAL_SAI_Init+0x2d4>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d004      	beq.n	800ac64 <HAL_SAI_Init+0xcc>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a84      	ldr	r2, [pc, #528]	; (800ae70 <HAL_SAI_Init+0x2d8>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d103      	bne.n	800ac6c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800ac64:	4a83      	ldr	r2, [pc, #524]	; (800ae74 <HAL_SAI_Init+0x2dc>)
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	6013      	str	r3, [r2, #0]
 800ac6a:	e002      	b.n	800ac72 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800ac6c:	4a82      	ldr	r2, [pc, #520]	; (800ae78 <HAL_SAI_Init+0x2e0>)
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	69db      	ldr	r3, [r3, #28]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d04c      	beq.n	800ad14 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a7a      	ldr	r2, [pc, #488]	; (800ae6c <HAL_SAI_Init+0x2d4>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d004      	beq.n	800ac92 <HAL_SAI_Init+0xfa>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a78      	ldr	r2, [pc, #480]	; (800ae70 <HAL_SAI_Init+0x2d8>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d104      	bne.n	800ac9c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800ac92:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ac96:	f7ff fe3b 	bl	800a910 <HAL_RCCEx_GetPeriphCLKFreq>
 800ac9a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a76      	ldr	r2, [pc, #472]	; (800ae7c <HAL_SAI_Init+0x2e4>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d004      	beq.n	800acb0 <HAL_SAI_Init+0x118>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a75      	ldr	r2, [pc, #468]	; (800ae80 <HAL_SAI_Init+0x2e8>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d104      	bne.n	800acba <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800acb0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800acb4:	f7ff fe2c 	bl	800a910 <HAL_RCCEx_GetPeriphCLKFreq>
 800acb8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800acba:	693a      	ldr	r2, [r7, #16]
 800acbc:	4613      	mov	r3, r2
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	005b      	lsls	r3, r3, #1
 800acc4:	461a      	mov	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	69db      	ldr	r3, [r3, #28]
 800acca:	025b      	lsls	r3, r3, #9
 800accc:	fbb2 f3f3 	udiv	r3, r2, r3
 800acd0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	4a6b      	ldr	r2, [pc, #428]	; (800ae84 <HAL_SAI_Init+0x2ec>)
 800acd6:	fba2 2303 	umull	r2, r3, r2, r3
 800acda:	08da      	lsrs	r2, r3, #3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800ace0:	68f9      	ldr	r1, [r7, #12]
 800ace2:	4b68      	ldr	r3, [pc, #416]	; (800ae84 <HAL_SAI_Init+0x2ec>)
 800ace4:	fba3 2301 	umull	r2, r3, r3, r1
 800ace8:	08da      	lsrs	r2, r3, #3
 800acea:	4613      	mov	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4413      	add	r3, r2
 800acf0:	005b      	lsls	r3, r3, #1
 800acf2:	1aca      	subs	r2, r1, r3
 800acf4:	2a08      	cmp	r2, #8
 800acf6:	d904      	bls.n	800ad02 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6a1b      	ldr	r3, [r3, #32]
 800acfc:	1c5a      	adds	r2, r3, #1
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad06:	2b04      	cmp	r3, #4
 800ad08:	d104      	bne.n	800ad14 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a1b      	ldr	r3, [r3, #32]
 800ad0e:	085a      	lsrs	r2, r3, #1
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d003      	beq.n	800ad24 <HAL_SAI_Init+0x18c>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d109      	bne.n	800ad38 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d101      	bne.n	800ad30 <HAL_SAI_Init+0x198>
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	e001      	b.n	800ad34 <HAL_SAI_Init+0x19c>
 800ad30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad34:	61bb      	str	r3, [r7, #24]
 800ad36:	e008      	b.n	800ad4a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d102      	bne.n	800ad46 <HAL_SAI_Init+0x1ae>
 800ad40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad44:	e000      	b.n	800ad48 <HAL_SAI_Init+0x1b0>
 800ad46:	2300      	movs	r3, #0
 800ad48:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	6819      	ldr	r1, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	4b4c      	ldr	r3, [pc, #304]	; (800ae88 <HAL_SAI_Init+0x2f0>)
 800ad56:	400b      	ands	r3, r1
 800ad58:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	6819      	ldr	r1, [r3, #0]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	685a      	ldr	r2, [r3, #4]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad68:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad6e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad74:	431a      	orrs	r2, r3
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800ad82:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ad8e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6a1b      	ldr	r3, [r3, #32]
 800ad94:	051b      	lsls	r3, r3, #20
 800ad96:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	430a      	orrs	r2, r1
 800ad9e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	6859      	ldr	r1, [r3, #4]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	4b38      	ldr	r3, [pc, #224]	; (800ae8c <HAL_SAI_Init+0x2f4>)
 800adac:	400b      	ands	r3, r1
 800adae:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	6859      	ldr	r1, [r3, #4]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	699a      	ldr	r2, [r3, #24]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adbe:	431a      	orrs	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc4:	431a      	orrs	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	430a      	orrs	r2, r1
 800adcc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	6899      	ldr	r1, [r3, #8]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	4b2d      	ldr	r3, [pc, #180]	; (800ae90 <HAL_SAI_Init+0x2f8>)
 800adda:	400b      	ands	r3, r1
 800addc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	6899      	ldr	r1, [r3, #8]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800adee:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800adf4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800adfa:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae00:	3b01      	subs	r3, #1
 800ae02:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ae04:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	430a      	orrs	r2, r1
 800ae0c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	68d9      	ldr	r1, [r3, #12]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	f24f 0320 	movw	r3, #61472	; 0xf020
 800ae1c:	400b      	ands	r3, r1
 800ae1e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	68d9      	ldr	r1, [r3, #12]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae2e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae34:	041b      	lsls	r3, r3, #16
 800ae36:	431a      	orrs	r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	021b      	lsls	r3, r3, #8
 800ae40:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	430a      	orrs	r2, r1
 800ae48:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2201      	movs	r2, #1
 800ae56:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3720      	adds	r7, #32
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	40015804 	.word	0x40015804
 800ae70:	40015824 	.word	0x40015824
 800ae74:	40015800 	.word	0x40015800
 800ae78:	40015c00 	.word	0x40015c00
 800ae7c:	40015c04 	.word	0x40015c04
 800ae80:	40015c24 	.word	0x40015c24
 800ae84:	cccccccd 	.word	0xcccccccd
 800ae88:	ff05c010 	.word	0xff05c010
 800ae8c:	ffff1ff0 	.word	0xffff1ff0
 800ae90:	fff88000 	.word	0xfff88000

0800ae94 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d101      	bne.n	800aea6 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800aea2:	2301      	movs	r3, #1
 800aea4:	e027      	b.n	800aef6 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2202      	movs	r2, #2
 800aeaa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f04f 32ff 	mov.w	r2, #4294967295
 800aebe:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fa25 	bl	800b310 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	685a      	ldr	r2, [r3, #4]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f042 0208 	orr.w	r2, r2, #8
 800aed4:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 f81b 	bl	800af12 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <HAL_SAI_MspInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 800aefe:	b480      	push	{r7}
 800af00:	b083      	sub	sp, #12
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 800af06:	bf00      	nop
 800af08:	370c      	adds	r7, #12
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <HAL_SAI_MspDeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai)
{
 800af12:	b480      	push	{r7}
 800af14:	b083      	sub	sp, #12
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspDeInit could be implemented in the user file
   */
}
 800af1a:	bf00      	nop
 800af1c:	370c      	adds	r7, #12
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr

0800af26 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b084      	sub	sp, #16
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af2e:	2300      	movs	r3, #0
 800af30:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d101      	bne.n	800af40 <HAL_SAI_DMAStop+0x1a>
 800af3c:	2302      	movs	r3, #2
 800af3e:	e061      	b.n	800b004 <HAL_SAI_DMAStop+0xde>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800af56:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d01c      	beq.n	800af9a <HAL_SAI_DMAStop+0x74>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800af66:	b2db      	uxtb	r3, r3
 800af68:	2b12      	cmp	r3, #18
 800af6a:	d116      	bne.n	800af9a <HAL_SAI_DMAStop+0x74>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af70:	4618      	mov	r0, r3
 800af72:	f7fc f9d3 	bl	800731c <HAL_DMA_Abort>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00e      	beq.n	800af9a <HAL_SAI_DMAStop+0x74>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af82:	2b80      	cmp	r3, #128	; 0x80
 800af84:	d009      	beq.n	800af9a <HAL_SAI_DMAStop+0x74>
      {
        status = HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d01c      	beq.n	800afdc <HAL_SAI_DMAStop+0xb6>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	2b22      	cmp	r3, #34	; 0x22
 800afac:	d116      	bne.n	800afdc <HAL_SAI_DMAStop+0xb6>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fc f9b2 	bl	800731c <HAL_DMA_Abort>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00e      	beq.n	800afdc <HAL_SAI_DMAStop+0xb6>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afc4:	2b80      	cmp	r3, #128	; 0x80
 800afc6:	d009      	beq.n	800afdc <HAL_SAI_DMAStop+0xb6>
      {
        status = HAL_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afd2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
  }

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 f997 	bl	800b310 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	685a      	ldr	r2, [r3, #4]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f042 0208 	orr.w	r2, r2, #8
 800aff0:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2201      	movs	r2, #1
 800aff6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return status;
 800b002:	7bfb      	ldrb	r3, [r7, #15]
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b086      	sub	sp, #24
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	4613      	mov	r3, r2
 800b018:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800b01a:	f7fb fe15 	bl	8006c48 <HAL_GetTick>
 800b01e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d002      	beq.n	800b02c <HAL_SAI_Transmit_DMA+0x20>
 800b026:	88fb      	ldrh	r3, [r7, #6]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d101      	bne.n	800b030 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800b02c:	2301      	movs	r3, #1
 800b02e:	e093      	b.n	800b158 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800b036:	b2db      	uxtb	r3, r3
 800b038:	2b01      	cmp	r3, #1
 800b03a:	f040 808c 	bne.w	800b156 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b044:	2b01      	cmp	r3, #1
 800b046:	d101      	bne.n	800b04c <HAL_SAI_Transmit_DMA+0x40>
 800b048:	2302      	movs	r3, #2
 800b04a:	e085      	b.n	800b158 <HAL_SAI_Transmit_DMA+0x14c>
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	68ba      	ldr	r2, [r7, #8]
 800b058:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	88fa      	ldrh	r2, [r7, #6]
 800b05e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	88fa      	ldrh	r2, [r7, #6]
 800b066:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2212      	movs	r2, #18
 800b076:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b07e:	4a38      	ldr	r2, [pc, #224]	; (800b160 <HAL_SAI_Transmit_DMA+0x154>)
 800b080:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b086:	4a37      	ldr	r2, [pc, #220]	; (800b164 <HAL_SAI_Transmit_DMA+0x158>)
 800b088:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b08e:	4a36      	ldr	r2, [pc, #216]	; (800b168 <HAL_SAI_Transmit_DMA+0x15c>)
 800b090:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b096:	2200      	movs	r2, #0
 800b098:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	331c      	adds	r3, #28
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b0b2:	f7fc f8d3 	bl	800725c <HAL_DMA_Start_IT>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d005      	beq.n	800b0c8 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	e047      	b.n	800b158 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	68f8      	ldr	r0, [r7, #12]
 800b0cc:	f000 f8ea 	bl	800b2a4 <SAI_InterruptFlag>
 800b0d0:	4601      	mov	r1, r0
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	691a      	ldr	r2, [r3, #16]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	430a      	orrs	r2, r1
 800b0de:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b0ee:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b0f0:	e015      	b.n	800b11e <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800b0f2:	f7fb fda9 	bl	8006c48 <HAL_GetTick>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b100:	d90d      	bls.n	800b11e <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b108:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b11a:	2303      	movs	r3, #3
 800b11c:	e01c      	b.n	800b158 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	695b      	ldr	r3, [r3, #20]
 800b124:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d0e2      	beq.n	800b0f2 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b136:	2b00      	cmp	r3, #0
 800b138:	d107      	bne.n	800b14a <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b148:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2200      	movs	r2, #0
 800b14e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800b152:	2300      	movs	r3, #0
 800b154:	e000      	b.n	800b158 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800b156:	2302      	movs	r3, #2
  }
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3718      	adds	r7, #24
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	0800b3e1 	.word	0x0800b3e1
 800b164:	0800b381 	.word	0x0800b381
 800b168:	0800b479 	.word	0x0800b479

0800b16c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	4613      	mov	r3, r2
 800b178:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d002      	beq.n	800b186 <HAL_SAI_Receive_DMA+0x1a>
 800b180:	88fb      	ldrh	r3, [r7, #6]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d101      	bne.n	800b18a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800b186:	2301      	movs	r3, #1
 800b188:	e074      	b.n	800b274 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800b190:	b2db      	uxtb	r3, r3
 800b192:	2b01      	cmp	r3, #1
 800b194:	d16d      	bne.n	800b272 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d101      	bne.n	800b1a4 <HAL_SAI_Receive_DMA+0x38>
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	e067      	b.n	800b274 <HAL_SAI_Receive_DMA+0x108>
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	88fa      	ldrh	r2, [r7, #6]
 800b1b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	88fa      	ldrh	r2, [r7, #6]
 800b1be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2222      	movs	r2, #34	; 0x22
 800b1ce:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1d6:	4a29      	ldr	r2, [pc, #164]	; (800b27c <HAL_SAI_Receive_DMA+0x110>)
 800b1d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1de:	4a28      	ldr	r2, [pc, #160]	; (800b280 <HAL_SAI_Receive_DMA+0x114>)
 800b1e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1e6:	4a27      	ldr	r2, [pc, #156]	; (800b284 <HAL_SAI_Receive_DMA+0x118>)
 800b1e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	331c      	adds	r3, #28
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b202:	461a      	mov	r2, r3
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b20a:	f7fc f827 	bl	800725c <HAL_DMA_Start_IT>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d005      	beq.n	800b220 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2200      	movs	r2, #0
 800b218:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	e029      	b.n	800b274 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b220:	2100      	movs	r1, #0
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f000 f83e 	bl	800b2a4 <SAI_InterruptFlag>
 800b228:	4601      	mov	r1, r0
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	691a      	ldr	r2, [r3, #16]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	430a      	orrs	r2, r1
 800b236:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b246:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b252:	2b00      	cmp	r3, #0
 800b254:	d107      	bne.n	800b266 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b264:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800b26e:	2300      	movs	r3, #0
 800b270:	e000      	b.n	800b274 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800b272:	2302      	movs	r3, #2
  }
}
 800b274:	4618      	mov	r0, r3
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	0800b45d 	.word	0x0800b45d
 800b280:	0800b3fd 	.word	0x0800b3fd
 800b284:	0800b479 	.word	0x0800b479

0800b288 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800b296:	b2db      	uxtb	r3, r3
}
 800b298:	4618      	mov	r0, r3
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b085      	sub	sp, #20
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d103      	bne.n	800b2c0 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f043 0308 	orr.w	r3, r3, #8
 800b2be:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c4:	2b08      	cmp	r3, #8
 800b2c6:	d10b      	bne.n	800b2e0 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800b2cc:	2b03      	cmp	r3, #3
 800b2ce:	d003      	beq.n	800b2d8 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d103      	bne.n	800b2e0 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f043 0310 	orr.w	r3, r3, #16
 800b2de:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	2b03      	cmp	r3, #3
 800b2e6:	d003      	beq.n	800b2f0 <SAI_InterruptFlag+0x4c>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	d104      	bne.n	800b2fa <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b2f6:	60fb      	str	r3, [r7, #12]
 800b2f8:	e003      	b.n	800b302 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f043 0304 	orr.w	r3, r3, #4
 800b300:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800b302:	68fb      	ldr	r3, [r7, #12]
}
 800b304:	4618      	mov	r0, r3
 800b306:	3714      	adds	r7, #20
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b310:	b480      	push	{r7}
 800b312:	b085      	sub	sp, #20
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800b318:	4b17      	ldr	r3, [pc, #92]	; (800b378 <SAI_Disable+0x68>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a17      	ldr	r2, [pc, #92]	; (800b37c <SAI_Disable+0x6c>)
 800b31e:	fba2 2303 	umull	r2, r3, r2, r3
 800b322:	0b1b      	lsrs	r3, r3, #12
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b328:	2300      	movs	r3, #0
 800b32a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b33a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	1e5a      	subs	r2, r3, #1
 800b340:	60fa      	str	r2, [r7, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10a      	bne.n	800b35c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b34c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800b356:	2303      	movs	r3, #3
 800b358:	72fb      	strb	r3, [r7, #11]
      break;
 800b35a:	e006      	b.n	800b36a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1e8      	bne.n	800b33c <SAI_Disable+0x2c>

  return status;
 800b36a:	7afb      	ldrb	r3, [r7, #11]
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3714      	adds	r7, #20
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr
 800b378:	20000254 	.word	0x20000254
 800b37c:	95cbec1b 	.word	0x95cbec1b

0800b380 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b38c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	69db      	ldr	r3, [r3, #28]
 800b392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b396:	d01c      	beq.n	800b3d2 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b3ae:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f7ff ff76 	bl	800b2a4 <SAI_InterruptFlag>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	43d9      	mvns	r1, r3
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	691a      	ldr	r2, [r3, #16]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	400a      	ands	r2, r1
 800b3c8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f7f8 fc68 	bl	8003ca8 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800b3d8:	bf00      	nop
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f7f8 fc64 	bl	8003cbc <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800b3f4:	bf00      	nop
 800b3f6:	3710      	adds	r7, #16
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b408:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	69db      	ldr	r3, [r3, #28]
 800b40e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b412:	d01c      	beq.n	800b44e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b422:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2200      	movs	r2, #0
 800b428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800b42c:	2100      	movs	r1, #0
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	f7ff ff38 	bl	800b2a4 <SAI_InterruptFlag>
 800b434:	4603      	mov	r3, r0
 800b436:	43d9      	mvns	r1, r3
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	691a      	ldr	r2, [r3, #16]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	400a      	ands	r2, r1
 800b444:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2201      	movs	r2, #1
 800b44a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f7f8 fef0 	bl	8004234 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800b454:	bf00      	nop
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b468:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	f7f8 feec 	bl	8004248 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800b470:	bf00      	nop
 800b472:	3710      	adds	r7, #16
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b484:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b48c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b49a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d004      	beq.n	800b4aa <SAI_DMAError+0x32>
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d112      	bne.n	800b4d0 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b4b8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800b4ba:	68f8      	ldr	r0, [r7, #12]
 800b4bc:	f7ff ff28 	bl	800b310 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f7f8 fbfd 	bl	8003cd0 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800b4d6:	bf00      	nop
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b082      	sub	sp, #8
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
 800b4e6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d101      	bne.n	800b4f2 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e025      	b.n	800b53e <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d106      	bne.n	800b50c <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f81d 	bl	800b546 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2202      	movs	r2, #2
 800b510:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	3304      	adds	r3, #4
 800b51c:	4619      	mov	r1, r3
 800b51e:	4610      	mov	r0, r2
 800b520:	f001 f856 	bl	800c5d0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6818      	ldr	r0, [r3, #0]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	461a      	mov	r2, r3
 800b52e:	6839      	ldr	r1, [r7, #0]
 800b530:	f001 f8aa 	bl	800c688 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2201      	movs	r2, #1
 800b538:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3708      	adds	r7, #8
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800b546:	b480      	push	{r7}
 800b548:	b083      	sub	sp, #12
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800b54e:	bf00      	nop
 800b550:	370c      	adds	r7, #12
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr

0800b55a <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	b086      	sub	sp, #24
 800b55e:	af00      	add	r7, sp, #0
 800b560:	60f8      	str	r0, [r7, #12]
 800b562:	60b9      	str	r1, [r7, #8]
 800b564:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b56c:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b56e:	7dfb      	ldrb	r3, [r7, #23]
 800b570:	2b02      	cmp	r3, #2
 800b572:	d101      	bne.n	800b578 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b574:	2302      	movs	r3, #2
 800b576:	e021      	b.n	800b5bc <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b578:	7dfb      	ldrb	r3, [r7, #23]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d002      	beq.n	800b584 <HAL_SDRAM_SendCommand+0x2a>
 800b57e:	7dfb      	ldrb	r3, [r7, #23]
 800b580:	2b05      	cmp	r3, #5
 800b582:	d118      	bne.n	800b5b6 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2202      	movs	r2, #2
 800b588:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	687a      	ldr	r2, [r7, #4]
 800b592:	68b9      	ldr	r1, [r7, #8]
 800b594:	4618      	mov	r0, r3
 800b596:	f001 f8e1 	bl	800c75c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b02      	cmp	r3, #2
 800b5a0:	d104      	bne.n	800b5ac <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2205      	movs	r2, #5
 800b5a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b5aa:	e006      	b.n	800b5ba <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b5b4:	e001      	b.n	800b5ba <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e000      	b.n	800b5bc <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3718      	adds	r7, #24
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d101      	bne.n	800b5de <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b5da:	2302      	movs	r3, #2
 800b5dc:	e016      	b.n	800b60c <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d10f      	bne.n	800b60a <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2202      	movs	r2, #2
 800b5ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	6839      	ldr	r1, [r7, #0]
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f001 f8d3 	bl	800c7a4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2201      	movs	r2, #1
 800b602:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b606:	2300      	movs	r3, #0
 800b608:	e000      	b.n	800b60c <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b60a:	2301      	movs	r3, #1
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3708      	adds	r7, #8
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d101      	bne.n	800b626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b622:	2301      	movs	r3, #1
 800b624:	e040      	b.n	800b6a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d106      	bne.n	800b63c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7f6 f8ae 	bl	8001798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2224      	movs	r2, #36	; 0x24
 800b640:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f022 0201 	bic.w	r2, r2, #1
 800b650:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 fb14 	bl	800bc80 <UART_SetConfig>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d101      	bne.n	800b662 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	e022      	b.n	800b6a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b666:	2b00      	cmp	r3, #0
 800b668:	d002      	beq.n	800b670 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 fd6c 	bl	800c148 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b67e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	689a      	ldr	r2, [r3, #8]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b68e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f042 0201 	orr.w	r2, r2, #1
 800b69e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 fdf3 	bl	800c28c <UART_CheckIdleState>
 800b6a6:	4603      	mov	r3, r0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3708      	adds	r7, #8
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b0ba      	sub	sp, #232	; 0xe8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	69db      	ldr	r3, [r3, #28]
 800b6be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b6d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b6da:	f640 030f 	movw	r3, #2063	; 0x80f
 800b6de:	4013      	ands	r3, r2
 800b6e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b6e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d115      	bne.n	800b718 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b6ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6f0:	f003 0320 	and.w	r3, r3, #32
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00f      	beq.n	800b718 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b6f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6fc:	f003 0320 	and.w	r3, r3, #32
 800b700:	2b00      	cmp	r3, #0
 800b702:	d009      	beq.n	800b718 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f000 8297 	beq.w	800bc3c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	4798      	blx	r3
      }
      return;
 800b716:	e291      	b.n	800bc3c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b718:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	f000 8117 	beq.w	800b950 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b726:	f003 0301 	and.w	r3, r3, #1
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d106      	bne.n	800b73c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b72e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b732:	4b85      	ldr	r3, [pc, #532]	; (800b948 <HAL_UART_IRQHandler+0x298>)
 800b734:	4013      	ands	r3, r2
 800b736:	2b00      	cmp	r3, #0
 800b738:	f000 810a 	beq.w	800b950 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b73c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b740:	f003 0301 	and.w	r3, r3, #1
 800b744:	2b00      	cmp	r3, #0
 800b746:	d011      	beq.n	800b76c <HAL_UART_IRQHandler+0xbc>
 800b748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b74c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00b      	beq.n	800b76c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	2201      	movs	r2, #1
 800b75a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b762:	f043 0201 	orr.w	r2, r3, #1
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b76c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b770:	f003 0302 	and.w	r3, r3, #2
 800b774:	2b00      	cmp	r3, #0
 800b776:	d011      	beq.n	800b79c <HAL_UART_IRQHandler+0xec>
 800b778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b77c:	f003 0301 	and.w	r3, r3, #1
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00b      	beq.n	800b79c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2202      	movs	r2, #2
 800b78a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b792:	f043 0204 	orr.w	r2, r3, #4
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b79c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7a0:	f003 0304 	and.w	r3, r3, #4
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d011      	beq.n	800b7cc <HAL_UART_IRQHandler+0x11c>
 800b7a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7ac:	f003 0301 	and.w	r3, r3, #1
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d00b      	beq.n	800b7cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2204      	movs	r2, #4
 800b7ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7c2:	f043 0202 	orr.w	r2, r3, #2
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b7cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7d0:	f003 0308 	and.w	r3, r3, #8
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d017      	beq.n	800b808 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b7d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7dc:	f003 0320 	and.w	r3, r3, #32
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d105      	bne.n	800b7f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b7e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d00b      	beq.n	800b808 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2208      	movs	r2, #8
 800b7f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7fe:	f043 0208 	orr.w	r2, r3, #8
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b80c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b810:	2b00      	cmp	r3, #0
 800b812:	d012      	beq.n	800b83a <HAL_UART_IRQHandler+0x18a>
 800b814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b818:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d00c      	beq.n	800b83a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b828:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b830:	f043 0220 	orr.w	r2, r3, #32
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b840:	2b00      	cmp	r3, #0
 800b842:	f000 81fd 	beq.w	800bc40 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b84a:	f003 0320 	and.w	r3, r3, #32
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d00d      	beq.n	800b86e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b856:	f003 0320 	and.w	r3, r3, #32
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d007      	beq.n	800b86e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b862:	2b00      	cmp	r3, #0
 800b864:	d003      	beq.n	800b86e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b874:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b882:	2b40      	cmp	r3, #64	; 0x40
 800b884:	d005      	beq.n	800b892 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b886:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b88a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d04f      	beq.n	800b932 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 fdf7 	bl	800c486 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8a2:	2b40      	cmp	r3, #64	; 0x40
 800b8a4:	d141      	bne.n	800b92a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	3308      	adds	r3, #8
 800b8ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b8b4:	e853 3f00 	ldrex	r3, [r3]
 800b8b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b8bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b8c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	3308      	adds	r3, #8
 800b8ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b8d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b8d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b8de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b8e2:	e841 2300 	strex	r3, r2, [r1]
 800b8e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b8ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1d9      	bne.n	800b8a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d013      	beq.n	800b922 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8fe:	4a13      	ldr	r2, [pc, #76]	; (800b94c <HAL_UART_IRQHandler+0x29c>)
 800b900:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b906:	4618      	mov	r0, r3
 800b908:	f7fb fd78 	bl	80073fc <HAL_DMA_Abort_IT>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d017      	beq.n	800b942 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b91c:	4610      	mov	r0, r2
 800b91e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b920:	e00f      	b.n	800b942 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 f996 	bl	800bc54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b928:	e00b      	b.n	800b942 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 f992 	bl	800bc54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b930:	e007      	b.n	800b942 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 f98e 	bl	800bc54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800b940:	e17e      	b.n	800bc40 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b942:	bf00      	nop
    return;
 800b944:	e17c      	b.n	800bc40 <HAL_UART_IRQHandler+0x590>
 800b946:	bf00      	nop
 800b948:	04000120 	.word	0x04000120
 800b94c:	0800c54f 	.word	0x0800c54f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b954:	2b01      	cmp	r3, #1
 800b956:	f040 814c 	bne.w	800bbf2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b95a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b95e:	f003 0310 	and.w	r3, r3, #16
 800b962:	2b00      	cmp	r3, #0
 800b964:	f000 8145 	beq.w	800bbf2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b96c:	f003 0310 	and.w	r3, r3, #16
 800b970:	2b00      	cmp	r3, #0
 800b972:	f000 813e 	beq.w	800bbf2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	2210      	movs	r2, #16
 800b97c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b988:	2b40      	cmp	r3, #64	; 0x40
 800b98a:	f040 80b6 	bne.w	800bafa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b99a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f000 8150 	beq.w	800bc44 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b9aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	f080 8148 	bcs.w	800bc44 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b9ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9c2:	69db      	ldr	r3, [r3, #28]
 800b9c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9c8:	f000 8086 	beq.w	800bad8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b9d8:	e853 3f00 	ldrex	r3, [r3]
 800b9dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b9e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b9e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b9f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b9fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ba02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ba06:	e841 2300 	strex	r3, r2, [r1]
 800ba0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ba0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d1da      	bne.n	800b9cc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	3308      	adds	r3, #8
 800ba1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba20:	e853 3f00 	ldrex	r3, [r3]
 800ba24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ba26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba28:	f023 0301 	bic.w	r3, r3, #1
 800ba2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	3308      	adds	r3, #8
 800ba36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ba3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ba3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ba42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ba46:	e841 2300 	strex	r3, r2, [r1]
 800ba4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ba4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1e1      	bne.n	800ba16 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	3308      	adds	r3, #8
 800ba58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba5c:	e853 3f00 	ldrex	r3, [r3]
 800ba60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ba62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	3308      	adds	r3, #8
 800ba72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ba76:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ba78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ba7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ba7e:	e841 2300 	strex	r3, r2, [r1]
 800ba82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ba84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1e3      	bne.n	800ba52 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2220      	movs	r2, #32
 800ba8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baa0:	e853 3f00 	ldrex	r3, [r3]
 800baa4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800baa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baa8:	f023 0310 	bic.w	r3, r3, #16
 800baac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	461a      	mov	r2, r3
 800bab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800baba:	65bb      	str	r3, [r7, #88]	; 0x58
 800babc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800babe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bac0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bac2:	e841 2300 	strex	r3, r2, [r1]
 800bac6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d1e4      	bne.n	800ba98 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fb fc22 	bl	800731c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2202      	movs	r2, #2
 800badc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800baea:	b29b      	uxth	r3, r3
 800baec:	1ad3      	subs	r3, r2, r3
 800baee:	b29b      	uxth	r3, r3
 800baf0:	4619      	mov	r1, r3
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 f8b8 	bl	800bc68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800baf8:	e0a4      	b.n	800bc44 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	1ad3      	subs	r3, r2, r3
 800bb0a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	f000 8096 	beq.w	800bc48 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800bb1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 8091 	beq.w	800bc48 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2e:	e853 3f00 	ldrex	r3, [r3]
 800bb32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	461a      	mov	r2, r3
 800bb44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bb48:	647b      	str	r3, [r7, #68]	; 0x44
 800bb4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb50:	e841 2300 	strex	r3, r2, [r1]
 800bb54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bb56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1e4      	bne.n	800bb26 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	3308      	adds	r3, #8
 800bb62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb66:	e853 3f00 	ldrex	r3, [r3]
 800bb6a:	623b      	str	r3, [r7, #32]
   return(result);
 800bb6c:	6a3b      	ldr	r3, [r7, #32]
 800bb6e:	f023 0301 	bic.w	r3, r3, #1
 800bb72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	3308      	adds	r3, #8
 800bb7c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bb80:	633a      	str	r2, [r7, #48]	; 0x30
 800bb82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb88:	e841 2300 	strex	r3, r2, [r1]
 800bb8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d1e3      	bne.n	800bb5c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2220      	movs	r2, #32
 800bb98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	e853 3f00 	ldrex	r3, [r3]
 800bbb4:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f023 0310 	bic.w	r3, r3, #16
 800bbbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bbca:	61fb      	str	r3, [r7, #28]
 800bbcc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbce:	69b9      	ldr	r1, [r7, #24]
 800bbd0:	69fa      	ldr	r2, [r7, #28]
 800bbd2:	e841 2300 	strex	r3, r2, [r1]
 800bbd6:	617b      	str	r3, [r7, #20]
   return(result);
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1e4      	bne.n	800bba8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2202      	movs	r2, #2
 800bbe2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bbe4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bbe8:	4619      	mov	r1, r3
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f83c 	bl	800bc68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bbf0:	e02a      	b.n	800bc48 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bbf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00e      	beq.n	800bc1c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bbfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d008      	beq.n	800bc1c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d01c      	beq.n	800bc4c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	4798      	blx	r3
    }
    return;
 800bc1a:	e017      	b.n	800bc4c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bc1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d012      	beq.n	800bc4e <HAL_UART_IRQHandler+0x59e>
 800bc28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d00c      	beq.n	800bc4e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 fca0 	bl	800c57a <UART_EndTransmit_IT>
    return;
 800bc3a:	e008      	b.n	800bc4e <HAL_UART_IRQHandler+0x59e>
      return;
 800bc3c:	bf00      	nop
 800bc3e:	e006      	b.n	800bc4e <HAL_UART_IRQHandler+0x59e>
    return;
 800bc40:	bf00      	nop
 800bc42:	e004      	b.n	800bc4e <HAL_UART_IRQHandler+0x59e>
      return;
 800bc44:	bf00      	nop
 800bc46:	e002      	b.n	800bc4e <HAL_UART_IRQHandler+0x59e>
      return;
 800bc48:	bf00      	nop
 800bc4a:	e000      	b.n	800bc4e <HAL_UART_IRQHandler+0x59e>
    return;
 800bc4c:	bf00      	nop
  }

}
 800bc4e:	37e8      	adds	r7, #232	; 0xe8
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bc5c:	bf00      	nop
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	460b      	mov	r3, r1
 800bc72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bc74:	bf00      	nop
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b088      	sub	sp, #32
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	689a      	ldr	r2, [r3, #8]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	431a      	orrs	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	695b      	ldr	r3, [r3, #20]
 800bc9a:	431a      	orrs	r2, r3
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	69db      	ldr	r3, [r3, #28]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	4ba6      	ldr	r3, [pc, #664]	; (800bf44 <UART_SetConfig+0x2c4>)
 800bcac:	4013      	ands	r3, r2
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	6812      	ldr	r2, [r2, #0]
 800bcb2:	6979      	ldr	r1, [r7, #20]
 800bcb4:	430b      	orrs	r3, r1
 800bcb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	68da      	ldr	r2, [r3, #12]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	430a      	orrs	r2, r1
 800bccc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	699b      	ldr	r3, [r3, #24]
 800bcd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a1b      	ldr	r3, [r3, #32]
 800bcd8:	697a      	ldr	r2, [r7, #20]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	697a      	ldr	r2, [r7, #20]
 800bcee:	430a      	orrs	r2, r1
 800bcf0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a94      	ldr	r2, [pc, #592]	; (800bf48 <UART_SetConfig+0x2c8>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d120      	bne.n	800bd3e <UART_SetConfig+0xbe>
 800bcfc:	4b93      	ldr	r3, [pc, #588]	; (800bf4c <UART_SetConfig+0x2cc>)
 800bcfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd02:	f003 0303 	and.w	r3, r3, #3
 800bd06:	2b03      	cmp	r3, #3
 800bd08:	d816      	bhi.n	800bd38 <UART_SetConfig+0xb8>
 800bd0a:	a201      	add	r2, pc, #4	; (adr r2, 800bd10 <UART_SetConfig+0x90>)
 800bd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd10:	0800bd21 	.word	0x0800bd21
 800bd14:	0800bd2d 	.word	0x0800bd2d
 800bd18:	0800bd27 	.word	0x0800bd27
 800bd1c:	0800bd33 	.word	0x0800bd33
 800bd20:	2301      	movs	r3, #1
 800bd22:	77fb      	strb	r3, [r7, #31]
 800bd24:	e150      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bd26:	2302      	movs	r3, #2
 800bd28:	77fb      	strb	r3, [r7, #31]
 800bd2a:	e14d      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bd2c:	2304      	movs	r3, #4
 800bd2e:	77fb      	strb	r3, [r7, #31]
 800bd30:	e14a      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bd32:	2308      	movs	r3, #8
 800bd34:	77fb      	strb	r3, [r7, #31]
 800bd36:	e147      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bd38:	2310      	movs	r3, #16
 800bd3a:	77fb      	strb	r3, [r7, #31]
 800bd3c:	e144      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a83      	ldr	r2, [pc, #524]	; (800bf50 <UART_SetConfig+0x2d0>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d132      	bne.n	800bdae <UART_SetConfig+0x12e>
 800bd48:	4b80      	ldr	r3, [pc, #512]	; (800bf4c <UART_SetConfig+0x2cc>)
 800bd4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd4e:	f003 030c 	and.w	r3, r3, #12
 800bd52:	2b0c      	cmp	r3, #12
 800bd54:	d828      	bhi.n	800bda8 <UART_SetConfig+0x128>
 800bd56:	a201      	add	r2, pc, #4	; (adr r2, 800bd5c <UART_SetConfig+0xdc>)
 800bd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd5c:	0800bd91 	.word	0x0800bd91
 800bd60:	0800bda9 	.word	0x0800bda9
 800bd64:	0800bda9 	.word	0x0800bda9
 800bd68:	0800bda9 	.word	0x0800bda9
 800bd6c:	0800bd9d 	.word	0x0800bd9d
 800bd70:	0800bda9 	.word	0x0800bda9
 800bd74:	0800bda9 	.word	0x0800bda9
 800bd78:	0800bda9 	.word	0x0800bda9
 800bd7c:	0800bd97 	.word	0x0800bd97
 800bd80:	0800bda9 	.word	0x0800bda9
 800bd84:	0800bda9 	.word	0x0800bda9
 800bd88:	0800bda9 	.word	0x0800bda9
 800bd8c:	0800bda3 	.word	0x0800bda3
 800bd90:	2300      	movs	r3, #0
 800bd92:	77fb      	strb	r3, [r7, #31]
 800bd94:	e118      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bd96:	2302      	movs	r3, #2
 800bd98:	77fb      	strb	r3, [r7, #31]
 800bd9a:	e115      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bd9c:	2304      	movs	r3, #4
 800bd9e:	77fb      	strb	r3, [r7, #31]
 800bda0:	e112      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bda2:	2308      	movs	r3, #8
 800bda4:	77fb      	strb	r3, [r7, #31]
 800bda6:	e10f      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bda8:	2310      	movs	r3, #16
 800bdaa:	77fb      	strb	r3, [r7, #31]
 800bdac:	e10c      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4a68      	ldr	r2, [pc, #416]	; (800bf54 <UART_SetConfig+0x2d4>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d120      	bne.n	800bdfa <UART_SetConfig+0x17a>
 800bdb8:	4b64      	ldr	r3, [pc, #400]	; (800bf4c <UART_SetConfig+0x2cc>)
 800bdba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdbe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bdc2:	2b30      	cmp	r3, #48	; 0x30
 800bdc4:	d013      	beq.n	800bdee <UART_SetConfig+0x16e>
 800bdc6:	2b30      	cmp	r3, #48	; 0x30
 800bdc8:	d814      	bhi.n	800bdf4 <UART_SetConfig+0x174>
 800bdca:	2b20      	cmp	r3, #32
 800bdcc:	d009      	beq.n	800bde2 <UART_SetConfig+0x162>
 800bdce:	2b20      	cmp	r3, #32
 800bdd0:	d810      	bhi.n	800bdf4 <UART_SetConfig+0x174>
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d002      	beq.n	800bddc <UART_SetConfig+0x15c>
 800bdd6:	2b10      	cmp	r3, #16
 800bdd8:	d006      	beq.n	800bde8 <UART_SetConfig+0x168>
 800bdda:	e00b      	b.n	800bdf4 <UART_SetConfig+0x174>
 800bddc:	2300      	movs	r3, #0
 800bdde:	77fb      	strb	r3, [r7, #31]
 800bde0:	e0f2      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bde2:	2302      	movs	r3, #2
 800bde4:	77fb      	strb	r3, [r7, #31]
 800bde6:	e0ef      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bde8:	2304      	movs	r3, #4
 800bdea:	77fb      	strb	r3, [r7, #31]
 800bdec:	e0ec      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bdee:	2308      	movs	r3, #8
 800bdf0:	77fb      	strb	r3, [r7, #31]
 800bdf2:	e0e9      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bdf4:	2310      	movs	r3, #16
 800bdf6:	77fb      	strb	r3, [r7, #31]
 800bdf8:	e0e6      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4a56      	ldr	r2, [pc, #344]	; (800bf58 <UART_SetConfig+0x2d8>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d120      	bne.n	800be46 <UART_SetConfig+0x1c6>
 800be04:	4b51      	ldr	r3, [pc, #324]	; (800bf4c <UART_SetConfig+0x2cc>)
 800be06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800be0e:	2bc0      	cmp	r3, #192	; 0xc0
 800be10:	d013      	beq.n	800be3a <UART_SetConfig+0x1ba>
 800be12:	2bc0      	cmp	r3, #192	; 0xc0
 800be14:	d814      	bhi.n	800be40 <UART_SetConfig+0x1c0>
 800be16:	2b80      	cmp	r3, #128	; 0x80
 800be18:	d009      	beq.n	800be2e <UART_SetConfig+0x1ae>
 800be1a:	2b80      	cmp	r3, #128	; 0x80
 800be1c:	d810      	bhi.n	800be40 <UART_SetConfig+0x1c0>
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d002      	beq.n	800be28 <UART_SetConfig+0x1a8>
 800be22:	2b40      	cmp	r3, #64	; 0x40
 800be24:	d006      	beq.n	800be34 <UART_SetConfig+0x1b4>
 800be26:	e00b      	b.n	800be40 <UART_SetConfig+0x1c0>
 800be28:	2300      	movs	r3, #0
 800be2a:	77fb      	strb	r3, [r7, #31]
 800be2c:	e0cc      	b.n	800bfc8 <UART_SetConfig+0x348>
 800be2e:	2302      	movs	r3, #2
 800be30:	77fb      	strb	r3, [r7, #31]
 800be32:	e0c9      	b.n	800bfc8 <UART_SetConfig+0x348>
 800be34:	2304      	movs	r3, #4
 800be36:	77fb      	strb	r3, [r7, #31]
 800be38:	e0c6      	b.n	800bfc8 <UART_SetConfig+0x348>
 800be3a:	2308      	movs	r3, #8
 800be3c:	77fb      	strb	r3, [r7, #31]
 800be3e:	e0c3      	b.n	800bfc8 <UART_SetConfig+0x348>
 800be40:	2310      	movs	r3, #16
 800be42:	77fb      	strb	r3, [r7, #31]
 800be44:	e0c0      	b.n	800bfc8 <UART_SetConfig+0x348>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a44      	ldr	r2, [pc, #272]	; (800bf5c <UART_SetConfig+0x2dc>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d125      	bne.n	800be9c <UART_SetConfig+0x21c>
 800be50:	4b3e      	ldr	r3, [pc, #248]	; (800bf4c <UART_SetConfig+0x2cc>)
 800be52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be5e:	d017      	beq.n	800be90 <UART_SetConfig+0x210>
 800be60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be64:	d817      	bhi.n	800be96 <UART_SetConfig+0x216>
 800be66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be6a:	d00b      	beq.n	800be84 <UART_SetConfig+0x204>
 800be6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be70:	d811      	bhi.n	800be96 <UART_SetConfig+0x216>
 800be72:	2b00      	cmp	r3, #0
 800be74:	d003      	beq.n	800be7e <UART_SetConfig+0x1fe>
 800be76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be7a:	d006      	beq.n	800be8a <UART_SetConfig+0x20a>
 800be7c:	e00b      	b.n	800be96 <UART_SetConfig+0x216>
 800be7e:	2300      	movs	r3, #0
 800be80:	77fb      	strb	r3, [r7, #31]
 800be82:	e0a1      	b.n	800bfc8 <UART_SetConfig+0x348>
 800be84:	2302      	movs	r3, #2
 800be86:	77fb      	strb	r3, [r7, #31]
 800be88:	e09e      	b.n	800bfc8 <UART_SetConfig+0x348>
 800be8a:	2304      	movs	r3, #4
 800be8c:	77fb      	strb	r3, [r7, #31]
 800be8e:	e09b      	b.n	800bfc8 <UART_SetConfig+0x348>
 800be90:	2308      	movs	r3, #8
 800be92:	77fb      	strb	r3, [r7, #31]
 800be94:	e098      	b.n	800bfc8 <UART_SetConfig+0x348>
 800be96:	2310      	movs	r3, #16
 800be98:	77fb      	strb	r3, [r7, #31]
 800be9a:	e095      	b.n	800bfc8 <UART_SetConfig+0x348>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a2f      	ldr	r2, [pc, #188]	; (800bf60 <UART_SetConfig+0x2e0>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d125      	bne.n	800bef2 <UART_SetConfig+0x272>
 800bea6:	4b29      	ldr	r3, [pc, #164]	; (800bf4c <UART_SetConfig+0x2cc>)
 800bea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800beb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800beb4:	d017      	beq.n	800bee6 <UART_SetConfig+0x266>
 800beb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800beba:	d817      	bhi.n	800beec <UART_SetConfig+0x26c>
 800bebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bec0:	d00b      	beq.n	800beda <UART_SetConfig+0x25a>
 800bec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bec6:	d811      	bhi.n	800beec <UART_SetConfig+0x26c>
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d003      	beq.n	800bed4 <UART_SetConfig+0x254>
 800becc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bed0:	d006      	beq.n	800bee0 <UART_SetConfig+0x260>
 800bed2:	e00b      	b.n	800beec <UART_SetConfig+0x26c>
 800bed4:	2301      	movs	r3, #1
 800bed6:	77fb      	strb	r3, [r7, #31]
 800bed8:	e076      	b.n	800bfc8 <UART_SetConfig+0x348>
 800beda:	2302      	movs	r3, #2
 800bedc:	77fb      	strb	r3, [r7, #31]
 800bede:	e073      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bee0:	2304      	movs	r3, #4
 800bee2:	77fb      	strb	r3, [r7, #31]
 800bee4:	e070      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bee6:	2308      	movs	r3, #8
 800bee8:	77fb      	strb	r3, [r7, #31]
 800beea:	e06d      	b.n	800bfc8 <UART_SetConfig+0x348>
 800beec:	2310      	movs	r3, #16
 800beee:	77fb      	strb	r3, [r7, #31]
 800bef0:	e06a      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a1b      	ldr	r2, [pc, #108]	; (800bf64 <UART_SetConfig+0x2e4>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d138      	bne.n	800bf6e <UART_SetConfig+0x2ee>
 800befc:	4b13      	ldr	r3, [pc, #76]	; (800bf4c <UART_SetConfig+0x2cc>)
 800befe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf02:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bf06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf0a:	d017      	beq.n	800bf3c <UART_SetConfig+0x2bc>
 800bf0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf10:	d82a      	bhi.n	800bf68 <UART_SetConfig+0x2e8>
 800bf12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf16:	d00b      	beq.n	800bf30 <UART_SetConfig+0x2b0>
 800bf18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf1c:	d824      	bhi.n	800bf68 <UART_SetConfig+0x2e8>
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d003      	beq.n	800bf2a <UART_SetConfig+0x2aa>
 800bf22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf26:	d006      	beq.n	800bf36 <UART_SetConfig+0x2b6>
 800bf28:	e01e      	b.n	800bf68 <UART_SetConfig+0x2e8>
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	77fb      	strb	r3, [r7, #31]
 800bf2e:	e04b      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bf30:	2302      	movs	r3, #2
 800bf32:	77fb      	strb	r3, [r7, #31]
 800bf34:	e048      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bf36:	2304      	movs	r3, #4
 800bf38:	77fb      	strb	r3, [r7, #31]
 800bf3a:	e045      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bf3c:	2308      	movs	r3, #8
 800bf3e:	77fb      	strb	r3, [r7, #31]
 800bf40:	e042      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bf42:	bf00      	nop
 800bf44:	efff69f3 	.word	0xefff69f3
 800bf48:	40011000 	.word	0x40011000
 800bf4c:	40023800 	.word	0x40023800
 800bf50:	40004400 	.word	0x40004400
 800bf54:	40004800 	.word	0x40004800
 800bf58:	40004c00 	.word	0x40004c00
 800bf5c:	40005000 	.word	0x40005000
 800bf60:	40011400 	.word	0x40011400
 800bf64:	40007800 	.word	0x40007800
 800bf68:	2310      	movs	r3, #16
 800bf6a:	77fb      	strb	r3, [r7, #31]
 800bf6c:	e02c      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a72      	ldr	r2, [pc, #456]	; (800c13c <UART_SetConfig+0x4bc>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d125      	bne.n	800bfc4 <UART_SetConfig+0x344>
 800bf78:	4b71      	ldr	r3, [pc, #452]	; (800c140 <UART_SetConfig+0x4c0>)
 800bf7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bf82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bf86:	d017      	beq.n	800bfb8 <UART_SetConfig+0x338>
 800bf88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bf8c:	d817      	bhi.n	800bfbe <UART_SetConfig+0x33e>
 800bf8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf92:	d00b      	beq.n	800bfac <UART_SetConfig+0x32c>
 800bf94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf98:	d811      	bhi.n	800bfbe <UART_SetConfig+0x33e>
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d003      	beq.n	800bfa6 <UART_SetConfig+0x326>
 800bf9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfa2:	d006      	beq.n	800bfb2 <UART_SetConfig+0x332>
 800bfa4:	e00b      	b.n	800bfbe <UART_SetConfig+0x33e>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	77fb      	strb	r3, [r7, #31]
 800bfaa:	e00d      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bfac:	2302      	movs	r3, #2
 800bfae:	77fb      	strb	r3, [r7, #31]
 800bfb0:	e00a      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bfb2:	2304      	movs	r3, #4
 800bfb4:	77fb      	strb	r3, [r7, #31]
 800bfb6:	e007      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bfb8:	2308      	movs	r3, #8
 800bfba:	77fb      	strb	r3, [r7, #31]
 800bfbc:	e004      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bfbe:	2310      	movs	r3, #16
 800bfc0:	77fb      	strb	r3, [r7, #31]
 800bfc2:	e001      	b.n	800bfc8 <UART_SetConfig+0x348>
 800bfc4:	2310      	movs	r3, #16
 800bfc6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	69db      	ldr	r3, [r3, #28]
 800bfcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfd0:	d15b      	bne.n	800c08a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800bfd2:	7ffb      	ldrb	r3, [r7, #31]
 800bfd4:	2b08      	cmp	r3, #8
 800bfd6:	d828      	bhi.n	800c02a <UART_SetConfig+0x3aa>
 800bfd8:	a201      	add	r2, pc, #4	; (adr r2, 800bfe0 <UART_SetConfig+0x360>)
 800bfda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfde:	bf00      	nop
 800bfe0:	0800c005 	.word	0x0800c005
 800bfe4:	0800c00d 	.word	0x0800c00d
 800bfe8:	0800c015 	.word	0x0800c015
 800bfec:	0800c02b 	.word	0x0800c02b
 800bff0:	0800c01b 	.word	0x0800c01b
 800bff4:	0800c02b 	.word	0x0800c02b
 800bff8:	0800c02b 	.word	0x0800c02b
 800bffc:	0800c02b 	.word	0x0800c02b
 800c000:	0800c023 	.word	0x0800c023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c004:	f7fd ff60 	bl	8009ec8 <HAL_RCC_GetPCLK1Freq>
 800c008:	61b8      	str	r0, [r7, #24]
        break;
 800c00a:	e013      	b.n	800c034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c00c:	f7fd ff70 	bl	8009ef0 <HAL_RCC_GetPCLK2Freq>
 800c010:	61b8      	str	r0, [r7, #24]
        break;
 800c012:	e00f      	b.n	800c034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c014:	4b4b      	ldr	r3, [pc, #300]	; (800c144 <UART_SetConfig+0x4c4>)
 800c016:	61bb      	str	r3, [r7, #24]
        break;
 800c018:	e00c      	b.n	800c034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c01a:	f7fd fe83 	bl	8009d24 <HAL_RCC_GetSysClockFreq>
 800c01e:	61b8      	str	r0, [r7, #24]
        break;
 800c020:	e008      	b.n	800c034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c026:	61bb      	str	r3, [r7, #24]
        break;
 800c028:	e004      	b.n	800c034 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c02a:	2300      	movs	r3, #0
 800c02c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c02e:	2301      	movs	r3, #1
 800c030:	77bb      	strb	r3, [r7, #30]
        break;
 800c032:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d074      	beq.n	800c124 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	005a      	lsls	r2, r3, #1
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	085b      	lsrs	r3, r3, #1
 800c044:	441a      	add	r2, r3
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c04e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	2b0f      	cmp	r3, #15
 800c054:	d916      	bls.n	800c084 <UART_SetConfig+0x404>
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c05c:	d212      	bcs.n	800c084 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	b29b      	uxth	r3, r3
 800c062:	f023 030f 	bic.w	r3, r3, #15
 800c066:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	085b      	lsrs	r3, r3, #1
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	f003 0307 	and.w	r3, r3, #7
 800c072:	b29a      	uxth	r2, r3
 800c074:	89fb      	ldrh	r3, [r7, #14]
 800c076:	4313      	orrs	r3, r2
 800c078:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	89fa      	ldrh	r2, [r7, #14]
 800c080:	60da      	str	r2, [r3, #12]
 800c082:	e04f      	b.n	800c124 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c084:	2301      	movs	r3, #1
 800c086:	77bb      	strb	r3, [r7, #30]
 800c088:	e04c      	b.n	800c124 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c08a:	7ffb      	ldrb	r3, [r7, #31]
 800c08c:	2b08      	cmp	r3, #8
 800c08e:	d828      	bhi.n	800c0e2 <UART_SetConfig+0x462>
 800c090:	a201      	add	r2, pc, #4	; (adr r2, 800c098 <UART_SetConfig+0x418>)
 800c092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c096:	bf00      	nop
 800c098:	0800c0bd 	.word	0x0800c0bd
 800c09c:	0800c0c5 	.word	0x0800c0c5
 800c0a0:	0800c0cd 	.word	0x0800c0cd
 800c0a4:	0800c0e3 	.word	0x0800c0e3
 800c0a8:	0800c0d3 	.word	0x0800c0d3
 800c0ac:	0800c0e3 	.word	0x0800c0e3
 800c0b0:	0800c0e3 	.word	0x0800c0e3
 800c0b4:	0800c0e3 	.word	0x0800c0e3
 800c0b8:	0800c0db 	.word	0x0800c0db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0bc:	f7fd ff04 	bl	8009ec8 <HAL_RCC_GetPCLK1Freq>
 800c0c0:	61b8      	str	r0, [r7, #24]
        break;
 800c0c2:	e013      	b.n	800c0ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c0c4:	f7fd ff14 	bl	8009ef0 <HAL_RCC_GetPCLK2Freq>
 800c0c8:	61b8      	str	r0, [r7, #24]
        break;
 800c0ca:	e00f      	b.n	800c0ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c0cc:	4b1d      	ldr	r3, [pc, #116]	; (800c144 <UART_SetConfig+0x4c4>)
 800c0ce:	61bb      	str	r3, [r7, #24]
        break;
 800c0d0:	e00c      	b.n	800c0ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c0d2:	f7fd fe27 	bl	8009d24 <HAL_RCC_GetSysClockFreq>
 800c0d6:	61b8      	str	r0, [r7, #24]
        break;
 800c0d8:	e008      	b.n	800c0ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0de:	61bb      	str	r3, [r7, #24]
        break;
 800c0e0:	e004      	b.n	800c0ec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	77bb      	strb	r3, [r7, #30]
        break;
 800c0ea:	bf00      	nop
    }

    if (pclk != 0U)
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d018      	beq.n	800c124 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	085a      	lsrs	r2, r3, #1
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	441a      	add	r2, r3
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	fbb2 f3f3 	udiv	r3, r2, r3
 800c104:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	2b0f      	cmp	r3, #15
 800c10a:	d909      	bls.n	800c120 <UART_SetConfig+0x4a0>
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c112:	d205      	bcs.n	800c120 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	b29a      	uxth	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	60da      	str	r2, [r3, #12]
 800c11e:	e001      	b.n	800c124 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c120:	2301      	movs	r3, #1
 800c122:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800c130:	7fbb      	ldrb	r3, [r7, #30]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3720      	adds	r7, #32
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	40007c00 	.word	0x40007c00
 800c140:	40023800 	.word	0x40023800
 800c144:	00f42400 	.word	0x00f42400

0800c148 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c148:	b480      	push	{r7}
 800c14a:	b083      	sub	sp, #12
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c154:	f003 0301 	and.w	r3, r3, #1
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d00a      	beq.n	800c172 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	430a      	orrs	r2, r1
 800c170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c176:	f003 0302 	and.w	r3, r3, #2
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00a      	beq.n	800c194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	430a      	orrs	r2, r1
 800c192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c198:	f003 0304 	and.w	r3, r3, #4
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d00a      	beq.n	800c1b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	430a      	orrs	r2, r1
 800c1b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ba:	f003 0308 	and.w	r3, r3, #8
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d00a      	beq.n	800c1d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	430a      	orrs	r2, r1
 800c1d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1dc:	f003 0310 	and.w	r3, r3, #16
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00a      	beq.n	800c1fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	689b      	ldr	r3, [r3, #8]
 800c1ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	430a      	orrs	r2, r1
 800c1f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1fe:	f003 0320 	and.w	r3, r3, #32
 800c202:	2b00      	cmp	r3, #0
 800c204:	d00a      	beq.n	800c21c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	430a      	orrs	r2, r1
 800c21a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c224:	2b00      	cmp	r3, #0
 800c226:	d01a      	beq.n	800c25e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	685b      	ldr	r3, [r3, #4]
 800c22e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	430a      	orrs	r2, r1
 800c23c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c246:	d10a      	bne.n	800c25e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	430a      	orrs	r2, r1
 800c25c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c266:	2b00      	cmp	r3, #0
 800c268:	d00a      	beq.n	800c280 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	430a      	orrs	r2, r1
 800c27e:	605a      	str	r2, [r3, #4]
  }
}
 800c280:	bf00      	nop
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b086      	sub	sp, #24
 800c290:	af02      	add	r7, sp, #8
 800c292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2200      	movs	r2, #0
 800c298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c29c:	f7fa fcd4 	bl	8006c48 <HAL_GetTick>
 800c2a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f003 0308 	and.w	r3, r3, #8
 800c2ac:	2b08      	cmp	r3, #8
 800c2ae:	d10e      	bne.n	800c2ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c2b4:	9300      	str	r3, [sp, #0]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 f81b 	bl	800c2fa <UART_WaitOnFlagUntilTimeout>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d001      	beq.n	800c2ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	e011      	b.n	800c2f2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2220      	movs	r2, #32
 800c2d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2220      	movs	r2, #32
 800c2d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b09c      	sub	sp, #112	; 0x70
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	60f8      	str	r0, [r7, #12]
 800c302:	60b9      	str	r1, [r7, #8]
 800c304:	603b      	str	r3, [r7, #0]
 800c306:	4613      	mov	r3, r2
 800c308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c30a:	e0a7      	b.n	800c45c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c30c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c312:	f000 80a3 	beq.w	800c45c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c316:	f7fa fc97 	bl	8006c48 <HAL_GetTick>
 800c31a:	4602      	mov	r2, r0
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	1ad3      	subs	r3, r2, r3
 800c320:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c322:	429a      	cmp	r2, r3
 800c324:	d302      	bcc.n	800c32c <UART_WaitOnFlagUntilTimeout+0x32>
 800c326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d13f      	bne.n	800c3ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c334:	e853 3f00 	ldrex	r3, [r3]
 800c338:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c33a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c33c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c340:	667b      	str	r3, [r7, #100]	; 0x64
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	461a      	mov	r2, r3
 800c348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c34a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c34c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c350:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c352:	e841 2300 	strex	r3, r2, [r1]
 800c356:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d1e6      	bne.n	800c32c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	3308      	adds	r3, #8
 800c364:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c368:	e853 3f00 	ldrex	r3, [r3]
 800c36c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c370:	f023 0301 	bic.w	r3, r3, #1
 800c374:	663b      	str	r3, [r7, #96]	; 0x60
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	3308      	adds	r3, #8
 800c37c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c37e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c380:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c386:	e841 2300 	strex	r3, r2, [r1]
 800c38a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c38c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d1e5      	bne.n	800c35e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2220      	movs	r2, #32
 800c396:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2220      	movs	r2, #32
 800c39c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800c3a8:	2303      	movs	r3, #3
 800c3aa:	e068      	b.n	800c47e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f003 0304 	and.w	r3, r3, #4
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d050      	beq.n	800c45c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	69db      	ldr	r3, [r3, #28]
 800c3c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c3c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3c8:	d148      	bne.n	800c45c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3dc:	e853 3f00 	ldrex	r3, [r3]
 800c3e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c3e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3f2:	637b      	str	r3, [r7, #52]	; 0x34
 800c3f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c3f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3fa:	e841 2300 	strex	r3, r2, [r1]
 800c3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1e6      	bne.n	800c3d4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	3308      	adds	r3, #8
 800c40c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	e853 3f00 	ldrex	r3, [r3]
 800c414:	613b      	str	r3, [r7, #16]
   return(result);
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	f023 0301 	bic.w	r3, r3, #1
 800c41c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	3308      	adds	r3, #8
 800c424:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c426:	623a      	str	r2, [r7, #32]
 800c428:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42a:	69f9      	ldr	r1, [r7, #28]
 800c42c:	6a3a      	ldr	r2, [r7, #32]
 800c42e:	e841 2300 	strex	r3, r2, [r1]
 800c432:	61bb      	str	r3, [r7, #24]
   return(result);
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d1e5      	bne.n	800c406 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2220      	movs	r2, #32
 800c43e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2220      	movs	r2, #32
 800c444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2220      	movs	r2, #32
 800c44c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2200      	movs	r2, #0
 800c454:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800c458:	2303      	movs	r3, #3
 800c45a:	e010      	b.n	800c47e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	69da      	ldr	r2, [r3, #28]
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	4013      	ands	r3, r2
 800c466:	68ba      	ldr	r2, [r7, #8]
 800c468:	429a      	cmp	r2, r3
 800c46a:	bf0c      	ite	eq
 800c46c:	2301      	moveq	r3, #1
 800c46e:	2300      	movne	r3, #0
 800c470:	b2db      	uxtb	r3, r3
 800c472:	461a      	mov	r2, r3
 800c474:	79fb      	ldrb	r3, [r7, #7]
 800c476:	429a      	cmp	r2, r3
 800c478:	f43f af48 	beq.w	800c30c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c47c:	2300      	movs	r3, #0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3770      	adds	r7, #112	; 0x70
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}

0800c486 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c486:	b480      	push	{r7}
 800c488:	b095      	sub	sp, #84	; 0x54
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c496:	e853 3f00 	ldrex	r3, [r3]
 800c49a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c4a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4ac:	643b      	str	r3, [r7, #64]	; 0x40
 800c4ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c4b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4b4:	e841 2300 	strex	r3, r2, [r1]
 800c4b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d1e6      	bne.n	800c48e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	3308      	adds	r3, #8
 800c4c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c8:	6a3b      	ldr	r3, [r7, #32]
 800c4ca:	e853 3f00 	ldrex	r3, [r3]
 800c4ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	f023 0301 	bic.w	r3, r3, #1
 800c4d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	3308      	adds	r3, #8
 800c4de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c4e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4e8:	e841 2300 	strex	r3, r2, [r1]
 800c4ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d1e5      	bne.n	800c4c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d118      	bne.n	800c52e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	e853 3f00 	ldrex	r3, [r3]
 800c508:	60bb      	str	r3, [r7, #8]
   return(result);
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	f023 0310 	bic.w	r3, r3, #16
 800c510:	647b      	str	r3, [r7, #68]	; 0x44
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	461a      	mov	r2, r3
 800c518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c51a:	61bb      	str	r3, [r7, #24]
 800c51c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c51e:	6979      	ldr	r1, [r7, #20]
 800c520:	69ba      	ldr	r2, [r7, #24]
 800c522:	e841 2300 	strex	r3, r2, [r1]
 800c526:	613b      	str	r3, [r7, #16]
   return(result);
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1e6      	bne.n	800c4fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2220      	movs	r2, #32
 800c532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2200      	movs	r2, #0
 800c53a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2200      	movs	r2, #0
 800c540:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c542:	bf00      	nop
 800c544:	3754      	adds	r7, #84	; 0x54
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr

0800c54e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c54e:	b580      	push	{r7, lr}
 800c550:	b084      	sub	sp, #16
 800c552:	af00      	add	r7, sp, #0
 800c554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c55a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2200      	movs	r2, #0
 800c560:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2200      	movs	r2, #0
 800c568:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c56c:	68f8      	ldr	r0, [r7, #12]
 800c56e:	f7ff fb71 	bl	800bc54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c572:	bf00      	nop
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}

0800c57a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c57a:	b580      	push	{r7, lr}
 800c57c:	b088      	sub	sp, #32
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	e853 3f00 	ldrex	r3, [r3]
 800c58e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c596:	61fb      	str	r3, [r7, #28]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	461a      	mov	r2, r3
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	61bb      	str	r3, [r7, #24]
 800c5a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a4:	6979      	ldr	r1, [r7, #20]
 800c5a6:	69ba      	ldr	r2, [r7, #24]
 800c5a8:	e841 2300 	strex	r3, r2, [r1]
 800c5ac:	613b      	str	r3, [r7, #16]
   return(result);
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1e6      	bne.n	800c582 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2220      	movs	r2, #32
 800c5b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f7f4 ff7f 	bl	80014c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5c6:	bf00      	nop
 800c5c8:	3720      	adds	r7, #32
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
	...

0800c5d0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d121      	bne.n	800c626 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	4b27      	ldr	r3, [pc, #156]	; (800c684 <FMC_SDRAM_Init+0xb4>)
 800c5e8:	4013      	ands	r3, r2
 800c5ea:	683a      	ldr	r2, [r7, #0]
 800c5ec:	6851      	ldr	r1, [r2, #4]
 800c5ee:	683a      	ldr	r2, [r7, #0]
 800c5f0:	6892      	ldr	r2, [r2, #8]
 800c5f2:	4311      	orrs	r1, r2
 800c5f4:	683a      	ldr	r2, [r7, #0]
 800c5f6:	68d2      	ldr	r2, [r2, #12]
 800c5f8:	4311      	orrs	r1, r2
 800c5fa:	683a      	ldr	r2, [r7, #0]
 800c5fc:	6912      	ldr	r2, [r2, #16]
 800c5fe:	4311      	orrs	r1, r2
 800c600:	683a      	ldr	r2, [r7, #0]
 800c602:	6952      	ldr	r2, [r2, #20]
 800c604:	4311      	orrs	r1, r2
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	6992      	ldr	r2, [r2, #24]
 800c60a:	4311      	orrs	r1, r2
 800c60c:	683a      	ldr	r2, [r7, #0]
 800c60e:	69d2      	ldr	r2, [r2, #28]
 800c610:	4311      	orrs	r1, r2
 800c612:	683a      	ldr	r2, [r7, #0]
 800c614:	6a12      	ldr	r2, [r2, #32]
 800c616:	4311      	orrs	r1, r2
 800c618:	683a      	ldr	r2, [r7, #0]
 800c61a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c61c:	430a      	orrs	r2, r1
 800c61e:	431a      	orrs	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	601a      	str	r2, [r3, #0]
 800c624:	e026      	b.n	800c674 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	69d9      	ldr	r1, [r3, #28]
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	6a1b      	ldr	r3, [r3, #32]
 800c636:	4319      	orrs	r1, r3
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c63c:	430b      	orrs	r3, r1
 800c63e:	431a      	orrs	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	685a      	ldr	r2, [r3, #4]
 800c648:	4b0e      	ldr	r3, [pc, #56]	; (800c684 <FMC_SDRAM_Init+0xb4>)
 800c64a:	4013      	ands	r3, r2
 800c64c:	683a      	ldr	r2, [r7, #0]
 800c64e:	6851      	ldr	r1, [r2, #4]
 800c650:	683a      	ldr	r2, [r7, #0]
 800c652:	6892      	ldr	r2, [r2, #8]
 800c654:	4311      	orrs	r1, r2
 800c656:	683a      	ldr	r2, [r7, #0]
 800c658:	68d2      	ldr	r2, [r2, #12]
 800c65a:	4311      	orrs	r1, r2
 800c65c:	683a      	ldr	r2, [r7, #0]
 800c65e:	6912      	ldr	r2, [r2, #16]
 800c660:	4311      	orrs	r1, r2
 800c662:	683a      	ldr	r2, [r7, #0]
 800c664:	6952      	ldr	r2, [r2, #20]
 800c666:	4311      	orrs	r1, r2
 800c668:	683a      	ldr	r2, [r7, #0]
 800c66a:	6992      	ldr	r2, [r2, #24]
 800c66c:	430a      	orrs	r2, r1
 800c66e:	431a      	orrs	r2, r3
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c674:	2300      	movs	r3, #0
}
 800c676:	4618      	mov	r0, r3
 800c678:	370c      	adds	r7, #12
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	ffff8000 	.word	0xffff8000

0800c688 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c688:	b480      	push	{r7}
 800c68a:	b085      	sub	sp, #20
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d128      	bne.n	800c6ec <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	1e59      	subs	r1, r3, #1
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	011b      	lsls	r3, r3, #4
 800c6b0:	4319      	orrs	r1, r3
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	3b01      	subs	r3, #1
 800c6b8:	021b      	lsls	r3, r3, #8
 800c6ba:	4319      	orrs	r1, r3
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	031b      	lsls	r3, r3, #12
 800c6c4:	4319      	orrs	r1, r3
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	691b      	ldr	r3, [r3, #16]
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	041b      	lsls	r3, r3, #16
 800c6ce:	4319      	orrs	r1, r3
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	695b      	ldr	r3, [r3, #20]
 800c6d4:	3b01      	subs	r3, #1
 800c6d6:	051b      	lsls	r3, r3, #20
 800c6d8:	4319      	orrs	r1, r3
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	699b      	ldr	r3, [r3, #24]
 800c6de:	3b01      	subs	r3, #1
 800c6e0:	061b      	lsls	r3, r3, #24
 800c6e2:	430b      	orrs	r3, r1
 800c6e4:	431a      	orrs	r2, r3
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	609a      	str	r2, [r3, #8]
 800c6ea:	e02d      	b.n	800c748 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	689a      	ldr	r2, [r3, #8]
 800c6f0:	4b19      	ldr	r3, [pc, #100]	; (800c758 <FMC_SDRAM_Timing_Init+0xd0>)
 800c6f2:	4013      	ands	r3, r2
 800c6f4:	68ba      	ldr	r2, [r7, #8]
 800c6f6:	68d2      	ldr	r2, [r2, #12]
 800c6f8:	3a01      	subs	r2, #1
 800c6fa:	0311      	lsls	r1, r2, #12
 800c6fc:	68ba      	ldr	r2, [r7, #8]
 800c6fe:	6952      	ldr	r2, [r2, #20]
 800c700:	3a01      	subs	r2, #1
 800c702:	0512      	lsls	r2, r2, #20
 800c704:	430a      	orrs	r2, r1
 800c706:	431a      	orrs	r2, r3
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	1e59      	subs	r1, r3, #1
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	3b01      	subs	r3, #1
 800c720:	011b      	lsls	r3, r3, #4
 800c722:	4319      	orrs	r1, r3
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	3b01      	subs	r3, #1
 800c72a:	021b      	lsls	r3, r3, #8
 800c72c:	4319      	orrs	r1, r3
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	691b      	ldr	r3, [r3, #16]
 800c732:	3b01      	subs	r3, #1
 800c734:	041b      	lsls	r3, r3, #16
 800c736:	4319      	orrs	r1, r3
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	699b      	ldr	r3, [r3, #24]
 800c73c:	3b01      	subs	r3, #1
 800c73e:	061b      	lsls	r3, r3, #24
 800c740:	430b      	orrs	r3, r1
 800c742:	431a      	orrs	r2, r3
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c748:	2300      	movs	r3, #0
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3714      	adds	r7, #20
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr
 800c756:	bf00      	nop
 800c758:	ff0f0fff 	.word	0xff0f0fff

0800c75c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b085      	sub	sp, #20
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	691a      	ldr	r2, [r3, #16]
 800c76c:	4b0c      	ldr	r3, [pc, #48]	; (800c7a0 <FMC_SDRAM_SendCommand+0x44>)
 800c76e:	4013      	ands	r3, r2
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	6811      	ldr	r1, [r2, #0]
 800c774:	68ba      	ldr	r2, [r7, #8]
 800c776:	6852      	ldr	r2, [r2, #4]
 800c778:	4311      	orrs	r1, r2
 800c77a:	68ba      	ldr	r2, [r7, #8]
 800c77c:	6892      	ldr	r2, [r2, #8]
 800c77e:	3a01      	subs	r2, #1
 800c780:	0152      	lsls	r2, r2, #5
 800c782:	4311      	orrs	r1, r2
 800c784:	68ba      	ldr	r2, [r7, #8]
 800c786:	68d2      	ldr	r2, [r2, #12]
 800c788:	0252      	lsls	r2, r2, #9
 800c78a:	430a      	orrs	r2, r1
 800c78c:	431a      	orrs	r2, r3
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800c792:	2300      	movs	r3, #0
}
 800c794:	4618      	mov	r0, r3
 800c796:	3714      	adds	r7, #20
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr
 800c7a0:	ffc00000 	.word	0xffc00000

0800c7a4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	695a      	ldr	r2, [r3, #20]
 800c7b2:	4b07      	ldr	r3, [pc, #28]	; (800c7d0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800c7b4:	4013      	ands	r3, r2
 800c7b6:	683a      	ldr	r2, [r7, #0]
 800c7b8:	0052      	lsls	r2, r2, #1
 800c7ba:	431a      	orrs	r2, r3
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c7c0:	2300      	movs	r3, #0
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	370c      	adds	r7, #12
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop
 800c7d0:	ffffc001 	.word	0xffffc001

0800c7d4 <__libc_init_array>:
 800c7d4:	b570      	push	{r4, r5, r6, lr}
 800c7d6:	4d0d      	ldr	r5, [pc, #52]	; (800c80c <__libc_init_array+0x38>)
 800c7d8:	4c0d      	ldr	r4, [pc, #52]	; (800c810 <__libc_init_array+0x3c>)
 800c7da:	1b64      	subs	r4, r4, r5
 800c7dc:	10a4      	asrs	r4, r4, #2
 800c7de:	2600      	movs	r6, #0
 800c7e0:	42a6      	cmp	r6, r4
 800c7e2:	d109      	bne.n	800c7f8 <__libc_init_array+0x24>
 800c7e4:	4d0b      	ldr	r5, [pc, #44]	; (800c814 <__libc_init_array+0x40>)
 800c7e6:	4c0c      	ldr	r4, [pc, #48]	; (800c818 <__libc_init_array+0x44>)
 800c7e8:	f000 f820 	bl	800c82c <_init>
 800c7ec:	1b64      	subs	r4, r4, r5
 800c7ee:	10a4      	asrs	r4, r4, #2
 800c7f0:	2600      	movs	r6, #0
 800c7f2:	42a6      	cmp	r6, r4
 800c7f4:	d105      	bne.n	800c802 <__libc_init_array+0x2e>
 800c7f6:	bd70      	pop	{r4, r5, r6, pc}
 800c7f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7fc:	4798      	blx	r3
 800c7fe:	3601      	adds	r6, #1
 800c800:	e7ee      	b.n	800c7e0 <__libc_init_array+0xc>
 800c802:	f855 3b04 	ldr.w	r3, [r5], #4
 800c806:	4798      	blx	r3
 800c808:	3601      	adds	r6, #1
 800c80a:	e7f2      	b.n	800c7f2 <__libc_init_array+0x1e>
 800c80c:	0800ecdc 	.word	0x0800ecdc
 800c810:	0800ecdc 	.word	0x0800ecdc
 800c814:	0800ecdc 	.word	0x0800ecdc
 800c818:	0800ece0 	.word	0x0800ece0

0800c81c <memset>:
 800c81c:	4402      	add	r2, r0
 800c81e:	4603      	mov	r3, r0
 800c820:	4293      	cmp	r3, r2
 800c822:	d100      	bne.n	800c826 <memset+0xa>
 800c824:	4770      	bx	lr
 800c826:	f803 1b01 	strb.w	r1, [r3], #1
 800c82a:	e7f9      	b.n	800c820 <memset+0x4>

0800c82c <_init>:
 800c82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82e:	bf00      	nop
 800c830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c832:	bc08      	pop	{r3}
 800c834:	469e      	mov	lr, r3
 800c836:	4770      	bx	lr

0800c838 <_fini>:
 800c838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c83a:	bf00      	nop
 800c83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c83e:	bc08      	pop	{r3}
 800c840:	469e      	mov	lr, r3
 800c842:	4770      	bx	lr
